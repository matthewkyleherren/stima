/*! For license information please see LICENSES */
(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{476:function(t,e,n){"use strict";n.r(e),n.d(e,"ACESFilmicToneMapping",(function(){return ft})),n.d(e,"AddEquation",(function(){return P})),n.d(e,"AddOperation",(function(){return lt})),n.d(e,"AdditiveAnimationBlendMode",(function(){return $e})),n.d(e,"AdditiveBlending",(function(){return E})),n.d(e,"AgXToneMapping",(function(){return gt})),n.d(e,"AlphaFormat",(function(){return Kt})),n.d(e,"AlwaysCompare",(function(){return Fn})),n.d(e,"AlwaysDepth",(function(){return $})),n.d(e,"AlwaysStencilFunc",(function(){return Rn})),n.d(e,"AmbientLight",(function(){return Bp})),n.d(e,"AnimationAction",(function(){return Cf})),n.d(e,"AnimationClip",(function(){return lp})),n.d(e,"AnimationLoader",(function(){return _p})),n.d(e,"AnimationMixer",(function(){return Pf})),n.d(e,"AnimationObjectGroup",(function(){return Af})),n.d(e,"AnimationUtils",(function(){return Yd})),n.d(e,"ArcCurve",(function(){return uu})),n.d(e,"ArrayCamera",(function(){return uc})),n.d(e,"ArrowHelper",(function(){return Tm})),n.d(e,"AttachedBindMode",(function(){return vt})),n.d(e,"Audio",(function(){return df})),n.d(e,"AudioAnalyser",(function(){return vf})),n.d(e,"AudioContext",(function(){return $p})),n.d(e,"AudioListener",(function(){return uf})),n.d(e,"AudioLoader",(function(){return Qp})),n.d(e,"AxesHelper",(function(){return wm})),n.d(e,"BackSide",(function(){return M})),n.d(e,"BasicDepthPacking",(function(){return nn})),n.d(e,"BasicShadowMap",(function(){return m})),n.d(e,"BatchedMesh",(function(){return Nh})),n.d(e,"Bone",(function(){return rh})),n.d(e,"BooleanKeyframeTrack",(function(){return tp})),n.d(e,"Box2",(function(){return Wf})),n.d(e,"Box3",(function(){return ji})),n.d(e,"Box3Helper",(function(){return xm})),n.d(e,"BoxGeometry",(function(){return ia})),n.d(e,"BoxHelper",(function(){return vm})),n.d(e,"BufferAttribute",(function(){return Es})),n.d(e,"BufferGeometry",(function(){return Gs})),n.d(e,"BufferGeometryLoader",(function(){return Xp})),n.d(e,"ByteType",(function(){return kt})),n.d(e,"Cache",(function(){return hp})),n.d(e,"Camera",(function(){return ca})),n.d(e,"CameraHelper",(function(){return mm})),n.d(e,"CanvasTexture",(function(){return lu})),n.d(e,"CapsuleGeometry",(function(){return Lu})),n.d(e,"CatmullRomCurve3",(function(){return _u})),n.d(e,"CineonToneMapping",(function(){return pt})),n.d(e,"CircleGeometry",(function(){return Uu})),n.d(e,"ClampToEdgeWrapping",(function(){return At})),n.d(e,"Clock",(function(){return sf})),n.d(e,"Color",(function(){return fs})),n.d(e,"ColorKeyframeTrack",(function(){return ep})),n.d(e,"ColorManagement",(function(){return yi})),n.d(e,"CompressedArrayTexture",(function(){return au})),n.d(e,"CompressedCubeTexture",(function(){return ou})),n.d(e,"CompressedTexture",(function(){return su})),n.d(e,"CompressedTextureLoader",(function(){return vp})),n.d(e,"ConeGeometry",(function(){return Nu})),n.d(e,"ConstantAlphaFactor",(function(){return Z})),n.d(e,"ConstantColorFactor",(function(){return j})),n.d(e,"Controls",(function(){return Am})),n.d(e,"CubeCamera",(function(){return ma})),n.d(e,"CubeReflectionMapping",(function(){return Mt})),n.d(e,"CubeRefractionMapping",(function(){return St})),n.d(e,"CubeTexture",(function(){return ga})),n.d(e,"CubeTextureLoader",(function(){return yp})),n.d(e,"CubeUVReflectionMapping",(function(){return wt})),n.d(e,"CubicBezierCurve",(function(){return Mu})),n.d(e,"CubicBezierCurve3",(function(){return Su})),n.d(e,"CubicInterpolant",(function(){return Jd})),n.d(e,"CullFaceBack",(function(){return h})),n.d(e,"CullFaceFront",(function(){return d})),n.d(e,"CullFaceFrontBack",(function(){return f})),n.d(e,"CullFaceNone",(function(){return c})),n.d(e,"Curve",(function(){return cu})),n.d(e,"CurvePath",(function(){return Ru})),n.d(e,"CustomBlending",(function(){return R})),n.d(e,"CustomToneMapping",(function(){return mt})),n.d(e,"CylinderGeometry",(function(){return Du})),n.d(e,"Cylindrical",(function(){return Vf})),n.d(e,"Data3DTexture",(function(){return ki})),n.d(e,"DataArrayTexture",(function(){return Bi})),n.d(e,"DataTexture",(function(){return sh})),n.d(e,"DataTextureLoader",(function(){return Mp})),n.d(e,"DataUtils",(function(){return bs})),n.d(e,"DecrementStencilOp",(function(){return vn})),n.d(e,"DecrementWrapStencilOp",(function(){return yn})),n.d(e,"DefaultLoadingManager",(function(){return dp})),n.d(e,"DepthFormat",(function(){return ne})),n.d(e,"DepthStencilFormat",(function(){return ie})),n.d(e,"DepthTexture",(function(){return uo})),n.d(e,"DetachedBindMode",(function(){return xt})),n.d(e,"DirectionalLight",(function(){return Fp})),n.d(e,"DirectionalLightHelper",(function(){return dm})),n.d(e,"DiscreteInterpolant",(function(){return $d})),n.d(e,"DodecahedronGeometry",(function(){return Fu})),n.d(e,"DoubleSide",(function(){return S})),n.d(e,"DstAlphaFactor",(function(){return V})),n.d(e,"DstColorFactor",(function(){return G})),n.d(e,"DynamicCopyUsage",(function(){return Xn})),n.d(e,"DynamicDrawUsage",(function(){return zn})),n.d(e,"DynamicReadUsage",(function(){return Hn})),n.d(e,"EdgesGeometry",(function(){return Hu})),n.d(e,"EllipseCurve",(function(){return hu})),n.d(e,"EqualCompare",(function(){return Ln})),n.d(e,"EqualDepth",(function(){return et})),n.d(e,"EqualStencilFunc",(function(){return Tn})),n.d(e,"EquirectangularReflectionMapping",(function(){return bt})),n.d(e,"EquirectangularRefractionMapping",(function(){return Tt})),n.d(e,"Euler",(function(){return Lr})),n.d(e,"EventDispatcher",(function(){return Kn})),n.d(e,"ExtrudeGeometry",(function(){return xd})),n.d(e,"FileLoader",(function(){return gp})),n.d(e,"Float16BufferAttribute",(function(){return Ds})),n.d(e,"Float32BufferAttribute",(function(){return Ns})),n.d(e,"FloatType",(function(){return Xt})),n.d(e,"Fog",(function(){return bc})),n.d(e,"FogExp2",(function(){return Sc})),n.d(e,"FramebufferTexture",(function(){return ru})),n.d(e,"FrontSide",(function(){return y})),n.d(e,"Frustum",(function(){return Ta})),n.d(e,"GLBufferAttribute",(function(){return Nf})),n.d(e,"GLSL1",(function(){return qn})),n.d(e,"GLSL3",(function(){return Yn})),n.d(e,"GreaterCompare",(function(){return Dn})),n.d(e,"GreaterDepth",(function(){return it})),n.d(e,"GreaterEqualCompare",(function(){return On})),n.d(e,"GreaterEqualDepth",(function(){return nt})),n.d(e,"GreaterEqualStencilFunc",(function(){return Cn})),n.d(e,"GreaterStencilFunc",(function(){return En})),n.d(e,"GridHelper",(function(){return om})),n.d(e,"Group",(function(){return dc})),n.d(e,"HalfFloatType",(function(){return jt})),n.d(e,"HemisphereLight",(function(){return Tp})),n.d(e,"HemisphereLightHelper",(function(){return am})),n.d(e,"IcosahedronGeometry",(function(){return Md})),n.d(e,"ImageBitmapLoader",(function(){return Jp})),n.d(e,"ImageLoader",(function(){return xp})),n.d(e,"ImageUtils",(function(){return Ri})),n.d(e,"IncrementStencilOp",(function(){return _n})),n.d(e,"IncrementWrapStencilOp",(function(){return xn})),n.d(e,"InstancedBufferAttribute",(function(){return ch})),n.d(e,"InstancedBufferGeometry",(function(){return Wp})),n.d(e,"InstancedInterleavedBuffer",(function(){return Df})),n.d(e,"InstancedMesh",(function(){return _h})),n.d(e,"Int16BufferAttribute",(function(){return Ps})),n.d(e,"Int32BufferAttribute",(function(){return Ls})),n.d(e,"Int8BufferAttribute",(function(){return As})),n.d(e,"IntType",(function(){return Gt})),n.d(e,"InterleavedBuffer",(function(){return wc})),n.d(e,"InterleavedBufferAttribute",(function(){return Ac})),n.d(e,"Interpolant",(function(){return Zd})),n.d(e,"InterpolateDiscrete",(function(){return Xe})),n.d(e,"InterpolateLinear",(function(){return je})),n.d(e,"InterpolateSmooth",(function(){return qe})),n.d(e,"InvertStencilOp",(function(){return Mn})),n.d(e,"KeepStencilOp",(function(){return mn})),n.d(e,"KeyframeTrack",(function(){return Qd})),n.d(e,"LOD",(function(){return jc})),n.d(e,"LatheGeometry",(function(){return Iu})),n.d(e,"Layers",(function(){return Ur})),n.d(e,"LessCompare",(function(){return In})),n.d(e,"LessDepth",(function(){return Q})),n.d(e,"LessEqualCompare",(function(){return Un})),n.d(e,"LessEqualDepth",(function(){return tt})),n.d(e,"LessEqualStencilFunc",(function(){return wn})),n.d(e,"LessStencilFunc",(function(){return bn})),n.d(e,"Light",(function(){return bp})),n.d(e,"LightProbe",(function(){return Vp})),n.d(e,"Line",(function(){return Wh})),n.d(e,"Line3",(function(){return qf})),n.d(e,"LineBasicMaterial",(function(){return Oh})),n.d(e,"LineCurve",(function(){return bu})),n.d(e,"LineCurve3",(function(){return Tu})),n.d(e,"LineDashedMaterial",(function(){return Hd})),n.d(e,"LineLoop",(function(){return Zh})),n.d(e,"LineSegments",(function(){return Yh})),n.d(e,"LinearFilter",(function(){return Dt})),n.d(e,"LinearInterpolant",(function(){return Kd})),n.d(e,"LinearMipMapLinearFilter",(function(){return Bt})),n.d(e,"LinearMipMapNearestFilter",(function(){return Ot})),n.d(e,"LinearMipmapLinearFilter",(function(){return Ft})),n.d(e,"LinearMipmapNearestFilter",(function(){return Nt})),n.d(e,"LinearSRGBColorSpace",(function(){return un})),n.d(e,"LinearToneMapping",(function(){return ht})),n.d(e,"LinearTransfer",(function(){return dn})),n.d(e,"Loader",(function(){return pp})),n.d(e,"LoaderUtils",(function(){return Gp})),n.d(e,"LoadingManager",(function(){return up})),n.d(e,"LoopOnce",(function(){return He})),n.d(e,"LoopPingPong",(function(){return We})),n.d(e,"LoopRepeat",(function(){return Ge})),n.d(e,"LuminanceAlphaFormat",(function(){return ee})),n.d(e,"LuminanceFormat",(function(){return te})),n.d(e,"MOUSE",(function(){return o})),n.d(e,"Material",(function(){return _s})),n.d(e,"MaterialLoader",(function(){return Hp})),n.d(e,"MathUtils",(function(){return ci})),n.d(e,"Matrix2",(function(){return Hf})),n.d(e,"Matrix3",(function(){return ui})),n.d(e,"Matrix4",(function(){return Mr})),n.d(e,"MaxEquation",(function(){return D})),n.d(e,"Mesh",(function(){return ea})),n.d(e,"MeshBasicMaterial",(function(){return vs})),n.d(e,"MeshDepthMaterial",(function(){return nc})),n.d(e,"MeshDistanceMaterial",(function(){return ic})),n.d(e,"MeshLambertMaterial",(function(){return kd})),n.d(e,"MeshMatcapMaterial",(function(){return Vd})),n.d(e,"MeshNormalMaterial",(function(){return zd})),n.d(e,"MeshPhongMaterial",(function(){return Fd})),n.d(e,"MeshPhysicalMaterial",(function(){return Od})),n.d(e,"MeshStandardMaterial",(function(){return Nd})),n.d(e,"MeshToonMaterial",(function(){return Bd})),n.d(e,"MinEquation",(function(){return U})),n.d(e,"MirroredRepeatWrapping",(function(){return Ct})),n.d(e,"MixOperation",(function(){return ot})),n.d(e,"MultiplyBlending",(function(){return C})),n.d(e,"MultiplyOperation",(function(){return at})),n.d(e,"NearestFilter",(function(){return Rt})),n.d(e,"NearestMipMapLinearFilter",(function(){return Ut})),n.d(e,"NearestMipMapNearestFilter",(function(){return It})),n.d(e,"NearestMipmapLinearFilter",(function(){return Lt})),n.d(e,"NearestMipmapNearestFilter",(function(){return Pt})),n.d(e,"NeutralToneMapping",(function(){return _t})),n.d(e,"NeverCompare",(function(){return Pn})),n.d(e,"NeverDepth",(function(){return K})),n.d(e,"NeverStencilFunc",(function(){return Sn})),n.d(e,"NoBlending",(function(){return T})),n.d(e,"NoColorSpace",(function(){return cn})),n.d(e,"NoToneMapping",(function(){return ct})),n.d(e,"NormalAnimationBlendMode",(function(){return Ke})),n.d(e,"NormalBlending",(function(){return w})),n.d(e,"NotEqualCompare",(function(){return Nn})),n.d(e,"NotEqualDepth",(function(){return st})),n.d(e,"NotEqualStencilFunc",(function(){return An})),n.d(e,"NumberKeyframeTrack",(function(){return np})),n.d(e,"Object3D",(function(){return Zr})),n.d(e,"ObjectLoader",(function(){return jp})),n.d(e,"ObjectSpaceNormalMap",(function(){return ln})),n.d(e,"OctahedronGeometry",(function(){return Sd})),n.d(e,"OneFactor",(function(){return O})),n.d(e,"OneMinusConstantAlphaFactor",(function(){return J})),n.d(e,"OneMinusConstantColorFactor",(function(){return Y})),n.d(e,"OneMinusDstAlphaFactor",(function(){return H})),n.d(e,"OneMinusDstColorFactor",(function(){return W})),n.d(e,"OneMinusSrcAlphaFactor",(function(){return k})),n.d(e,"OneMinusSrcColorFactor",(function(){return B})),n.d(e,"OrthographicCamera",(function(){return ka})),n.d(e,"PCFShadowMap",(function(){return _})),n.d(e,"PCFSoftShadowMap",(function(){return v})),n.d(e,"PMREMGenerator",(function(){return $a})),n.d(e,"Path",(function(){return Pu})),n.d(e,"PerspectiveCamera",(function(){return pa})),n.d(e,"Plane",(function(){return Ma})),n.d(e,"PlaneGeometry",(function(){return Aa})),n.d(e,"PlaneHelper",(function(){return ym})),n.d(e,"PointLight",(function(){return Np})),n.d(e,"PointLightHelper",(function(){return nm})),n.d(e,"Points",(function(){return eu})),n.d(e,"PointsMaterial",(function(){return Jh})),n.d(e,"PolarGridHelper",(function(){return lm})),n.d(e,"PolyhedronGeometry",(function(){return Ou})),n.d(e,"PositionalAudio",(function(){return _f})),n.d(e,"PropertyBinding",(function(){return Ef})),n.d(e,"PropertyMixer",(function(){return xf})),n.d(e,"QuadraticBezierCurve",(function(){return wu})),n.d(e,"QuadraticBezierCurve3",(function(){return Eu})),n.d(e,"Quaternion",(function(){return Hi})),n.d(e,"QuaternionKeyframeTrack",(function(){return sp})),n.d(e,"QuaternionLinearInterpolant",(function(){return ip})),n.d(e,"RED_GREEN_RGTC2_Format",(function(){return ke})),n.d(e,"RED_RGTC1_Format",(function(){return Be})),n.d(e,"REVISION",(function(){return r})),n.d(e,"RGBADepthPacking",(function(){return rn})),n.d(e,"RGBAFormat",(function(){return Qt})),n.d(e,"RGBAIntegerFormat",(function(){return ce})),n.d(e,"RGBA_ASTC_10x10_Format",(function(){return Le})),n.d(e,"RGBA_ASTC_10x5_Format",(function(){return Re})),n.d(e,"RGBA_ASTC_10x6_Format",(function(){return Pe})),n.d(e,"RGBA_ASTC_10x8_Format",(function(){return Ie})),n.d(e,"RGBA_ASTC_12x10_Format",(function(){return Ue})),n.d(e,"RGBA_ASTC_12x12_Format",(function(){return De})),n.d(e,"RGBA_ASTC_4x4_Format",(function(){return Me})),n.d(e,"RGBA_ASTC_5x4_Format",(function(){return Se})),n.d(e,"RGBA_ASTC_5x5_Format",(function(){return be})),n.d(e,"RGBA_ASTC_6x5_Format",(function(){return Te})),n.d(e,"RGBA_ASTC_6x6_Format",(function(){return we})),n.d(e,"RGBA_ASTC_8x5_Format",(function(){return Ee})),n.d(e,"RGBA_ASTC_8x6_Format",(function(){return Ae})),n.d(e,"RGBA_ASTC_8x8_Format",(function(){return Ce})),n.d(e,"RGBA_BPTC_Format",(function(){return Ne})),n.d(e,"RGBA_ETC2_EAC_Format",(function(){return ye})),n.d(e,"RGBA_PVRTC_2BPPV1_Format",(function(){return _e})),n.d(e,"RGBA_PVRTC_4BPPV1_Format",(function(){return ge})),n.d(e,"RGBA_S3TC_DXT1_Format",(function(){return ue})),n.d(e,"RGBA_S3TC_DXT3_Format",(function(){return de})),n.d(e,"RGBA_S3TC_DXT5_Format",(function(){return pe})),n.d(e,"RGBDepthPacking",(function(){return sn})),n.d(e,"RGBFormat",(function(){return $t})),n.d(e,"RGBIntegerFormat",(function(){return le})),n.d(e,"RGB_BPTC_SIGNED_Format",(function(){return Oe})),n.d(e,"RGB_BPTC_UNSIGNED_Format",(function(){return Fe})),n.d(e,"RGB_ETC1_Format",(function(){return ve})),n.d(e,"RGB_ETC2_Format",(function(){return xe})),n.d(e,"RGB_PVRTC_2BPPV1_Format",(function(){return me})),n.d(e,"RGB_PVRTC_4BPPV1_Format",(function(){return fe})),n.d(e,"RGB_S3TC_DXT1_Format",(function(){return he})),n.d(e,"RGDepthPacking",(function(){return an})),n.d(e,"RGFormat",(function(){return ae})),n.d(e,"RGIntegerFormat",(function(){return oe})),n.d(e,"RawShaderMaterial",(function(){return Dd})),n.d(e,"Ray",(function(){return yr})),n.d(e,"Raycaster",(function(){return Ff})),n.d(e,"RectAreaLight",(function(){return zp})),n.d(e,"RedFormat",(function(){return re})),n.d(e,"RedIntegerFormat",(function(){return se})),n.d(e,"ReinhardToneMapping",(function(){return ut})),n.d(e,"RenderTarget",(function(){return Oi})),n.d(e,"RepeatWrapping",(function(){return Et})),n.d(e,"ReplaceStencilOp",(function(){return gn})),n.d(e,"ReverseSubtractEquation",(function(){return L})),n.d(e,"RingGeometry",(function(){return bd})),n.d(e,"SIGNED_RED_GREEN_RGTC2_Format",(function(){return Ve})),n.d(e,"SIGNED_RED_RGTC1_Format",(function(){return ze})),n.d(e,"SRGBColorSpace",(function(){return hn})),n.d(e,"SRGBTransfer",(function(){return pn})),n.d(e,"Scene",(function(){return Tc})),n.d(e,"ShaderChunk",(function(){return Ca})),n.d(e,"ShaderLib",(function(){return Pa})),n.d(e,"ShaderMaterial",(function(){return la})),n.d(e,"ShadowMaterial",(function(){return Ud})),n.d(e,"Shape",(function(){return Gu})),n.d(e,"ShapeGeometry",(function(){return Td})),n.d(e,"ShapePath",(function(){return Em})),n.d(e,"ShapeUtils",(function(){return gd})),n.d(e,"ShortType",(function(){return Vt})),n.d(e,"Skeleton",(function(){return lh})),n.d(e,"SkeletonHelper",(function(){return Qf})),n.d(e,"SkinnedMesh",(function(){return ih})),n.d(e,"Source",(function(){return Ii})),n.d(e,"Sphere",(function(){return dr})),n.d(e,"SphereGeometry",(function(){return wd})),n.d(e,"Spherical",(function(){return kf})),n.d(e,"SphericalHarmonics3",(function(){return kp})),n.d(e,"SplineCurve",(function(){return Au})),n.d(e,"SpotLight",(function(){return Pp})),n.d(e,"SpotLightHelper",(function(){return Zf})),n.d(e,"Sprite",(function(){return Hc})),n.d(e,"SpriteMaterial",(function(){return Cc})),n.d(e,"SrcAlphaFactor",(function(){return z})),n.d(e,"SrcAlphaSaturateFactor",(function(){return X})),n.d(e,"SrcColorFactor",(function(){return F})),n.d(e,"StaticCopyUsage",(function(){return Wn})),n.d(e,"StaticDrawUsage",(function(){return Bn})),n.d(e,"StaticReadUsage",(function(){return Vn})),n.d(e,"StereoCamera",(function(){return rf})),n.d(e,"StreamCopyUsage",(function(){return jn})),n.d(e,"StreamDrawUsage",(function(){return kn})),n.d(e,"StreamReadUsage",(function(){return Gn})),n.d(e,"StringKeyframeTrack",(function(){return ap})),n.d(e,"SubtractEquation",(function(){return I})),n.d(e,"SubtractiveBlending",(function(){return A})),n.d(e,"TOUCH",(function(){return l})),n.d(e,"TangentSpaceNormalMap",(function(){return on})),n.d(e,"TetrahedronGeometry",(function(){return Ed})),n.d(e,"Texture",(function(){return Di})),n.d(e,"TextureLoader",(function(){return Sp})),n.d(e,"TextureUtils",(function(){return lc})),n.d(e,"TorusGeometry",(function(){return Ad})),n.d(e,"TorusKnotGeometry",(function(){return Cd})),n.d(e,"Triangle",(function(){return cs})),n.d(e,"TriangleFanDrawMode",(function(){return en})),n.d(e,"TriangleStripDrawMode",(function(){return tn})),n.d(e,"TrianglesDrawMode",(function(){return Qe})),n.d(e,"TubeGeometry",(function(){return Rd})),n.d(e,"UVMapping",(function(){return yt})),n.d(e,"Uint16BufferAttribute",(function(){return Is})),n.d(e,"Uint32BufferAttribute",(function(){return Us})),n.d(e,"Uint8BufferAttribute",(function(){return Cs})),n.d(e,"Uint8ClampedBufferAttribute",(function(){return Rs})),n.d(e,"Uniform",(function(){return If})),n.d(e,"UniformsGroup",(function(){return Uf})),n.d(e,"UniformsLib",(function(){return Ra})),n.d(e,"UniformsUtils",(function(){return oa})),n.d(e,"UnsignedByteType",(function(){return zt})),n.d(e,"UnsignedInt248Type",(function(){return Zt})),n.d(e,"UnsignedInt5999Type",(function(){return Jt})),n.d(e,"UnsignedIntType",(function(){return Wt})),n.d(e,"UnsignedShort4444Type",(function(){return qt})),n.d(e,"UnsignedShort5551Type",(function(){return Yt})),n.d(e,"UnsignedShortType",(function(){return Ht})),n.d(e,"VSMShadowMap",(function(){return x})),n.d(e,"Vector2",(function(){return hi})),n.d(e,"Vector3",(function(){return Gi})),n.d(e,"Vector4",(function(){return Ni})),n.d(e,"VectorKeyframeTrack",(function(){return op})),n.d(e,"VideoTexture",(function(){return iu})),n.d(e,"WebGL3DRenderTarget",(function(){return Vi})),n.d(e,"WebGLArrayRenderTarget",(function(){return zi})),n.d(e,"WebGLCoordinateSystem",(function(){return Zn})),n.d(e,"WebGLCubeRenderTarget",(function(){return _a})),n.d(e,"WebGLMultipleRenderTargets",(function(){return Cm})),n.d(e,"WebGLRenderTarget",(function(){return Fi})),n.d(e,"WebGLRenderer",(function(){return Mc})),n.d(e,"WebGLUtils",(function(){return hc})),n.d(e,"WebGPUCoordinateSystem",(function(){return Jn})),n.d(e,"WireframeGeometry",(function(){return Pd})),n.d(e,"WrapAroundEnding",(function(){return Je})),n.d(e,"ZeroCurvatureEnding",(function(){return Ye})),n.d(e,"ZeroFactor",(function(){return N})),n.d(e,"ZeroSlopeEnding",(function(){return Ze})),n.d(e,"ZeroStencilOp",(function(){return fn})),n.d(e,"createCanvasElement",(function(){return _i}));const r="170",o={LEFT:0,MIDDLE:1,RIGHT:2,ROTATE:0,DOLLY:1,PAN:2},l={ROTATE:0,PAN:1,DOLLY_PAN:2,DOLLY_ROTATE:3},c=0,h=1,d=2,f=3,m=0,_=1,v=2,x=3,y=0,M=1,S=2,T=0,w=1,E=2,A=3,C=4,R=5,P=100,I=101,L=102,U=103,D=104,N=200,O=201,F=202,B=203,z=204,k=205,V=206,H=207,G=208,W=209,X=210,j=211,Y=212,Z=213,J=214,K=0,$=1,Q=2,tt=3,et=4,nt=5,it=6,st=7,at=0,ot=1,lt=2,ct=0,ht=1,ut=2,pt=3,ft=4,mt=5,gt=6,_t=7,vt="attached",xt="detached",yt=300,Mt=301,St=302,bt=303,Tt=304,wt=306,Et=1e3,At=1001,Ct=1002,Rt=1003,Pt=1004,It=1004,Lt=1005,Ut=1005,Dt=1006,Nt=1007,Ot=1007,Ft=1008,Bt=1008,zt=1009,kt=1010,Vt=1011,Ht=1012,Gt=1013,Wt=1014,Xt=1015,jt=1016,qt=1017,Yt=1018,Zt=1020,Jt=35902,Kt=1021,$t=1022,Qt=1023,te=1024,ee=1025,ne=1026,ie=1027,re=1028,se=1029,ae=1030,oe=1031,le=1032,ce=1033,he=33776,ue=33777,de=33778,pe=33779,fe=35840,me=35841,ge=35842,_e=35843,ve=36196,xe=37492,ye=37496,Me=37808,Se=37809,be=37810,Te=37811,we=37812,Ee=37813,Ae=37814,Ce=37815,Re=37816,Pe=37817,Ie=37818,Le=37819,Ue=37820,De=37821,Ne=36492,Oe=36494,Fe=36495,Be=36283,ze=36284,ke=36285,Ve=36286,He=2200,Ge=2201,We=2202,Xe=2300,je=2301,qe=2302,Ye=2400,Ze=2401,Je=2402,Ke=2500,$e=2501,Qe=0,tn=1,en=2,nn=3200,rn=3201,sn=3202,an=3203,on=0,ln=1,cn="",hn="srgb",un="srgb-linear",dn="linear",pn="srgb",fn=0,mn=7680,gn=7681,_n=7682,vn=7683,xn=34055,yn=34056,Mn=5386,Sn=512,bn=513,Tn=514,wn=515,En=516,An=517,Cn=518,Rn=519,Pn=512,In=513,Ln=514,Un=515,Dn=516,Nn=517,On=518,Fn=519,Bn=35044,zn=35048,kn=35040,Vn=35045,Hn=35049,Gn=35041,Wn=35046,Xn=35050,jn=35042,qn="100",Yn="300 es",Zn=2e3,Jn=2001;class Kn{addEventListener(t,e){void 0===this._listeners&&(this._listeners={});const n=this._listeners;void 0===n[t]&&(n[t]=[]),-1===n[t].indexOf(e)&&n[t].push(e)}hasEventListener(t,e){if(void 0===this._listeners)return!1;const n=this._listeners;return void 0!==n[t]&&-1!==n[t].indexOf(e)}removeEventListener(t,e){if(void 0===this._listeners)return;const n=this._listeners[t];if(void 0!==n){const t=n.indexOf(e);-1!==t&&n.splice(t,1)}}dispatchEvent(t){if(void 0===this._listeners)return;const e=this._listeners[t.type];if(void 0!==e){t.target=this;const n=e.slice(0);for(let i=0,e=n.length;i<e;i++)n[i].call(this,t);t.target=null}}}const $n=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];let Qn=1234567;const ti=Math.PI/180,ei=180/Math.PI;function ni(){const t=4294967295*Math.random()|0,e=4294967295*Math.random()|0,n=4294967295*Math.random()|0,r=4294967295*Math.random()|0;return($n[255&t]+$n[t>>8&255]+$n[t>>16&255]+$n[t>>24&255]+"-"+$n[255&e]+$n[e>>8&255]+"-"+$n[e>>16&15|64]+$n[e>>24&255]+"-"+$n[63&n|128]+$n[n>>8&255]+"-"+$n[n>>16&255]+$n[n>>24&255]+$n[255&r]+$n[r>>8&255]+$n[r>>16&255]+$n[r>>24&255]).toLowerCase()}function ii(t,e,n){return Math.max(e,Math.min(n,t))}function ri(t,e){return(t%e+e)%e}function si(t,e,n){return(1-n)*t+n*e}function ai(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return t/4294967295;case Uint16Array:return t/65535;case Uint8Array:return t/255;case Int32Array:return Math.max(t/2147483647,-1);case Int16Array:return Math.max(t/32767,-1);case Int8Array:return Math.max(t/127,-1);default:throw new Error("Invalid component type.")}}function oi(t,e){switch(e.constructor){case Float32Array:return t;case Uint32Array:return Math.round(4294967295*t);case Uint16Array:return Math.round(65535*t);case Uint8Array:return Math.round(255*t);case Int32Array:return Math.round(2147483647*t);case Int16Array:return Math.round(32767*t);case Int8Array:return Math.round(127*t);default:throw new Error("Invalid component type.")}}const ci={DEG2RAD:ti,RAD2DEG:ei,generateUUID:ni,clamp:ii,euclideanModulo:ri,mapLinear:function(t,e,n,r,o){return r+(t-e)*(o-r)/(n-e)},inverseLerp:function(t,e,n){return t!==e?(n-t)/(e-t):0},lerp:si,damp:function(t,e,n,dt){return si(t,e,1-Math.exp(-n*dt))},pingpong:function(t,e=1){return e-Math.abs(ri(t,2*e)-e)},smoothstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*(3-2*t)},smootherstep:function(t,e,n){return t<=e?0:t>=n?1:(t=(t-e)/(n-e))*t*t*(t*(6*t-15)+10)},randInt:function(t,e){return t+Math.floor(Math.random()*(e-t+1))},randFloat:function(t,e){return t+Math.random()*(e-t)},randFloatSpread:function(t){return t*(.5-Math.random())},seededRandom:function(s){void 0!==s&&(Qn=s);let t=Qn+=1831565813;return t=Math.imul(t^t>>>15,1|t),t^=t+Math.imul(t^t>>>7,61|t),((t^t>>>14)>>>0)/4294967296},degToRad:function(t){return t*ti},radToDeg:function(t){return t*ei},isPowerOfTwo:function(t){return!(t&t-1)&&0!==t},ceilPowerOfTwo:function(t){return Math.pow(2,Math.ceil(Math.log(t)/Math.LN2))},floorPowerOfTwo:function(t){return Math.pow(2,Math.floor(Math.log(t)/Math.LN2))},setQuaternionFromProperEuler:function(q,a,b,t,e){const n=Math.cos,r=Math.sin,o=n(b/2),l=r(b/2),c=n((a+t)/2),h=r((a+t)/2),d=n((a-t)/2),f=r((a-t)/2),m=n((t-a)/2),_=r((t-a)/2);switch(e){case"XYX":q.set(o*h,l*d,l*f,o*c);break;case"YZY":q.set(l*f,o*h,l*d,o*c);break;case"ZXZ":q.set(l*d,l*f,o*h,o*c);break;case"XZX":q.set(o*h,l*_,l*m,o*c);break;case"YXY":q.set(l*m,o*h,l*_,o*c);break;case"ZYZ":q.set(l*_,l*m,o*h,o*c);break;default:console.warn("THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: "+e)}},normalize:oi,denormalize:ai};class hi{constructor(t=0,e=0){hi.prototype.isVector2=!0,this.x=t,this.y=e}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,e){return this.x=t,this.y=e,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(s){return this.x+=s,this.y+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this}addScaledVector(t,s){return this.x+=t.x*s,this.y+=t.y*s,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(s){return this.x-=s,this.y-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const e=this.x,n=this.y,r=t.elements;return this.x=r[0]*e+r[3]*n+r[6],this.y=r[1]*e+r[4]*n+r[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(ii(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y;return e*e+n*n}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this}rotateAround(t,e){const n=Math.cos(e),s=Math.sin(e),r=this.x-t.x,o=this.y-t.y;return this.x=r*n-o*s+t.x,this.y=r*s+o*n+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class ui{constructor(t,e,n,r,o,l,c,h,d){ui.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],void 0!==t&&this.set(t,e,n,r,o,l,c,h,d)}set(t,e,n,r,o,l,c,h,d){const f=this.elements;return f[0]=t,f[1]=r,f[2]=c,f[3]=e,f[4]=o,f[5]=h,f[6]=n,f[7]=l,f[8]=d,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],this}extractBasis(t,e,n){return t.setFromMatrix3Column(this,0),e.setFromMatrix3Column(this,1),n.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const e=t.elements;return this.set(e[0],e[4],e[8],e[1],e[5],e[9],e[2],e[6],e[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(a,b){const t=a.elements,e=b.elements,n=this.elements,r=t[0],o=t[3],l=t[6],c=t[1],h=t[4],d=t[7],f=t[2],m=t[5],_=t[8],v=e[0],x=e[3],y=e[6],M=e[1],S=e[4],T=e[7],w=e[2],E=e[5],A=e[8];return n[0]=r*v+o*M+l*w,n[3]=r*x+o*S+l*E,n[6]=r*y+o*T+l*A,n[1]=c*v+h*M+d*w,n[4]=c*x+h*S+d*E,n[7]=c*y+h*T+d*A,n[2]=f*v+m*M+_*w,n[5]=f*x+m*S+_*E,n[8]=f*y+m*T+_*A,this}multiplyScalar(s){const t=this.elements;return t[0]*=s,t[3]*=s,t[6]*=s,t[1]*=s,t[4]*=s,t[7]*=s,t[2]*=s,t[5]*=s,t[8]*=s,this}determinant(){const t=this.elements,a=t[0],b=t[1],e=t[2],n=t[3],r=t[4],o=t[5],g=t[6],l=t[7],i=t[8];return a*r*i-a*o*l-b*n*i+b*o*g+e*n*l-e*r*g}invert(){const t=this.elements,e=t[0],n=t[1],r=t[2],o=t[3],l=t[4],c=t[5],h=t[6],d=t[7],f=t[8],m=f*l-c*d,_=c*h-f*o,v=d*o-l*h,x=e*m+n*_+r*v;if(0===x)return this.set(0,0,0,0,0,0,0,0,0);const y=1/x;return t[0]=m*y,t[1]=(r*d-f*n)*y,t[2]=(c*n-r*l)*y,t[3]=_*y,t[4]=(f*e-r*h)*y,t[5]=(r*o-c*e)*y,t[6]=v*y,t[7]=(n*h-d*e)*y,t[8]=(l*e-n*o)*y,this}transpose(){let t;const e=this.elements;return t=e[1],e[1]=e[3],e[3]=t,t=e[2],e[2]=e[6],e[6]=t,t=e[5],e[5]=e[7],e[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const e=this.elements;return t[0]=e[0],t[1]=e[3],t[2]=e[6],t[3]=e[1],t[4]=e[4],t[5]=e[7],t[6]=e[2],t[7]=e[5],t[8]=e[8],this}setUvTransform(t,e,n,r,o,l,c){const h=Math.cos(o),s=Math.sin(o);return this.set(n*h,n*s,-n*(h*l+s*c)+l+t,-r*s,r*h,-r*(-s*l+h*c)+c+e,0,0,1),this}scale(t,e){return this.premultiply(di.makeScale(t,e)),this}rotate(t){return this.premultiply(di.makeRotation(-t)),this}translate(t,e){return this.premultiply(di.makeTranslation(t,e)),this}makeTranslation(t,e){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,e,0,0,1),this}makeRotation(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,-s,0,s,e,0,0,0,1),this}makeScale(t,e){return this.set(t,0,0,0,e,0,0,0,1),this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<9;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let i=0;i<9;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t}clone(){return(new this.constructor).fromArray(this.elements)}}const di=new ui;function pi(t){for(let i=t.length-1;i>=0;--i)if(t[i]>=65535)return!0;return!1}const fi={Int8Array:Int8Array,Uint8Array:Uint8Array,Uint8ClampedArray:Uint8ClampedArray,Int16Array:Int16Array,Uint16Array:Uint16Array,Int32Array:Int32Array,Uint32Array:Uint32Array,Float32Array:Float32Array,Float64Array:Float64Array};function mi(t,e){return new fi[t](e)}function gi(t){return document.createElementNS("http://www.w3.org/1999/xhtml",t)}function _i(){const canvas=gi("canvas");return canvas.style.display="block",canvas}const vi={};function xi(t){t in vi||(vi[t]=!0,console.warn(t))}const yi={enabled:!0,workingColorSpace:un,spaces:{},convert:function(t,e,n){return!1!==this.enabled&&e!==n&&e&&n?(this.spaces[e].transfer===pn&&(t.r=Mi(t.r),t.g=Mi(t.g),t.b=Mi(t.b)),this.spaces[e].primaries!==this.spaces[n].primaries&&(t.applyMatrix3(this.spaces[e].toXYZ),t.applyMatrix3(this.spaces[n].fromXYZ)),this.spaces[n].transfer===pn&&(t.r=Si(t.r),t.g=Si(t.g),t.b=Si(t.b)),t):t},fromWorkingColorSpace:function(t,e){return this.convert(t,this.workingColorSpace,e)},toWorkingColorSpace:function(t,e){return this.convert(t,e,this.workingColorSpace)},getPrimaries:function(t){return this.spaces[t].primaries},getTransfer:function(t){return t===cn?dn:this.spaces[t].transfer},getLuminanceCoefficients:function(t,e=this.workingColorSpace){return t.fromArray(this.spaces[e].luminanceCoefficients)},define:function(t){Object.assign(this.spaces,t)},_getMatrix:function(t,e,n){return t.copy(this.spaces[e].toXYZ).multiply(this.spaces[n].fromXYZ)},_getDrawingBufferColorSpace:function(t){return this.spaces[t].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(t=this.workingColorSpace){return this.spaces[t].workingColorSpaceConfig.unpackColorSpace}};function Mi(t){return t<.04045?.0773993808*t:Math.pow(.9478672986*t+.0521327014,2.4)}function Si(t){return t<.0031308?12.92*t:1.055*Math.pow(t,.41666)-.055}const bi=[.64,.33,.3,.6,.15,.06],Ti=[.2126,.7152,.0722],wi=[.3127,.329],Ei=(new ui).set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Ai=(new ui).set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);let Ci;yi.define({[un]:{primaries:bi,whitePoint:wi,transfer:dn,toXYZ:Ei,fromXYZ:Ai,luminanceCoefficients:Ti,workingColorSpaceConfig:{unpackColorSpace:hn},outputColorSpaceConfig:{drawingBufferColorSpace:hn}},[hn]:{primaries:bi,whitePoint:wi,transfer:pn,toXYZ:Ei,fromXYZ:Ai,luminanceCoefficients:Ti,outputColorSpaceConfig:{drawingBufferColorSpace:hn}}});class Ri{static getDataURL(image){if(/^data:/i.test(image.src))return image.src;if("undefined"==typeof HTMLCanvasElement)return image.src;let canvas;if(image instanceof HTMLCanvasElement)canvas=image;else{void 0===Ci&&(Ci=gi("canvas")),Ci.width=image.width,Ci.height=image.height;const t=Ci.getContext("2d");image instanceof ImageData?t.putImageData(image,0,0):t.drawImage(image,0,0,image.width,image.height),canvas=Ci}return canvas.width>2048||canvas.height>2048?(console.warn("THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons",image),canvas.toDataURL("image/jpeg",.6)):canvas.toDataURL("image/png")}static sRGBToLinear(image){if("undefined"!=typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&image instanceof ImageBitmap){const canvas=gi("canvas");canvas.width=image.width,canvas.height=image.height;const t=canvas.getContext("2d");t.drawImage(image,0,0,image.width,image.height);const e=t.getImageData(0,0,image.width,image.height),data=e.data;for(let i=0;i<data.length;i++)data[i]=255*Mi(data[i]/255);return t.putImageData(e,0,0),canvas}if(image.data){const data=image.data.slice(0);for(let i=0;i<data.length;i++)data instanceof Uint8Array||data instanceof Uint8ClampedArray?data[i]=Math.floor(255*Mi(data[i]/255)):data[i]=Mi(data[i]);return{data:data,width:image.width,height:image.height}}return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),image}}let Pi=0;class Ii{constructor(data=null){this.isSource=!0,Object.defineProperty(this,"id",{value:Pi++}),this.uuid=ni(),this.data=data,this.dataReady=!0,this.version=0}set needsUpdate(t){!0===t&&this.version++}toJSON(meta){const t=void 0===meta||"string"==typeof meta;if(!t&&void 0!==meta.images[this.uuid])return meta.images[this.uuid];const output={uuid:this.uuid,url:""},data=this.data;if(null!==data){let t;if(Array.isArray(data)){t=[];for(let i=0,e=data.length;i<e;i++)data[i].isDataTexture?t.push(Li(data[i].image)):t.push(Li(data[i]))}else t=Li(data);output.url=t}return t||(meta.images[this.uuid]=output),output}}function Li(image){return"undefined"!=typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&image instanceof ImageBitmap?Ri.getDataURL(image):image.data?{data:Array.from(image.data),width:image.width,height:image.height,type:image.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let Ui=0;class Di extends Kn{constructor(image=Di.DEFAULT_IMAGE,t=Di.DEFAULT_MAPPING,e=At,n=At,r=Dt,o=Ft,l=Qt,c=zt,h=Di.DEFAULT_ANISOTROPY,d=cn){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:Ui++}),this.uuid=ni(),this.name="",this.source=new Ii(image),this.mipmaps=[],this.mapping=t,this.channel=0,this.wrapS=e,this.wrapT=n,this.magFilter=r,this.minFilter=o,this.anisotropy=h,this.format=l,this.internalFormat=null,this.type=c,this.offset=new hi(0,0),this.repeat=new hi(1,1),this.center=new hi(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new ui,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=d,this.userData={},this.version=0,this.onUpdate=null,this.isRenderTargetTexture=!1,this.pmremVersion=0}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}clone(){return(new this.constructor).copy(this)}copy(source){return this.name=source.name,this.source=source.source,this.mipmaps=source.mipmaps.slice(0),this.mapping=source.mapping,this.channel=source.channel,this.wrapS=source.wrapS,this.wrapT=source.wrapT,this.magFilter=source.magFilter,this.minFilter=source.minFilter,this.anisotropy=source.anisotropy,this.format=source.format,this.internalFormat=source.internalFormat,this.type=source.type,this.offset.copy(source.offset),this.repeat.copy(source.repeat),this.center.copy(source.center),this.rotation=source.rotation,this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrix.copy(source.matrix),this.generateMipmaps=source.generateMipmaps,this.premultiplyAlpha=source.premultiplyAlpha,this.flipY=source.flipY,this.unpackAlignment=source.unpackAlignment,this.colorSpace=source.colorSpace,this.userData=JSON.parse(JSON.stringify(source.userData)),this.needsUpdate=!0,this}toJSON(meta){const t=void 0===meta||"string"==typeof meta;if(!t&&void 0!==meta.textures[this.uuid])return meta.textures[this.uuid];const output={metadata:{version:4.6,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(meta).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(output.userData=this.userData),t||(meta.textures[this.uuid]=output),output}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==yt)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case Et:t.x=t.x-Math.floor(t.x);break;case At:t.x=t.x<0?0:1;break;case Ct:1===Math.abs(Math.floor(t.x)%2)?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x)}if(t.y<0||t.y>1)switch(this.wrapT){case Et:t.y=t.y-Math.floor(t.y);break;case At:t.y=t.y<0?0:1;break;case Ct:1===Math.abs(Math.floor(t.y)%2)?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y)}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){!0===t&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){!0===t&&this.pmremVersion++}}Di.DEFAULT_IMAGE=null,Di.DEFAULT_MAPPING=yt,Di.DEFAULT_ANISOTROPY=1;class Ni{constructor(t=0,e=0,n=0,r=1){Ni.prototype.isVector4=!0,this.x=t,this.y=e,this.z=n,this.w=r}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,e,n,r){return this.x=t,this.y=e,this.z=n,this.w=r,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;case 3:this.w=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=void 0!==t.w?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(s){return this.x+=s,this.y+=s,this.z+=s,this.w+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this.w=a.w+b.w,this}addScaledVector(t,s){return this.x+=t.x*s,this.y+=t.y*s,this.z+=t.z*s,this.w+=t.w*s,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(s){return this.x-=s,this.y-=s,this.z-=s,this.w-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this.w=a.w-b.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const e=this.x,n=this.y,r=this.z,o=this.w,l=t.elements;return this.x=l[0]*e+l[4]*n+l[8]*r+l[12]*o,this.y=l[1]*e+l[5]*n+l[9]*r+l[13]*o,this.z=l[2]*e+l[6]*n+l[10]*r+l[14]*o,this.w=l[3]*e+l[7]*n+l[11]*r+l[15]*o,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(q){this.w=2*Math.acos(q.w);const s=Math.sqrt(1-q.w*q.w);return s<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=q.x/s,this.y=q.y/s,this.z=q.z/s),this}setAxisAngleFromRotationMatrix(t){let e,n,r,o;const l=.01,c=.1,h=t.elements,d=h[0],f=h[4],m=h[8],_=h[1],v=h[5],x=h[9],y=h[2],M=h[6],S=h[10];if(Math.abs(f-_)<l&&Math.abs(m-y)<l&&Math.abs(x-M)<l){if(Math.abs(f+_)<c&&Math.abs(m+y)<c&&Math.abs(x+M)<c&&Math.abs(d+v+S-3)<c)return this.set(1,0,0,0),this;e=Math.PI;const t=(d+1)/2,h=(v+1)/2,T=(S+1)/2,w=(f+_)/4,E=(m+y)/4,A=(x+M)/4;return t>h&&t>T?t<l?(n=0,r=.707106781,o=.707106781):(n=Math.sqrt(t),r=w/n,o=E/n):h>T?h<l?(n=.707106781,r=0,o=.707106781):(r=Math.sqrt(h),n=w/r,o=A/r):T<l?(n=.707106781,r=.707106781,o=0):(o=Math.sqrt(T),n=E/o,r=A/o),this.set(n,r,o,e),this}let s=Math.sqrt((M-x)*(M-x)+(m-y)*(m-y)+(_-f)*(_-f));return Math.abs(s)<.001&&(s=1),this.x=(M-x)/s,this.y=(m-y)/s,this.z=(_-f)/s,this.w=Math.acos((d+v+S-1)/2),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this.w=e[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this.w=Math.max(t.w,Math.min(e.w,this.w)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this.w=Math.max(t,Math.min(e,this.w)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this.w+=(t.w-this.w)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this.w=t.w+(e.w-t.w)*n,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this.w=t[e+3],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t[e+3]=this.w,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this.w=t.getW(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class Oi extends Kn{constructor(t=1,e=1,n={}){super(),this.isRenderTarget=!0,this.width=t,this.height=e,this.depth=1,this.scissor=new Ni(0,0,t,e),this.scissorTest=!1,this.viewport=new Ni(0,0,t,e);const image={width:t,height:e,depth:1};n=Object.assign({generateMipmaps:!1,internalFormat:null,minFilter:Dt,depthBuffer:!0,stencilBuffer:!1,resolveDepthBuffer:!0,resolveStencilBuffer:!0,depthTexture:null,samples:0,count:1},n);const r=new Di(image,n.mapping,n.wrapS,n.wrapT,n.magFilter,n.minFilter,n.format,n.type,n.anisotropy,n.colorSpace);r.flipY=!1,r.generateMipmaps=n.generateMipmaps,r.internalFormat=n.internalFormat,this.textures=[];const o=n.count;for(let i=0;i<o;i++)this.textures[i]=r.clone(),this.textures[i].isRenderTargetTexture=!0;this.depthBuffer=n.depthBuffer,this.stencilBuffer=n.stencilBuffer,this.resolveDepthBuffer=n.resolveDepthBuffer,this.resolveStencilBuffer=n.resolveStencilBuffer,this.depthTexture=n.depthTexture,this.samples=n.samples}get texture(){return this.textures[0]}set texture(t){this.textures[0]=t}setSize(t,e,n=1){if(this.width!==t||this.height!==e||this.depth!==n){this.width=t,this.height=e,this.depth=n;for(let i=0,r=this.textures.length;i<r;i++)this.textures[i].image.width=t,this.textures[i].image.height=e,this.textures[i].image.depth=n;this.dispose()}this.viewport.set(0,0,t,e),this.scissor.set(0,0,t,e)}clone(){return(new this.constructor).copy(this)}copy(source){this.width=source.width,this.height=source.height,this.depth=source.depth,this.scissor.copy(source.scissor),this.scissorTest=source.scissorTest,this.viewport.copy(source.viewport),this.textures.length=0;for(let i=0,t=source.textures.length;i<t;i++)this.textures[i]=source.textures[i].clone(),this.textures[i].isRenderTargetTexture=!0;const image=Object.assign({},source.texture.image);return this.texture.source=new Ii(image),this.depthBuffer=source.depthBuffer,this.stencilBuffer=source.stencilBuffer,this.resolveDepthBuffer=source.resolveDepthBuffer,this.resolveStencilBuffer=source.resolveStencilBuffer,null!==source.depthTexture&&(this.depthTexture=source.depthTexture.clone()),this.samples=source.samples,this}dispose(){this.dispatchEvent({type:"dispose"})}}class Fi extends Oi{constructor(t=1,e=1,n={}){super(t,e,n),this.isWebGLRenderTarget=!0}}class Bi extends Di{constructor(data=null,t=1,e=1,n=1){super(null),this.isDataArrayTexture=!0,this.image={data:data,width:t,height:e,depth:n},this.magFilter=Rt,this.minFilter=Rt,this.wrapR=At,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class zi extends Fi{constructor(t=1,e=1,n=1,r={}){super(t,e,r),this.isWebGLArrayRenderTarget=!0,this.depth=n,this.texture=new Bi(null,t,e,n),this.texture.isRenderTargetTexture=!0}}class ki extends Di{constructor(data=null,t=1,e=1,n=1){super(null),this.isData3DTexture=!0,this.image={data:data,width:t,height:e,depth:n},this.magFilter=Rt,this.minFilter=Rt,this.wrapR=At,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class Vi extends Fi{constructor(t=1,e=1,n=1,r={}){super(t,e,r),this.isWebGL3DRenderTarget=!0,this.depth=n,this.texture=new ki(null,t,e,n),this.texture.isRenderTargetTexture=!0}}class Hi{constructor(t=0,e=0,n=0,r=1){this.isQuaternion=!0,this._x=t,this._y=e,this._z=n,this._w=r}static slerpFlat(t,e,n,r,o,l,c){let h=n[r+0],d=n[r+1],f=n[r+2],m=n[r+3];const _=o[l+0],v=o[l+1],x=o[l+2],y=o[l+3];if(0===c)return t[e+0]=h,t[e+1]=d,t[e+2]=f,void(t[e+3]=m);if(1===c)return t[e+0]=_,t[e+1]=v,t[e+2]=x,void(t[e+3]=y);if(m!==y||h!==_||d!==v||f!==x){let s=1-c;const t=h*_+d*v+f*x+m*y,e=t>=0?1:-1,n=1-t*t;if(n>Number.EPSILON){const r=Math.sqrt(n),o=Math.atan2(r,t*e);s=Math.sin(s*o)/r,c=Math.sin(c*o)/r}const r=c*e;if(h=h*s+_*r,d=d*s+v*r,f=f*s+x*r,m=m*s+y*r,s===1-c){const t=1/Math.sqrt(h*h+d*d+f*f+m*m);h*=t,d*=t,f*=t,m*=t}}t[e]=h,t[e+1]=d,t[e+2]=f,t[e+3]=m}static multiplyQuaternionsFlat(t,e,n,r,o,l){const c=n[r],h=n[r+1],d=n[r+2],f=n[r+3],m=o[l],_=o[l+1],v=o[l+2],x=o[l+3];return t[e]=c*x+f*m+h*v-d*_,t[e+1]=h*x+f*_+d*m-c*v,t[e+2]=d*x+f*v+c*_-h*m,t[e+3]=f*x-c*m-h*_-d*v,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,e,n,r){return this._x=t,this._y=e,this._z=n,this._w=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,e=!0){const n=t._x,r=t._y,o=t._z,l=t._order,c=Math.cos,h=Math.sin,d=c(n/2),f=c(r/2),m=c(o/2),_=h(n/2),v=h(r/2),x=h(o/2);switch(l){case"XYZ":this._x=_*f*m+d*v*x,this._y=d*v*m-_*f*x,this._z=d*f*x+_*v*m,this._w=d*f*m-_*v*x;break;case"YXZ":this._x=_*f*m+d*v*x,this._y=d*v*m-_*f*x,this._z=d*f*x-_*v*m,this._w=d*f*m+_*v*x;break;case"ZXY":this._x=_*f*m-d*v*x,this._y=d*v*m+_*f*x,this._z=d*f*x+_*v*m,this._w=d*f*m-_*v*x;break;case"ZYX":this._x=_*f*m-d*v*x,this._y=d*v*m+_*f*x,this._z=d*f*x-_*v*m,this._w=d*f*m+_*v*x;break;case"YZX":this._x=_*f*m+d*v*x,this._y=d*v*m+_*f*x,this._z=d*f*x-_*v*m,this._w=d*f*m-_*v*x;break;case"XZY":this._x=_*f*m-d*v*x,this._y=d*v*m-_*f*x,this._z=d*f*x+_*v*m,this._w=d*f*m+_*v*x;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+l)}return!0===e&&this._onChangeCallback(),this}setFromAxisAngle(t,e){const n=e/2,s=Math.sin(n);return this._x=t.x*s,this._y=t.y*s,this._z=t.z*s,this._w=Math.cos(n),this._onChangeCallback(),this}setFromRotationMatrix(t){const e=t.elements,n=e[0],r=e[4],o=e[8],l=e[1],c=e[5],h=e[9],d=e[2],f=e[6],m=e[10],_=n+c+m;if(_>0){const s=.5/Math.sqrt(_+1);this._w=.25/s,this._x=(f-h)*s,this._y=(o-d)*s,this._z=(l-r)*s}else if(n>c&&n>m){const s=2*Math.sqrt(1+n-c-m);this._w=(f-h)/s,this._x=.25*s,this._y=(r+l)/s,this._z=(o+d)/s}else if(c>m){const s=2*Math.sqrt(1+c-n-m);this._w=(o-d)/s,this._x=(r+l)/s,this._y=.25*s,this._z=(h+f)/s}else{const s=2*Math.sqrt(1+m-n-c);this._w=(l-r)/s,this._x=(o+d)/s,this._y=(h+f)/s,this._z=.25*s}return this._onChangeCallback(),this}setFromUnitVectors(t,e){let n=t.dot(e)+1;return n<Number.EPSILON?(n=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=n):(this._x=0,this._y=-t.z,this._z=t.y,this._w=n)):(this._x=t.y*e.z-t.z*e.y,this._y=t.z*e.x-t.x*e.z,this._z=t.x*e.y-t.y*e.x,this._w=n),this.normalize()}angleTo(q){return 2*Math.acos(Math.abs(ii(this.dot(q),-1,1)))}rotateTowards(q,t){const e=this.angleTo(q);if(0===e)return this;const n=Math.min(1,t/e);return this.slerp(q,n),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(q){return this.multiplyQuaternions(this,q)}premultiply(q){return this.multiplyQuaternions(q,this)}multiplyQuaternions(a,b){const t=a._x,e=a._y,n=a._z,r=a._w,o=b._x,l=b._y,c=b._z,h=b._w;return this._x=t*h+r*o+e*c-n*l,this._y=e*h+r*l+n*o-t*c,this._z=n*h+r*c+t*l-e*o,this._w=r*h-t*o-e*l-n*c,this._onChangeCallback(),this}slerp(t,e){if(0===e)return this;if(1===e)return this.copy(t);const n=this._x,r=this._y,o=this._z,l=this._w;let c=l*t._w+n*t._x+r*t._y+o*t._z;if(c<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,c=-c):this.copy(t),c>=1)return this._w=l,this._x=n,this._y=r,this._z=o,this;const h=1-c*c;if(h<=Number.EPSILON){const s=1-e;return this._w=s*l+e*this._w,this._x=s*n+e*this._x,this._y=s*r+e*this._y,this._z=s*o+e*this._z,this.normalize(),this}const d=Math.sqrt(h),f=Math.atan2(d,c),m=Math.sin((1-e)*f)/d,_=Math.sin(e*f)/d;return this._w=l*m+this._w*_,this._x=n*m+this._x*_,this._y=r*m+this._y*_,this._z=o*m+this._z*_,this._onChangeCallback(),this}slerpQuaternions(t,e,n){return this.copy(t).slerp(e,n)}random(){const t=2*Math.PI*Math.random(),e=2*Math.PI*Math.random(),n=Math.random(),r=Math.sqrt(1-n),o=Math.sqrt(n);return this.set(r*Math.sin(t),r*Math.cos(t),o*Math.sin(e),o*Math.cos(e))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,e=0){return this._x=t[e],this._y=t[e+1],this._z=t[e+2],this._w=t[e+3],this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._w,t}fromBufferAttribute(t,e){return this._x=t.getX(e),this._y=t.getY(e),this._z=t.getZ(e),this._w=t.getW(e),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class Gi{constructor(t=0,e=0,n=0){Gi.prototype.isVector3=!0,this.x=t,this.y=e,this.z=n}set(t,e,n){return void 0===n&&(n=this.z),this.x=t,this.y=e,this.z=n,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,e){switch(t){case 0:this.x=e;break;case 1:this.y=e;break;case 2:this.z=e;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(s){return this.x+=s,this.y+=s,this.z+=s,this}addVectors(a,b){return this.x=a.x+b.x,this.y=a.y+b.y,this.z=a.z+b.z,this}addScaledVector(t,s){return this.x+=t.x*s,this.y+=t.y*s,this.z+=t.z*s,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(s){return this.x-=s,this.y-=s,this.z-=s,this}subVectors(a,b){return this.x=a.x-b.x,this.y=a.y-b.y,this.z=a.z-b.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(a,b){return this.x=a.x*b.x,this.y=a.y*b.y,this.z=a.z*b.z,this}applyEuler(t){return this.applyQuaternion(Xi.setFromEuler(t))}applyAxisAngle(t,e){return this.applyQuaternion(Xi.setFromAxisAngle(t,e))}applyMatrix3(t){const e=this.x,n=this.y,r=this.z,o=t.elements;return this.x=o[0]*e+o[3]*n+o[6]*r,this.y=o[1]*e+o[4]*n+o[7]*r,this.z=o[2]*e+o[5]*n+o[8]*r,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const e=this.x,n=this.y,r=this.z,o=t.elements,l=1/(o[3]*e+o[7]*n+o[11]*r+o[15]);return this.x=(o[0]*e+o[4]*n+o[8]*r+o[12])*l,this.y=(o[1]*e+o[5]*n+o[9]*r+o[13])*l,this.z=(o[2]*e+o[6]*n+o[10]*r+o[14])*l,this}applyQuaternion(q){const t=this.x,e=this.y,n=this.z,r=q.x,o=q.y,l=q.z,c=q.w,h=2*(o*n-l*e),d=2*(l*t-r*n),f=2*(r*e-o*t);return this.x=t+c*h+o*f-l*d,this.y=e+c*d+l*h-r*f,this.z=n+c*f+r*d-o*h,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const e=this.x,n=this.y,r=this.z,o=t.elements;return this.x=o[0]*e+o[4]*n+o[8]*r,this.y=o[1]*e+o[5]*n+o[9]*r,this.z=o[2]*e+o[6]*n+o[10]*r,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,e){return this.x=Math.max(t.x,Math.min(e.x,this.x)),this.y=Math.max(t.y,Math.min(e.y,this.y)),this.z=Math.max(t.z,Math.min(e.z,this.z)),this}clampScalar(t,e){return this.x=Math.max(t,Math.min(e,this.x)),this.y=Math.max(t,Math.min(e,this.y)),this.z=Math.max(t,Math.min(e,this.z)),this}clampLength(t,e){const n=this.length();return this.divideScalar(n||1).multiplyScalar(Math.max(t,Math.min(e,n)))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,e){return this.x+=(t.x-this.x)*e,this.y+=(t.y-this.y)*e,this.z+=(t.z-this.z)*e,this}lerpVectors(t,e,n){return this.x=t.x+(e.x-t.x)*n,this.y=t.y+(e.y-t.y)*n,this.z=t.z+(e.z-t.z)*n,this}cross(t){return this.crossVectors(this,t)}crossVectors(a,b){const t=a.x,e=a.y,n=a.z,r=b.x,o=b.y,l=b.z;return this.x=e*l-n*o,this.y=n*r-t*l,this.z=t*o-e*r,this}projectOnVector(t){const e=t.lengthSq();if(0===e)return this.set(0,0,0);const n=t.dot(this)/e;return this.copy(t).multiplyScalar(n)}projectOnPlane(t){return Wi.copy(this).projectOnVector(t),this.sub(Wi)}reflect(t){return this.sub(Wi.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const e=Math.sqrt(this.lengthSq()*t.lengthSq());if(0===e)return Math.PI/2;const n=this.dot(t)/e;return Math.acos(ii(n,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const e=this.x-t.x,n=this.y-t.y,r=this.z-t.z;return e*e+n*n+r*r}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(s){return this.setFromSphericalCoords(s.radius,s.phi,s.theta)}setFromSphericalCoords(t,e,n){const r=Math.sin(e)*t;return this.x=r*Math.sin(n),this.y=Math.cos(e)*t,this.z=r*Math.cos(n),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,e,n){return this.x=t*Math.sin(e),this.y=n,this.z=t*Math.cos(e),this}setFromMatrixPosition(t){const e=t.elements;return this.x=e[12],this.y=e[13],this.z=e[14],this}setFromMatrixScale(t){const e=this.setFromMatrixColumn(t,0).length(),n=this.setFromMatrixColumn(t,1).length(),r=this.setFromMatrixColumn(t,2).length();return this.x=e,this.y=n,this.z=r,this}setFromMatrixColumn(t,e){return this.fromArray(t.elements,4*e)}setFromMatrix3Column(t,e){return this.fromArray(t.elements,3*e)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,e=0){return this.x=t[e],this.y=t[e+1],this.z=t[e+2],this}toArray(t=[],e=0){return t[e]=this.x,t[e+1]=this.y,t[e+2]=this.z,t}fromBufferAttribute(t,e){return this.x=t.getX(e),this.y=t.getY(e),this.z=t.getZ(e),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,u=2*Math.random()-1,e=Math.sqrt(1-u*u);return this.x=e*Math.cos(t),this.y=u,this.z=e*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const Wi=new Gi,Xi=new Hi;class ji{constructor(t=new Gi(1/0,1/0,1/0),e=new Gi(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromArray(t){this.makeEmpty();for(let i=0,e=t.length;i<e;i+=3)this.expandByPoint(Yi.fromArray(t,i));return this}setFromBufferAttribute(t){this.makeEmpty();for(let i=0,e=t.count;i<e;i++)this.expandByPoint(Yi.fromBufferAttribute(t,i));return this}setFromPoints(t){this.makeEmpty();for(let i=0,e=t.length;i<e;i++)this.expandByPoint(t[i]);return this}setFromCenterAndSize(t,e){const n=Yi.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}setFromObject(object,t=!1){return this.makeEmpty(),this.expandByObject(object,t)}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(object,t=!1){object.updateWorldMatrix(!1,!1);const e=object.geometry;if(void 0!==e){const n=e.getAttribute("position");if(!0===t&&void 0!==n&&!0!==object.isInstancedMesh)for(let i=0,t=n.count;i<t;i++)!0===object.isMesh?object.getVertexPosition(i,Yi):Yi.fromBufferAttribute(n,i),Yi.applyMatrix4(object.matrixWorld),this.expandByPoint(Yi);else void 0!==object.boundingBox?(null===object.boundingBox&&object.computeBoundingBox(),Zi.copy(object.boundingBox)):(null===e.boundingBox&&e.computeBoundingBox(),Zi.copy(e.boundingBox)),Zi.applyMatrix4(object.matrixWorld),this.union(Zi)}const n=object.children;for(let i=0,e=n.length;i<e;i++)this.expandByObject(n[i],t);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Yi),Yi.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let e,n;return t.normal.x>0?(e=t.normal.x*this.min.x,n=t.normal.x*this.max.x):(e=t.normal.x*this.max.x,n=t.normal.x*this.min.x),t.normal.y>0?(e+=t.normal.y*this.min.y,n+=t.normal.y*this.max.y):(e+=t.normal.y*this.max.y,n+=t.normal.y*this.min.y),t.normal.z>0?(e+=t.normal.z*this.min.z,n+=t.normal.z*this.max.z):(e+=t.normal.z*this.max.z,n+=t.normal.z*this.min.z),e<=-t.constant&&n>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(ir),rr.subVectors(this.max,ir),Ji.subVectors(t.a,ir),Ki.subVectors(t.b,ir),$i.subVectors(t.c,ir),Qi.subVectors(Ki,Ji),er.subVectors($i,Ki),nr.subVectors(Ji,$i);let e=[0,-Qi.z,Qi.y,0,-er.z,er.y,0,-nr.z,nr.y,Qi.z,0,-Qi.x,er.z,0,-er.x,nr.z,0,-nr.x,-Qi.y,Qi.x,0,-er.y,er.x,0,-nr.y,nr.x,0];return!!or(e,Ji,Ki,$i,rr)&&(e=[1,0,0,0,1,0,0,0,1],!!or(e,Ji,Ki,$i,rr)&&(sr.crossVectors(Qi,er),e=[sr.x,sr.y,sr.z],or(e,Ji,Ki,$i,rr)))}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Yi).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=.5*this.getSize(Yi).length()),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()||(qi[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),qi[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),qi[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),qi[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),qi[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),qi[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),qi[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),qi[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(qi)),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const qi=[new Gi,new Gi,new Gi,new Gi,new Gi,new Gi,new Gi,new Gi],Yi=new Gi,Zi=new ji,Ji=new Gi,Ki=new Gi,$i=new Gi,Qi=new Gi,er=new Gi,nr=new Gi,ir=new Gi,rr=new Gi,sr=new Gi,ar=new Gi;function or(t,e,n,r,o){for(let i=0,l=t.length-3;i<=l;i+=3){ar.fromArray(t,i);const l=o.x*Math.abs(ar.x)+o.y*Math.abs(ar.y)+o.z*Math.abs(ar.z),c=e.dot(ar),h=n.dot(ar),d=r.dot(ar);if(Math.max(-Math.max(c,h,d),Math.min(c,h,d))>l)return!1}return!0}const lr=new ji,cr=new Gi,ur=new Gi;class dr{constructor(t=new Gi,e=-1){this.isSphere=!0,this.center=t,this.radius=e}set(t,e){return this.center.copy(t),this.radius=e,this}setFromPoints(t,e){const n=this.center;void 0!==e?n.copy(e):lr.setFromPoints(t).getCenter(n);let r=0;for(let i=0,e=t.length;i<e;i++)r=Math.max(r,n.distanceToSquared(t[i]));return this.radius=Math.sqrt(r),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const e=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=e*e}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,e){const n=this.center.distanceToSquared(t);return e.copy(t),n>this.radius*this.radius&&(e.sub(this.center).normalize(),e.multiplyScalar(this.radius).add(this.center)),e}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;cr.subVectors(t,this.center);const e=cr.lengthSq();if(e>this.radius*this.radius){const t=Math.sqrt(e),n=.5*(t-this.radius);this.center.addScaledVector(cr,n/t),this.radius+=n}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(!0===this.center.equals(t.center)?this.radius=Math.max(this.radius,t.radius):(ur.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(cr.copy(t.center).add(ur)),this.expandByPoint(cr.copy(t.center).sub(ur))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return(new this.constructor).copy(this)}}const pr=new Gi,fr=new Gi,mr=new Gi,gr=new Gi,_r=new Gi,vr=new Gi,xr=new Gi;class yr{constructor(t=new Gi,e=new Gi(0,0,-1)){this.origin=t,this.direction=e}set(t,e){return this.origin.copy(t),this.direction.copy(e),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,e){return e.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,pr)),this}closestPointToPoint(t,e){e.subVectors(t,this.origin);const n=e.dot(this.direction);return n<0?e.copy(this.origin):e.copy(this.origin).addScaledVector(this.direction,n)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const e=pr.subVectors(t,this.origin).dot(this.direction);return e<0?this.origin.distanceToSquared(t):(pr.copy(this.origin).addScaledVector(this.direction,e),pr.distanceToSquared(t))}distanceSqToSegment(t,e,n,r){fr.copy(t).add(e).multiplyScalar(.5),mr.copy(e).sub(t).normalize(),gr.copy(this.origin).sub(fr);const o=.5*t.distanceTo(e),l=-this.direction.dot(mr),c=gr.dot(this.direction),h=-gr.dot(mr),d=gr.lengthSq(),f=Math.abs(1-l*l);let m,_,v,x;if(f>0)if(m=l*h-c,_=l*c-h,x=o*f,m>=0)if(_>=-x)if(_<=x){const t=1/f;m*=t,_*=t,v=m*(m+l*_+2*c)+_*(l*m+_+2*h)+d}else _=o,m=Math.max(0,-(l*_+c)),v=-m*m+_*(_+2*h)+d;else _=-o,m=Math.max(0,-(l*_+c)),v=-m*m+_*(_+2*h)+d;else _<=-x?(m=Math.max(0,-(-l*o+c)),_=m>0?-o:Math.min(Math.max(-o,-h),o),v=-m*m+_*(_+2*h)+d):_<=x?(m=0,_=Math.min(Math.max(-o,-h),o),v=_*(_+2*h)+d):(m=Math.max(0,-(l*o+c)),_=m>0?o:Math.min(Math.max(-o,-h),o),v=-m*m+_*(_+2*h)+d);else _=l>0?-o:o,m=Math.max(0,-(l*_+c)),v=-m*m+_*(_+2*h)+d;return n&&n.copy(this.origin).addScaledVector(this.direction,m),r&&r.copy(fr).addScaledVector(mr,_),v}intersectSphere(t,e){pr.subVectors(t.center,this.origin);const n=pr.dot(this.direction),r=pr.dot(pr)-n*n,o=t.radius*t.radius;if(r>o)return null;const l=Math.sqrt(o-r),c=n-l,h=n+l;return h<0?null:c<0?this.at(h,e):this.at(c,e)}intersectsSphere(t){return this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const e=t.normal.dot(this.direction);if(0===e)return 0===t.distanceToPoint(this.origin)?0:null;const n=-(this.origin.dot(t.normal)+t.constant)/e;return n>=0?n:null}intersectPlane(t,e){const n=this.distanceToPlane(t);return null===n?null:this.at(n,e)}intersectsPlane(t){const e=t.distanceToPoint(this.origin);if(0===e)return!0;return t.normal.dot(this.direction)*e<0}intersectBox(t,e){let n,r,o,l,c,h;const d=1/this.direction.x,f=1/this.direction.y,m=1/this.direction.z,_=this.origin;return d>=0?(n=(t.min.x-_.x)*d,r=(t.max.x-_.x)*d):(n=(t.max.x-_.x)*d,r=(t.min.x-_.x)*d),f>=0?(o=(t.min.y-_.y)*f,l=(t.max.y-_.y)*f):(o=(t.max.y-_.y)*f,l=(t.min.y-_.y)*f),n>l||o>r?null:((o>n||isNaN(n))&&(n=o),(l<r||isNaN(r))&&(r=l),m>=0?(c=(t.min.z-_.z)*m,h=(t.max.z-_.z)*m):(c=(t.max.z-_.z)*m,h=(t.min.z-_.z)*m),n>h||c>r?null:((c>n||n!=n)&&(n=c),(h<r||r!=r)&&(r=h),r<0?null:this.at(n>=0?n:r,e)))}intersectsBox(t){return null!==this.intersectBox(t,pr)}intersectTriangle(a,b,t,e,n){_r.subVectors(b,a),vr.subVectors(t,a),xr.crossVectors(_r,vr);let r,o=this.direction.dot(xr);if(o>0){if(e)return null;r=1}else{if(!(o<0))return null;r=-1,o=-o}gr.subVectors(this.origin,a);const l=r*this.direction.dot(vr.crossVectors(gr,vr));if(l<0)return null;const c=r*this.direction.dot(_r.cross(gr));if(c<0)return null;if(l+c>o)return null;const h=-r*gr.dot(xr);return h<0?null:this.at(h/o,n)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return(new this.constructor).copy(this)}}class Mr{constructor(t,e,n,r,o,l,c,h,d,f,m,_,v,x,y,M){Mr.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],void 0!==t&&this.set(t,e,n,r,o,l,c,h,d,f,m,_,v,x,y,M)}set(t,e,n,r,o,l,c,h,d,f,m,_,v,x,y,M){const S=this.elements;return S[0]=t,S[4]=e,S[8]=n,S[12]=r,S[1]=o,S[5]=l,S[9]=c,S[13]=h,S[2]=d,S[6]=f,S[10]=m,S[14]=_,S[3]=v,S[7]=x,S[11]=y,S[15]=M,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return(new Mr).fromArray(this.elements)}copy(t){const e=this.elements,n=t.elements;return e[0]=n[0],e[1]=n[1],e[2]=n[2],e[3]=n[3],e[4]=n[4],e[5]=n[5],e[6]=n[6],e[7]=n[7],e[8]=n[8],e[9]=n[9],e[10]=n[10],e[11]=n[11],e[12]=n[12],e[13]=n[13],e[14]=n[14],e[15]=n[15],this}copyPosition(t){const e=this.elements,n=t.elements;return e[12]=n[12],e[13]=n[13],e[14]=n[14],this}setFromMatrix3(t){const e=t.elements;return this.set(e[0],e[3],e[6],0,e[1],e[4],e[7],0,e[2],e[5],e[8],0,0,0,0,1),this}extractBasis(t,e,n){return t.setFromMatrixColumn(this,0),e.setFromMatrixColumn(this,1),n.setFromMatrixColumn(this,2),this}makeBasis(t,e,n){return this.set(t.x,e.x,n.x,0,t.y,e.y,n.y,0,t.z,e.z,n.z,0,0,0,0,1),this}extractRotation(t){const e=this.elements,n=t.elements,r=1/Sr.setFromMatrixColumn(t,0).length(),o=1/Sr.setFromMatrixColumn(t,1).length(),l=1/Sr.setFromMatrixColumn(t,2).length();return e[0]=n[0]*r,e[1]=n[1]*r,e[2]=n[2]*r,e[3]=0,e[4]=n[4]*o,e[5]=n[5]*o,e[6]=n[6]*o,e[7]=0,e[8]=n[8]*l,e[9]=n[9]*l,e[10]=n[10]*l,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromEuler(t){const e=this.elements,n=t.x,r=t.y,o=t.z,a=Math.cos(n),b=Math.sin(n),l=Math.cos(r),c=Math.sin(r),h=Math.cos(o),d=Math.sin(o);if("XYZ"===t.order){const t=a*h,n=a*d,r=b*h,o=b*d;e[0]=l*h,e[4]=-l*d,e[8]=c,e[1]=n+r*c,e[5]=t-o*c,e[9]=-b*l,e[2]=o-t*c,e[6]=r+n*c,e[10]=a*l}else if("YXZ"===t.order){const t=l*h,n=l*d,r=c*h,o=c*d;e[0]=t+o*b,e[4]=r*b-n,e[8]=a*c,e[1]=a*d,e[5]=a*h,e[9]=-b,e[2]=n*b-r,e[6]=o+t*b,e[10]=a*l}else if("ZXY"===t.order){const t=l*h,n=l*d,r=c*h,o=c*d;e[0]=t-o*b,e[4]=-a*d,e[8]=r+n*b,e[1]=n+r*b,e[5]=a*h,e[9]=o-t*b,e[2]=-a*c,e[6]=b,e[10]=a*l}else if("ZYX"===t.order){const t=a*h,n=a*d,r=b*h,o=b*d;e[0]=l*h,e[4]=r*c-n,e[8]=t*c+o,e[1]=l*d,e[5]=o*c+t,e[9]=n*c-r,e[2]=-c,e[6]=b*l,e[10]=a*l}else if("YZX"===t.order){const t=a*l,n=a*c,r=b*l,o=b*c;e[0]=l*h,e[4]=o-t*d,e[8]=r*d+n,e[1]=d,e[5]=a*h,e[9]=-b*h,e[2]=-c*h,e[6]=n*d+r,e[10]=t-o*d}else if("XZY"===t.order){const t=a*l,n=a*c,r=b*l,o=b*c;e[0]=l*h,e[4]=-d,e[8]=c*h,e[1]=t*d+o,e[5]=a*h,e[9]=n*d-r,e[2]=r*d-n,e[6]=b*h,e[10]=o*d+t}return e[3]=0,e[7]=0,e[11]=0,e[12]=0,e[13]=0,e[14]=0,e[15]=1,this}makeRotationFromQuaternion(q){return this.compose(wr,q,Er)}lookAt(t,e,n){const r=this.elements;return Rr.subVectors(t,e),0===Rr.lengthSq()&&(Rr.z=1),Rr.normalize(),Ar.crossVectors(n,Rr),0===Ar.lengthSq()&&(1===Math.abs(n.z)?Rr.x+=1e-4:Rr.z+=1e-4,Rr.normalize(),Ar.crossVectors(n,Rr)),Ar.normalize(),Cr.crossVectors(Rr,Ar),r[0]=Ar.x,r[4]=Cr.x,r[8]=Rr.x,r[1]=Ar.y,r[5]=Cr.y,r[9]=Rr.y,r[2]=Ar.z,r[6]=Cr.z,r[10]=Rr.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(a,b){const t=a.elements,e=b.elements,n=this.elements,r=t[0],o=t[4],l=t[8],c=t[12],h=t[1],d=t[5],f=t[9],m=t[13],_=t[2],v=t[6],x=t[10],y=t[14],M=t[3],S=t[7],T=t[11],w=t[15],E=e[0],A=e[4],C=e[8],R=e[12],P=e[1],I=e[5],L=e[9],U=e[13],D=e[2],N=e[6],O=e[10],F=e[14],B=e[3],z=e[7],k=e[11],V=e[15];return n[0]=r*E+o*P+l*D+c*B,n[4]=r*A+o*I+l*N+c*z,n[8]=r*C+o*L+l*O+c*k,n[12]=r*R+o*U+l*F+c*V,n[1]=h*E+d*P+f*D+m*B,n[5]=h*A+d*I+f*N+m*z,n[9]=h*C+d*L+f*O+m*k,n[13]=h*R+d*U+f*F+m*V,n[2]=_*E+v*P+x*D+y*B,n[6]=_*A+v*I+x*N+y*z,n[10]=_*C+v*L+x*O+y*k,n[14]=_*R+v*U+x*F+y*V,n[3]=M*E+S*P+T*D+w*B,n[7]=M*A+S*I+T*N+w*z,n[11]=M*C+S*L+T*O+w*k,n[15]=M*R+S*U+T*F+w*V,this}multiplyScalar(s){const t=this.elements;return t[0]*=s,t[4]*=s,t[8]*=s,t[12]*=s,t[1]*=s,t[5]*=s,t[9]*=s,t[13]*=s,t[2]*=s,t[6]*=s,t[10]*=s,t[14]*=s,t[3]*=s,t[7]*=s,t[11]*=s,t[15]*=s,this}determinant(){const t=this.elements,e=t[0],n=t[4],r=t[8],o=t[12],l=t[1],c=t[5],h=t[9],d=t[13],f=t[2],m=t[6],_=t[10],v=t[14];return t[3]*(+o*h*m-r*d*m-o*c*_+n*d*_+r*c*v-n*h*v)+t[7]*(+e*h*v-e*d*_+o*l*_-r*l*v+r*d*f-o*h*f)+t[11]*(+e*d*m-e*c*v-o*l*m+n*l*v+o*c*f-n*d*f)+t[15]*(-r*c*f-e*h*m+e*c*_+r*l*m-n*l*_+n*h*f)}transpose(){const t=this.elements;let e;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}setPosition(t,e,n){const r=this.elements;return t.isVector3?(r[12]=t.x,r[13]=t.y,r[14]=t.z):(r[12]=t,r[13]=e,r[14]=n),this}invert(){const t=this.elements,e=t[0],n=t[1],r=t[2],o=t[3],l=t[4],c=t[5],h=t[6],d=t[7],f=t[8],m=t[9],_=t[10],v=t[11],x=t[12],y=t[13],M=t[14],S=t[15],T=m*M*d-y*_*d+y*h*v-c*M*v-m*h*S+c*_*S,w=x*_*d-f*M*d-x*h*v+l*M*v+f*h*S-l*_*S,E=f*y*d-x*m*d+x*c*v-l*y*v-f*c*S+l*m*S,A=x*m*h-f*y*h-x*c*_+l*y*_+f*c*M-l*m*M,C=e*T+n*w+r*E+o*A;if(0===C)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const R=1/C;return t[0]=T*R,t[1]=(y*_*o-m*M*o-y*r*v+n*M*v+m*r*S-n*_*S)*R,t[2]=(c*M*o-y*h*o+y*r*d-n*M*d-c*r*S+n*h*S)*R,t[3]=(m*h*o-c*_*o-m*r*d+n*_*d+c*r*v-n*h*v)*R,t[4]=w*R,t[5]=(f*M*o-x*_*o+x*r*v-e*M*v-f*r*S+e*_*S)*R,t[6]=(x*h*o-l*M*o-x*r*d+e*M*d+l*r*S-e*h*S)*R,t[7]=(l*_*o-f*h*o+f*r*d-e*_*d-l*r*v+e*h*v)*R,t[8]=E*R,t[9]=(x*m*o-f*y*o-x*n*v+e*y*v+f*n*S-e*m*S)*R,t[10]=(l*y*o-x*c*o+x*n*d-e*y*d-l*n*S+e*c*S)*R,t[11]=(f*c*o-l*m*o-f*n*d+e*m*d+l*n*v-e*c*v)*R,t[12]=A*R,t[13]=(f*y*r-x*m*r+x*n*_-e*y*_-f*n*M+e*m*M)*R,t[14]=(x*c*r-l*y*r-x*n*h+e*y*h+l*n*M-e*c*M)*R,t[15]=(l*m*r-f*c*r+f*n*h-e*m*h-l*n*_+e*c*_)*R,this}scale(t){const e=this.elements,n=t.x,r=t.y,o=t.z;return e[0]*=n,e[4]*=r,e[8]*=o,e[1]*=n,e[5]*=r,e[9]*=o,e[2]*=n,e[6]*=r,e[10]*=o,e[3]*=n,e[7]*=r,e[11]*=o,this}getMaxScaleOnAxis(){const t=this.elements,e=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],n=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],r=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(e,n,r))}makeTranslation(t,e,n){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,e,0,0,1,n,0,0,0,1),this}makeRotationX(t){const e=Math.cos(t),s=Math.sin(t);return this.set(1,0,0,0,0,e,-s,0,0,s,e,0,0,0,0,1),this}makeRotationY(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,0,s,0,0,1,0,0,-s,0,e,0,0,0,0,1),this}makeRotationZ(t){const e=Math.cos(t),s=Math.sin(t);return this.set(e,-s,0,0,s,e,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,e){const n=Math.cos(e),s=Math.sin(e),r=1-n,o=t.x,l=t.y,c=t.z,h=r*o,d=r*l;return this.set(h*o+n,h*l-s*c,h*c+s*l,0,h*l+s*c,d*l+n,d*c-s*o,0,h*c-s*l,d*c+s*o,r*c*c+n,0,0,0,0,1),this}makeScale(t,e,n){return this.set(t,0,0,0,0,e,0,0,0,0,n,0,0,0,0,1),this}makeShear(t,e,n,r,o,l){return this.set(1,n,o,0,t,1,l,0,e,r,1,0,0,0,0,1),this}compose(t,e,n){const r=this.elements,o=e._x,l=e._y,c=e._z,h=e._w,d=o+o,f=l+l,m=c+c,_=o*d,v=o*f,x=o*m,y=l*f,M=l*m,S=c*m,T=h*d,w=h*f,E=h*m,A=n.x,C=n.y,R=n.z;return r[0]=(1-(y+S))*A,r[1]=(v+E)*A,r[2]=(x-w)*A,r[3]=0,r[4]=(v-E)*C,r[5]=(1-(_+S))*C,r[6]=(M+T)*C,r[7]=0,r[8]=(x+w)*R,r[9]=(M-T)*R,r[10]=(1-(_+y))*R,r[11]=0,r[12]=t.x,r[13]=t.y,r[14]=t.z,r[15]=1,this}decompose(t,e,n){const r=this.elements;let o=Sr.set(r[0],r[1],r[2]).length();const l=Sr.set(r[4],r[5],r[6]).length(),c=Sr.set(r[8],r[9],r[10]).length();this.determinant()<0&&(o=-o),t.x=r[12],t.y=r[13],t.z=r[14],Tr.copy(this);const h=1/o,d=1/l,f=1/c;return Tr.elements[0]*=h,Tr.elements[1]*=h,Tr.elements[2]*=h,Tr.elements[4]*=d,Tr.elements[5]*=d,Tr.elements[6]*=d,Tr.elements[8]*=f,Tr.elements[9]*=f,Tr.elements[10]*=f,e.setFromRotationMatrix(Tr),n.x=o,n.y=l,n.z=c,this}makePerspective(t,e,n,r,o,l,c=Zn){const h=this.elements,d=2*o/(e-t),f=2*o/(n-r),a=(e+t)/(e-t),b=(n+r)/(n-r);let m,_;if(c===Zn)m=-(l+o)/(l-o),_=-2*l*o/(l-o);else{if(c!==Jn)throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+c);m=-l/(l-o),_=-l*o/(l-o)}return h[0]=d,h[4]=0,h[8]=a,h[12]=0,h[1]=0,h[5]=f,h[9]=b,h[13]=0,h[2]=0,h[6]=0,h[10]=m,h[14]=_,h[3]=0,h[7]=0,h[11]=-1,h[15]=0,this}makeOrthographic(t,e,n,r,o,l,c=Zn){const h=this.elements,d=1/(e-t),f=1/(n-r),p=1/(l-o),m=(e+t)*d,_=(n+r)*f;let v,x;if(c===Zn)v=(l+o)*p,x=-2*p;else{if(c!==Jn)throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+c);v=o*p,x=-1*p}return h[0]=2*d,h[4]=0,h[8]=0,h[12]=-m,h[1]=0,h[5]=2*f,h[9]=0,h[13]=-_,h[2]=0,h[6]=0,h[10]=x,h[14]=-v,h[3]=0,h[7]=0,h[11]=0,h[15]=1,this}equals(t){const e=this.elements,n=t.elements;for(let i=0;i<16;i++)if(e[i]!==n[i])return!1;return!0}fromArray(t,e=0){for(let i=0;i<16;i++)this.elements[i]=t[i+e];return this}toArray(t=[],e=0){const n=this.elements;return t[e]=n[0],t[e+1]=n[1],t[e+2]=n[2],t[e+3]=n[3],t[e+4]=n[4],t[e+5]=n[5],t[e+6]=n[6],t[e+7]=n[7],t[e+8]=n[8],t[e+9]=n[9],t[e+10]=n[10],t[e+11]=n[11],t[e+12]=n[12],t[e+13]=n[13],t[e+14]=n[14],t[e+15]=n[15],t}}const Sr=new Gi,Tr=new Mr,wr=new Gi(0,0,0),Er=new Gi(1,1,1),Ar=new Gi,Cr=new Gi,Rr=new Gi,Pr=new Mr,Ir=new Hi;class Lr{constructor(t=0,e=0,n=0,r=Lr.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=e,this._z=n,this._order=r}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,e,n,r=this._order){return this._x=t,this._y=e,this._z=n,this._order=r,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,e=this._order,n=!0){const r=t.elements,o=r[0],l=r[4],c=r[8],h=r[1],d=r[5],f=r[9],m=r[2],_=r[6],v=r[10];switch(e){case"XYZ":this._y=Math.asin(ii(c,-1,1)),Math.abs(c)<.9999999?(this._x=Math.atan2(-f,v),this._z=Math.atan2(-l,o)):(this._x=Math.atan2(_,d),this._z=0);break;case"YXZ":this._x=Math.asin(-ii(f,-1,1)),Math.abs(f)<.9999999?(this._y=Math.atan2(c,v),this._z=Math.atan2(h,d)):(this._y=Math.atan2(-m,o),this._z=0);break;case"ZXY":this._x=Math.asin(ii(_,-1,1)),Math.abs(_)<.9999999?(this._y=Math.atan2(-m,v),this._z=Math.atan2(-l,d)):(this._y=0,this._z=Math.atan2(h,o));break;case"ZYX":this._y=Math.asin(-ii(m,-1,1)),Math.abs(m)<.9999999?(this._x=Math.atan2(_,v),this._z=Math.atan2(h,o)):(this._x=0,this._z=Math.atan2(-l,d));break;case"YZX":this._z=Math.asin(ii(h,-1,1)),Math.abs(h)<.9999999?(this._x=Math.atan2(-f,d),this._y=Math.atan2(-m,o)):(this._x=0,this._y=Math.atan2(c,v));break;case"XZY":this._z=Math.asin(-ii(l,-1,1)),Math.abs(l)<.9999999?(this._x=Math.atan2(_,d),this._y=Math.atan2(c,o)):(this._x=Math.atan2(-f,v),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+e)}return this._order=e,!0===n&&this._onChangeCallback(),this}setFromQuaternion(q,t,e){return Pr.makeRotationFromQuaternion(q),this.setFromRotationMatrix(Pr,t,e)}setFromVector3(t,e=this._order){return this.set(t.x,t.y,t.z,e)}reorder(t){return Ir.setFromEuler(this),this.setFromQuaternion(Ir,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],void 0!==t[3]&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],e=0){return t[e]=this._x,t[e+1]=this._y,t[e+2]=this._z,t[e+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Lr.DEFAULT_ORDER="XYZ";class Ur{constructor(){this.mask=1}set(t){this.mask=1<<t>>>0}enable(t){this.mask|=1<<t}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t}disable(t){this.mask&=~(1<<t)}disableAll(){this.mask=0}test(t){return!!(this.mask&t.mask)}isEnabled(t){return!!(this.mask&1<<t)}}let Dr=0;const Nr=new Gi,Or=new Hi,Fr=new Mr,Br=new Gi,zr=new Gi,kr=new Gi,Vr=new Hi,Hr=new Gi(1,0,0),Gr=new Gi(0,1,0),Wr=new Gi(0,0,1),Xr={type:"added"},jr={type:"removed"},qr={type:"childadded",child:null},Yr={type:"childremoved",child:null};class Zr extends Kn{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:Dr++}),this.uuid=ni(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=Zr.DEFAULT_UP.clone();const t=new Gi,e=new Lr,n=new Hi,r=new Gi(1,1,1);e._onChange((function(){n.setFromEuler(e,!1)})),n._onChange((function(){e.setFromQuaternion(n,void 0,!1)})),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:e},quaternion:{configurable:!0,enumerable:!0,value:n},scale:{configurable:!0,enumerable:!0,value:r},modelViewMatrix:{value:new Mr},normalMatrix:{value:new ui}}),this.matrix=new Mr,this.matrixWorld=new Mr,this.matrixAutoUpdate=Zr.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=Zr.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new Ur,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(q){return this.quaternion.premultiply(q),this}setRotationFromAxisAngle(t,e){this.quaternion.setFromAxisAngle(t,e)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(q){this.quaternion.copy(q)}rotateOnAxis(t,e){return Or.setFromAxisAngle(t,e),this.quaternion.multiply(Or),this}rotateOnWorldAxis(t,e){return Or.setFromAxisAngle(t,e),this.quaternion.premultiply(Or),this}rotateX(t){return this.rotateOnAxis(Hr,t)}rotateY(t){return this.rotateOnAxis(Gr,t)}rotateZ(t){return this.rotateOnAxis(Wr,t)}translateOnAxis(t,e){return Nr.copy(t).applyQuaternion(this.quaternion),this.position.add(Nr.multiplyScalar(e)),this}translateX(t){return this.translateOnAxis(Hr,t)}translateY(t){return this.translateOnAxis(Gr,t)}translateZ(t){return this.translateOnAxis(Wr,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(Fr.copy(this.matrixWorld).invert())}lookAt(t,e,n){t.isVector3?Br.copy(t):Br.set(t,e,n);const r=this.parent;this.updateWorldMatrix(!0,!1),zr.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?Fr.lookAt(zr,Br,this.up):Fr.lookAt(Br,zr,this.up),this.quaternion.setFromRotationMatrix(Fr),r&&(Fr.extractRotation(r.matrixWorld),Or.setFromRotationMatrix(Fr),this.quaternion.premultiply(Or.invert()))}add(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.add(arguments[i]);return this}return object===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",object),this):(object&&object.isObject3D?(object.removeFromParent(),object.parent=this,this.children.push(object),object.dispatchEvent(Xr),qr.child=object,this.dispatchEvent(qr),qr.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",object),this)}remove(object){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.remove(arguments[i]);return this}const t=this.children.indexOf(object);return-1!==t&&(object.parent=null,this.children.splice(t,1),object.dispatchEvent(jr),Yr.child=object,this.dispatchEvent(Yr),Yr.child=null),this}removeFromParent(){const t=this.parent;return null!==t&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(object){return this.updateWorldMatrix(!0,!1),Fr.copy(this.matrixWorld).invert(),null!==object.parent&&(object.parent.updateWorldMatrix(!0,!1),Fr.multiply(object.parent.matrixWorld)),object.applyMatrix4(Fr),object.removeFromParent(),object.parent=this,this.children.push(object),object.updateWorldMatrix(!1,!0),object.dispatchEvent(Xr),qr.child=object,this.dispatchEvent(qr),qr.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,e){if(this[t]===e)return this;for(let i=0,n=this.children.length;i<n;i++){const object=this.children[i].getObjectByProperty(t,e);if(void 0!==object)return object}}getObjectsByProperty(t,e,n=[]){this[t]===e&&n.push(this);const r=this.children;for(let i=0,o=r.length;i<o;i++)r[i].getObjectsByProperty(t,e,n);return n}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(zr,t,kr),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(zr,Vr,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const e=this.matrixWorld.elements;return t.set(e[8],e[9],e[10]).normalize()}raycast(){}traverse(t){t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverse(t)}traverseVisible(t){if(!1===this.visible)return;t(this);const e=this.children;for(let i=0,n=e.length;i<n;i++)e[i].traverseVisible(t)}traverseAncestors(t){const e=this.parent;null!==e&&(t(e),e.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const e=this.children;for(let i=0,n=e.length;i<n;i++){e[i].updateMatrixWorld(t)}}updateWorldMatrix(t,e){const n=this.parent;if(!0===t&&null!==n&&n.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),!0===this.matrixWorldAutoUpdate&&(null===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),!0===e){const t=this.children;for(let i=0,e=t.length;i<e;i++){t[i].updateWorldMatrix(!1,!0)}}}toJSON(meta){const t=void 0===meta||"string"==typeof meta,output={};t&&(meta={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},output.metadata={version:4.6,type:"Object",generator:"Object3D.toJSON"});const object={};function e(t,element){return void 0===t[element.uuid]&&(t[element.uuid]=element.toJSON(meta)),element.uuid}if(object.uuid=this.uuid,object.type=this.type,""!==this.name&&(object.name=this.name),!0===this.castShadow&&(object.castShadow=!0),!0===this.receiveShadow&&(object.receiveShadow=!0),!1===this.visible&&(object.visible=!1),!1===this.frustumCulled&&(object.frustumCulled=!1),0!==this.renderOrder&&(object.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(object.userData=this.userData),object.layers=this.layers.mask,object.matrix=this.matrix.toArray(),object.up=this.up.toArray(),!1===this.matrixAutoUpdate&&(object.matrixAutoUpdate=!1),this.isInstancedMesh&&(object.type="InstancedMesh",object.count=this.count,object.instanceMatrix=this.instanceMatrix.toJSON(),null!==this.instanceColor&&(object.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(object.type="BatchedMesh",object.perObjectFrustumCulled=this.perObjectFrustumCulled,object.sortObjects=this.sortObjects,object.drawRanges=this._drawRanges,object.reservedRanges=this._reservedRanges,object.visibility=this._visibility,object.active=this._active,object.bounds=this._bounds.map((t=>({boxInitialized:t.boxInitialized,boxMin:t.box.min.toArray(),boxMax:t.box.max.toArray(),sphereInitialized:t.sphereInitialized,sphereRadius:t.sphere.radius,sphereCenter:t.sphere.center.toArray()}))),object.maxInstanceCount=this._maxInstanceCount,object.maxVertexCount=this._maxVertexCount,object.maxIndexCount=this._maxIndexCount,object.geometryInitialized=this._geometryInitialized,object.geometryCount=this._geometryCount,object.matricesTexture=this._matricesTexture.toJSON(meta),null!==this._colorsTexture&&(object.colorsTexture=this._colorsTexture.toJSON(meta)),null!==this.boundingSphere&&(object.boundingSphere={center:object.boundingSphere.center.toArray(),radius:object.boundingSphere.radius}),null!==this.boundingBox&&(object.boundingBox={min:object.boundingBox.min.toArray(),max:object.boundingBox.max.toArray()})),this.isScene)this.background&&(this.background.isColor?object.background=this.background.toJSON():this.background.isTexture&&(object.background=this.background.toJSON(meta).uuid)),this.environment&&this.environment.isTexture&&!0!==this.environment.isRenderTargetTexture&&(object.environment=this.environment.toJSON(meta).uuid);else if(this.isMesh||this.isLine||this.isPoints){object.geometry=e(meta.geometries,this.geometry);const t=this.geometry.parameters;if(void 0!==t&&void 0!==t.shapes){const n=t.shapes;if(Array.isArray(n))for(let i=0,t=n.length;i<t;i++){const t=n[i];e(meta.shapes,t)}else e(meta.shapes,n)}}if(this.isSkinnedMesh&&(object.bindMode=this.bindMode,object.bindMatrix=this.bindMatrix.toArray(),void 0!==this.skeleton&&(e(meta.skeletons,this.skeleton),object.skeleton=this.skeleton.uuid)),void 0!==this.material)if(Array.isArray(this.material)){const t=[];for(let i=0,n=this.material.length;i<n;i++)t.push(e(meta.materials,this.material[i]));object.material=t}else object.material=e(meta.materials,this.material);if(this.children.length>0){object.children=[];for(let i=0;i<this.children.length;i++)object.children.push(this.children[i].toJSON(meta).object)}if(this.animations.length>0){object.animations=[];for(let i=0;i<this.animations.length;i++){const t=this.animations[i];object.animations.push(e(meta.animations,t))}}if(t){const t=n(meta.geometries),e=n(meta.materials),r=n(meta.textures),o=n(meta.images),l=n(meta.shapes),c=n(meta.skeletons),h=n(meta.animations),d=n(meta.nodes);t.length>0&&(output.geometries=t),e.length>0&&(output.materials=e),r.length>0&&(output.textures=r),o.length>0&&(output.images=o),l.length>0&&(output.shapes=l),c.length>0&&(output.skeletons=c),h.length>0&&(output.animations=h),d.length>0&&(output.nodes=d)}return output.object=object,output;function n(t){const e=[];for(const n in t){const data=t[n];delete data.metadata,e.push(data)}return e}}clone(t){return(new this.constructor).copy(this,t)}copy(source,t=!0){if(this.name=source.name,this.up.copy(source.up),this.position.copy(source.position),this.rotation.order=source.rotation.order,this.quaternion.copy(source.quaternion),this.scale.copy(source.scale),this.matrix.copy(source.matrix),this.matrixWorld.copy(source.matrixWorld),this.matrixAutoUpdate=source.matrixAutoUpdate,this.matrixWorldAutoUpdate=source.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=source.matrixWorldNeedsUpdate,this.layers.mask=source.layers.mask,this.visible=source.visible,this.castShadow=source.castShadow,this.receiveShadow=source.receiveShadow,this.frustumCulled=source.frustumCulled,this.renderOrder=source.renderOrder,this.animations=source.animations.slice(),this.userData=JSON.parse(JSON.stringify(source.userData)),!0===t)for(let i=0;i<source.children.length;i++){const t=source.children[i];this.add(t.clone())}return this}}Zr.DEFAULT_UP=new Gi(0,1,0),Zr.DEFAULT_MATRIX_AUTO_UPDATE=!0,Zr.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const Jr=new Gi,Kr=new Gi,$r=new Gi,Qr=new Gi,ts=new Gi,es=new Gi,ns=new Gi,is=new Gi,rs=new Gi,ss=new Gi,as=new Ni,os=new Ni,ls=new Ni;class cs{constructor(a=new Gi,b=new Gi,t=new Gi){this.a=a,this.b=b,this.c=t}static getNormal(a,b,t,e){e.subVectors(t,b),Jr.subVectors(a,b),e.cross(Jr);const n=e.lengthSq();return n>0?e.multiplyScalar(1/Math.sqrt(n)):e.set(0,0,0)}static getBarycoord(t,a,b,e,n){Jr.subVectors(e,a),Kr.subVectors(b,a),$r.subVectors(t,a);const r=Jr.dot(Jr),o=Jr.dot(Kr),l=Jr.dot($r),c=Kr.dot(Kr),h=Kr.dot($r),d=r*c-o*o;if(0===d)return n.set(0,0,0),null;const f=1/d,u=(c*l-o*h)*f,m=(r*h-o*l)*f;return n.set(1-u-m,m,u)}static containsPoint(t,a,b,e){return null!==this.getBarycoord(t,a,b,e,Qr)&&(Qr.x>=0&&Qr.y>=0&&Qr.x+Qr.y<=1)}static getInterpolation(t,e,n,r,o,l,c,h){return null===this.getBarycoord(t,e,n,r,Qr)?(h.x=0,h.y=0,"z"in h&&(h.z=0),"w"in h&&(h.w=0),null):(h.setScalar(0),h.addScaledVector(o,Qr.x),h.addScaledVector(l,Qr.y),h.addScaledVector(c,Qr.z),h)}static getInterpolatedAttribute(t,e,n,r,o,l){return as.setScalar(0),os.setScalar(0),ls.setScalar(0),as.fromBufferAttribute(t,e),os.fromBufferAttribute(t,n),ls.fromBufferAttribute(t,r),l.setScalar(0),l.addScaledVector(as,o.x),l.addScaledVector(os,o.y),l.addScaledVector(ls,o.z),l}static isFrontFacing(a,b,t,e){return Jr.subVectors(t,b),Kr.subVectors(a,b),Jr.cross(Kr).dot(e)<0}set(a,b,t){return this.a.copy(a),this.b.copy(b),this.c.copy(t),this}setFromPointsAndIndices(t,e,n,r){return this.a.copy(t[e]),this.b.copy(t[n]),this.c.copy(t[r]),this}setFromAttributeAndIndices(t,e,n,r){return this.a.fromBufferAttribute(t,e),this.b.fromBufferAttribute(t,n),this.c.fromBufferAttribute(t,r),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return Jr.subVectors(this.c,this.b),Kr.subVectors(this.a,this.b),.5*Jr.cross(Kr).length()}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return cs.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,e){return cs.getBarycoord(t,this.a,this.b,this.c,e)}getInterpolation(t,e,n,r,o){return cs.getInterpolation(t,this.a,this.b,this.c,e,n,r,o)}containsPoint(t){return cs.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return cs.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(p,t){const a=this.a,b=this.b,e=this.c;let n,r;ts.subVectors(b,a),es.subVectors(e,a),is.subVectors(p,a);const o=ts.dot(is),l=es.dot(is);if(o<=0&&l<=0)return t.copy(a);rs.subVectors(p,b);const c=ts.dot(rs),h=es.dot(rs);if(c>=0&&h<=c)return t.copy(b);const d=o*h-c*l;if(d<=0&&o>=0&&c<=0)return n=o/(o-c),t.copy(a).addScaledVector(ts,n);ss.subVectors(p,e);const f=ts.dot(ss),m=es.dot(ss);if(m>=0&&f<=m)return t.copy(e);const _=f*l-o*m;if(_<=0&&l>=0&&m<=0)return r=l/(l-m),t.copy(a).addScaledVector(es,r);const v=c*m-f*h;if(v<=0&&h-c>=0&&f-m>=0)return ns.subVectors(e,b),r=(h-c)/(h-c+(f-m)),t.copy(b).addScaledVector(ns,r);const x=1/(v+_+d);return n=_*x,r=d*x,t.copy(a).addScaledVector(ts,n).addScaledVector(es,r)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const hs={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},us={h:0,s:0,l:0},ds={h:0,s:0,l:0};function ps(p,q,t){return t<0&&(t+=1),t>1&&(t-=1),t<1/6?p+6*(q-p)*t:t<.5?q:t<2/3?p+6*(q-p)*(2/3-t):p}class fs{constructor(t,g,b){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,g,b)}set(t,g,b){if(void 0===g&&void 0===b){const e=t;e&&e.isColor?this.copy(e):"number"==typeof e?this.setHex(e):"string"==typeof e&&this.setStyle(e)}else this.setRGB(t,g,b);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,e=hn){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(255&t)/255,yi.toWorkingColorSpace(this,e),this}setRGB(t,g,b,e=yi.workingColorSpace){return this.r=t,this.g=g,this.b=b,yi.toWorkingColorSpace(this,e),this}setHSL(t,s,e,n=yi.workingColorSpace){if(t=ri(t,1),s=ii(s,0,1),e=ii(e,0,1),0===s)this.r=this.g=this.b=e;else{const p=e<=.5?e*(1+s):e+s-e*s,q=2*e-p;this.r=ps(q,p,t+1/3),this.g=ps(q,p,t),this.b=ps(q,p,t-1/3)}return yi.toWorkingColorSpace(this,n),this}setStyle(style,t=hn){function e(t){void 0!==t&&parseFloat(t)<1&&console.warn("THREE.Color: Alpha component of "+style+" will be ignored.")}let n;if(n=/^(\w+)\(([^\)]*)\)/.exec(style)){let r;const o=n[1],l=n[2];switch(o){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))return e(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,t);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))return e(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,t);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(l))return e(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,t);break;default:console.warn("THREE.Color: Unknown color model "+style)}}else if(n=/^\#([A-Fa-f\d]+)$/.exec(style)){const e=n[1],r=e.length;if(3===r)return this.setRGB(parseInt(e.charAt(0),16)/15,parseInt(e.charAt(1),16)/15,parseInt(e.charAt(2),16)/15,t);if(6===r)return this.setHex(parseInt(e,16),t);console.warn("THREE.Color: Invalid hex color "+style)}else if(style&&style.length>0)return this.setColorName(style,t);return this}setColorName(style,t=hn){const e=hs[style.toLowerCase()];return void 0!==e?this.setHex(e,t):console.warn("THREE.Color: Unknown color "+style),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=Mi(t.r),this.g=Mi(t.g),this.b=Mi(t.b),this}copyLinearToSRGB(t){return this.r=Si(t.r),this.g=Si(t.g),this.b=Si(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=hn){return yi.fromWorkingColorSpace(ms.copy(this),t),65536*Math.round(ii(255*ms.r,0,255))+256*Math.round(ii(255*ms.g,0,255))+Math.round(ii(255*ms.b,0,255))}getHexString(t=hn){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,e=yi.workingColorSpace){yi.fromWorkingColorSpace(ms.copy(this),e);const n=ms.r,g=ms.g,b=ms.b,r=Math.max(n,g,b),o=Math.min(n,g,b);let l,c;const h=(o+r)/2;if(o===r)l=0,c=0;else{const t=r-o;switch(c=h<=.5?t/(r+o):t/(2-r-o),r){case n:l=(g-b)/t+(g<b?6:0);break;case g:l=(b-n)/t+2;break;case b:l=(n-g)/t+4}l/=6}return t.h=l,t.s=c,t.l=h,t}getRGB(t,e=yi.workingColorSpace){return yi.fromWorkingColorSpace(ms.copy(this),e),t.r=ms.r,t.g=ms.g,t.b=ms.b,t}getStyle(t=hn){yi.fromWorkingColorSpace(ms.copy(this),t);const e=ms.r,g=ms.g,b=ms.b;return t!==hn?`color(${t} ${e.toFixed(3)} ${g.toFixed(3)} ${b.toFixed(3)})`:`rgb(${Math.round(255*e)},${Math.round(255*g)},${Math.round(255*b)})`}offsetHSL(t,s,e){return this.getHSL(us),this.setHSL(us.h+t,us.s+s,us.l+e)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,e){return this.r=t.r+e.r,this.g=t.g+e.g,this.b=t.b+e.b,this}addScalar(s){return this.r+=s,this.g+=s,this.b+=s,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(s){return this.r*=s,this.g*=s,this.b*=s,this}lerp(t,e){return this.r+=(t.r-this.r)*e,this.g+=(t.g-this.g)*e,this.b+=(t.b-this.b)*e,this}lerpColors(t,e,n){return this.r=t.r+(e.r-t.r)*n,this.g=t.g+(e.g-t.g)*n,this.b=t.b+(e.b-t.b)*n,this}lerpHSL(t,e){this.getHSL(us),t.getHSL(ds);const n=si(us.h,ds.h,e),s=si(us.s,ds.s,e),r=si(us.l,ds.l,e);return this.setHSL(n,s,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const e=this.r,g=this.g,b=this.b,n=t.elements;return this.r=n[0]*e+n[3]*g+n[6]*b,this.g=n[1]*e+n[4]*g+n[7]*b,this.b=n[2]*e+n[5]*g+n[8]*b,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,e=0){return this.r=t[e],this.g=t[e+1],this.b=t[e+2],this}toArray(t=[],e=0){return t[e]=this.r,t[e+1]=this.g,t[e+2]=this.b,t}fromBufferAttribute(t,e){return this.r=t.getX(e),this.g=t.getY(e),this.b=t.getZ(e),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const ms=new fs;fs.NAMES=hs;let gs=0;class _s extends Kn{static get type(){return"Material"}get type(){return this.constructor.type}set type(t){}constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:gs++}),this.uuid=ni(),this.name="",this.blending=w,this.side=y,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=z,this.blendDst=k,this.blendEquation=P,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new fs(0,0,0),this.blendAlpha=0,this.depthFunc=tt,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=Rn,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=mn,this.stencilZFail=mn,this.stencilZPass=mn,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(void 0!==t)for(const e in t){const n=t[e];if(void 0===n){console.warn(`THREE.Material: parameter '${e}' has value of undefined.`);continue}const r=this[e];void 0!==r?r&&r.isColor?r.set(n):r&&r.isVector3&&n&&n.isVector3?r.copy(n):this[e]=n:console.warn(`THREE.Material: '${e}' is not a property of THREE.${this.type}.`)}}toJSON(meta){const t=void 0===meta||"string"==typeof meta;t&&(meta={textures:{},images:{}});const data={metadata:{version:4.6,type:"Material",generator:"Material.toJSON"}};function e(t){const e=[];for(const n in t){const data=t[n];delete data.metadata,e.push(data)}return e}if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),this.color&&this.color.isColor&&(data.color=this.color.getHex()),void 0!==this.roughness&&(data.roughness=this.roughness),void 0!==this.metalness&&(data.metalness=this.metalness),void 0!==this.sheen&&(data.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(data.sheenColor=this.sheenColor.getHex()),void 0!==this.sheenRoughness&&(data.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(data.emissive=this.emissive.getHex()),void 0!==this.emissiveIntensity&&1!==this.emissiveIntensity&&(data.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(data.specular=this.specular.getHex()),void 0!==this.specularIntensity&&(data.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(data.specularColor=this.specularColor.getHex()),void 0!==this.shininess&&(data.shininess=this.shininess),void 0!==this.clearcoat&&(data.clearcoat=this.clearcoat),void 0!==this.clearcoatRoughness&&(data.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(data.clearcoatMap=this.clearcoatMap.toJSON(meta).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(data.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(meta).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(data.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(meta).uuid,data.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),void 0!==this.dispersion&&(data.dispersion=this.dispersion),void 0!==this.iridescence&&(data.iridescence=this.iridescence),void 0!==this.iridescenceIOR&&(data.iridescenceIOR=this.iridescenceIOR),void 0!==this.iridescenceThicknessRange&&(data.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(data.iridescenceMap=this.iridescenceMap.toJSON(meta).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(data.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(meta).uuid),void 0!==this.anisotropy&&(data.anisotropy=this.anisotropy),void 0!==this.anisotropyRotation&&(data.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(data.anisotropyMap=this.anisotropyMap.toJSON(meta).uuid),this.map&&this.map.isTexture&&(data.map=this.map.toJSON(meta).uuid),this.matcap&&this.matcap.isTexture&&(data.matcap=this.matcap.toJSON(meta).uuid),this.alphaMap&&this.alphaMap.isTexture&&(data.alphaMap=this.alphaMap.toJSON(meta).uuid),this.lightMap&&this.lightMap.isTexture&&(data.lightMap=this.lightMap.toJSON(meta).uuid,data.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(data.aoMap=this.aoMap.toJSON(meta).uuid,data.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(data.bumpMap=this.bumpMap.toJSON(meta).uuid,data.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(data.normalMap=this.normalMap.toJSON(meta).uuid,data.normalMapType=this.normalMapType,data.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(data.displacementMap=this.displacementMap.toJSON(meta).uuid,data.displacementScale=this.displacementScale,data.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(data.roughnessMap=this.roughnessMap.toJSON(meta).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(data.metalnessMap=this.metalnessMap.toJSON(meta).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(data.emissiveMap=this.emissiveMap.toJSON(meta).uuid),this.specularMap&&this.specularMap.isTexture&&(data.specularMap=this.specularMap.toJSON(meta).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(data.specularIntensityMap=this.specularIntensityMap.toJSON(meta).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(data.specularColorMap=this.specularColorMap.toJSON(meta).uuid),this.envMap&&this.envMap.isTexture&&(data.envMap=this.envMap.toJSON(meta).uuid,void 0!==this.combine&&(data.combine=this.combine)),void 0!==this.envMapRotation&&(data.envMapRotation=this.envMapRotation.toArray()),void 0!==this.envMapIntensity&&(data.envMapIntensity=this.envMapIntensity),void 0!==this.reflectivity&&(data.reflectivity=this.reflectivity),void 0!==this.refractionRatio&&(data.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(data.gradientMap=this.gradientMap.toJSON(meta).uuid),void 0!==this.transmission&&(data.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(data.transmissionMap=this.transmissionMap.toJSON(meta).uuid),void 0!==this.thickness&&(data.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(data.thicknessMap=this.thicknessMap.toJSON(meta).uuid),void 0!==this.attenuationDistance&&this.attenuationDistance!==1/0&&(data.attenuationDistance=this.attenuationDistance),void 0!==this.attenuationColor&&(data.attenuationColor=this.attenuationColor.getHex()),void 0!==this.size&&(data.size=this.size),null!==this.shadowSide&&(data.shadowSide=this.shadowSide),void 0!==this.sizeAttenuation&&(data.sizeAttenuation=this.sizeAttenuation),this.blending!==w&&(data.blending=this.blending),this.side!==y&&(data.side=this.side),!0===this.vertexColors&&(data.vertexColors=!0),this.opacity<1&&(data.opacity=this.opacity),!0===this.transparent&&(data.transparent=!0),this.blendSrc!==z&&(data.blendSrc=this.blendSrc),this.blendDst!==k&&(data.blendDst=this.blendDst),this.blendEquation!==P&&(data.blendEquation=this.blendEquation),null!==this.blendSrcAlpha&&(data.blendSrcAlpha=this.blendSrcAlpha),null!==this.blendDstAlpha&&(data.blendDstAlpha=this.blendDstAlpha),null!==this.blendEquationAlpha&&(data.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(data.blendColor=this.blendColor.getHex()),0!==this.blendAlpha&&(data.blendAlpha=this.blendAlpha),this.depthFunc!==tt&&(data.depthFunc=this.depthFunc),!1===this.depthTest&&(data.depthTest=this.depthTest),!1===this.depthWrite&&(data.depthWrite=this.depthWrite),!1===this.colorWrite&&(data.colorWrite=this.colorWrite),255!==this.stencilWriteMask&&(data.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==Rn&&(data.stencilFunc=this.stencilFunc),0!==this.stencilRef&&(data.stencilRef=this.stencilRef),255!==this.stencilFuncMask&&(data.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==mn&&(data.stencilFail=this.stencilFail),this.stencilZFail!==mn&&(data.stencilZFail=this.stencilZFail),this.stencilZPass!==mn&&(data.stencilZPass=this.stencilZPass),!0===this.stencilWrite&&(data.stencilWrite=this.stencilWrite),void 0!==this.rotation&&0!==this.rotation&&(data.rotation=this.rotation),!0===this.polygonOffset&&(data.polygonOffset=!0),0!==this.polygonOffsetFactor&&(data.polygonOffsetFactor=this.polygonOffsetFactor),0!==this.polygonOffsetUnits&&(data.polygonOffsetUnits=this.polygonOffsetUnits),void 0!==this.linewidth&&1!==this.linewidth&&(data.linewidth=this.linewidth),void 0!==this.dashSize&&(data.dashSize=this.dashSize),void 0!==this.gapSize&&(data.gapSize=this.gapSize),void 0!==this.scale&&(data.scale=this.scale),!0===this.dithering&&(data.dithering=!0),this.alphaTest>0&&(data.alphaTest=this.alphaTest),!0===this.alphaHash&&(data.alphaHash=!0),!0===this.alphaToCoverage&&(data.alphaToCoverage=!0),!0===this.premultipliedAlpha&&(data.premultipliedAlpha=!0),!0===this.forceSinglePass&&(data.forceSinglePass=!0),!0===this.wireframe&&(data.wireframe=!0),this.wireframeLinewidth>1&&(data.wireframeLinewidth=this.wireframeLinewidth),"round"!==this.wireframeLinecap&&(data.wireframeLinecap=this.wireframeLinecap),"round"!==this.wireframeLinejoin&&(data.wireframeLinejoin=this.wireframeLinejoin),!0===this.flatShading&&(data.flatShading=!0),!1===this.visible&&(data.visible=!1),!1===this.toneMapped&&(data.toneMapped=!1),!1===this.fog&&(data.fog=!1),Object.keys(this.userData).length>0&&(data.userData=this.userData),t){const t=e(meta.textures),n=e(meta.images);t.length>0&&(data.textures=t),n.length>0&&(data.images=n)}return data}clone(){return(new this.constructor).copy(this)}copy(source){this.name=source.name,this.blending=source.blending,this.side=source.side,this.vertexColors=source.vertexColors,this.opacity=source.opacity,this.transparent=source.transparent,this.blendSrc=source.blendSrc,this.blendDst=source.blendDst,this.blendEquation=source.blendEquation,this.blendSrcAlpha=source.blendSrcAlpha,this.blendDstAlpha=source.blendDstAlpha,this.blendEquationAlpha=source.blendEquationAlpha,this.blendColor.copy(source.blendColor),this.blendAlpha=source.blendAlpha,this.depthFunc=source.depthFunc,this.depthTest=source.depthTest,this.depthWrite=source.depthWrite,this.stencilWriteMask=source.stencilWriteMask,this.stencilFunc=source.stencilFunc,this.stencilRef=source.stencilRef,this.stencilFuncMask=source.stencilFuncMask,this.stencilFail=source.stencilFail,this.stencilZFail=source.stencilZFail,this.stencilZPass=source.stencilZPass,this.stencilWrite=source.stencilWrite;const t=source.clippingPlanes;let e=null;if(null!==t){const n=t.length;e=new Array(n);for(let i=0;i!==n;++i)e[i]=t[i].clone()}return this.clippingPlanes=e,this.clipIntersection=source.clipIntersection,this.clipShadows=source.clipShadows,this.shadowSide=source.shadowSide,this.colorWrite=source.colorWrite,this.precision=source.precision,this.polygonOffset=source.polygonOffset,this.polygonOffsetFactor=source.polygonOffsetFactor,this.polygonOffsetUnits=source.polygonOffsetUnits,this.dithering=source.dithering,this.alphaTest=source.alphaTest,this.alphaHash=source.alphaHash,this.alphaToCoverage=source.alphaToCoverage,this.premultipliedAlpha=source.premultipliedAlpha,this.forceSinglePass=source.forceSinglePass,this.visible=source.visible,this.toneMapped=source.toneMapped,this.userData=JSON.parse(JSON.stringify(source.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){!0===t&&this.version++}onBuild(){console.warn("Material: onBuild() has been removed.")}}class vs extends _s{static get type(){return"MeshBasicMaterial"}constructor(t){super(),this.isMeshBasicMaterial=!0,this.color=new fs(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Lr,this.combine=at,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.envMapRotation.copy(source.envMapRotation),this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.fog=source.fog,this}}const xs=ys();function ys(){const t=new ArrayBuffer(4),e=new Float32Array(t),n=new Uint32Array(t),r=new Uint32Array(512),o=new Uint32Array(512);for(let i=0;i<256;++i){const t=i-127;t<-27?(r[i]=0,r[256|i]=32768,o[i]=24,o[256|i]=24):t<-14?(r[i]=1024>>-t-14,r[256|i]=1024>>-t-14|32768,o[i]=-t-1,o[256|i]=-t-1):t<=15?(r[i]=t+15<<10,r[256|i]=t+15<<10|32768,o[i]=13,o[256|i]=13):t<128?(r[i]=31744,r[256|i]=64512,o[i]=24,o[256|i]=24):(r[i]=31744,r[256|i]=64512,o[i]=13,o[256|i]=13)}const l=new Uint32Array(2048),c=new Uint32Array(64),h=new Uint32Array(64);for(let i=1;i<1024;++i){let t=i<<13,e=0;for(;!(8388608&t);)t<<=1,e-=8388608;t&=-8388609,e+=947912704,l[i]=t|e}for(let i=1024;i<2048;++i)l[i]=939524096+(i-1024<<13);for(let i=1;i<31;++i)c[i]=i<<23;c[31]=1199570944,c[32]=2147483648;for(let i=33;i<63;++i)c[i]=2147483648+(i-32<<23);c[63]=3347054592;for(let i=1;i<64;++i)32!==i&&(h[i]=1024);return{floatView:e,uint32View:n,baseTable:r,shiftTable:o,mantissaTable:l,exponentTable:c,offsetTable:h}}function Ms(t){Math.abs(t)>65504&&console.warn("THREE.DataUtils.toHalfFloat(): Value out of range."),t=ii(t,-65504,65504),xs.floatView[0]=t;const e=xs.uint32View[0],n=e>>23&511;return xs.baseTable[n]+((8388607&e)>>xs.shiftTable[n])}function Ss(t){const e=t>>10;return xs.uint32View[0]=xs.mantissaTable[xs.offsetTable[e]+(1023&t)]+xs.exponentTable[e],xs.floatView[0]}const bs={toHalfFloat:Ms,fromHalfFloat:Ss},Ts=new Gi,ws=new hi;class Es{constructor(t,e,n=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,this.name="",this.array=t,this.itemSize=e,this.count=void 0!==t?t.length/e:0,this.normalized=n,this.usage=Bn,this.updateRanges=[],this.gpuType=Xt,this.version=0}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(source){return this.name=source.name,this.array=new source.array.constructor(source.array),this.itemSize=source.itemSize,this.count=source.count,this.normalized=source.normalized,this.usage=source.usage,this.gpuType=source.gpuType,this}copyAt(t,e,n){t*=this.itemSize,n*=e.itemSize;for(let i=0,r=this.itemSize;i<r;i++)this.array[t+i]=e.array[n+i];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(2===this.itemSize)for(let i=0,e=this.count;i<e;i++)ws.fromBufferAttribute(this,i),ws.applyMatrix3(t),this.setXY(i,ws.x,ws.y);else if(3===this.itemSize)for(let i=0,e=this.count;i<e;i++)Ts.fromBufferAttribute(this,i),Ts.applyMatrix3(t),this.setXYZ(i,Ts.x,Ts.y,Ts.z);return this}applyMatrix4(t){for(let i=0,e=this.count;i<e;i++)Ts.fromBufferAttribute(this,i),Ts.applyMatrix4(t),this.setXYZ(i,Ts.x,Ts.y,Ts.z);return this}applyNormalMatrix(t){for(let i=0,e=this.count;i<e;i++)Ts.fromBufferAttribute(this,i),Ts.applyNormalMatrix(t),this.setXYZ(i,Ts.x,Ts.y,Ts.z);return this}transformDirection(t){for(let i=0,e=this.count;i<e;i++)Ts.fromBufferAttribute(this,i),Ts.transformDirection(t),this.setXYZ(i,Ts.x,Ts.y,Ts.z);return this}set(t,e=0){return this.array.set(t,e),this}getComponent(t,component){let e=this.array[t*this.itemSize+component];return this.normalized&&(e=ai(e,this.array)),e}setComponent(t,component,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize+component]=e,this}getX(t){let e=this.array[t*this.itemSize];return this.normalized&&(e=ai(e,this.array)),e}setX(t,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize]=e,this}getY(t){let e=this.array[t*this.itemSize+1];return this.normalized&&(e=ai(e,this.array)),e}setY(t,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize+1]=e,this}getZ(t){let e=this.array[t*this.itemSize+2];return this.normalized&&(e=ai(e,this.array)),e}setZ(t,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize+2]=e,this}getW(t){let e=this.array[t*this.itemSize+3];return this.normalized&&(e=ai(e,this.array)),e}setW(t,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize+3]=e,this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array)),this.array[t+0]=e,this.array[t+1]=n,this}setXYZ(t,e,n,r){return t*=this.itemSize,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array),r=oi(r,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this}setXYZW(t,e,n,r,o){return t*=this.itemSize,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array),r=oi(r,this.array),o=oi(o,this.array)),this.array[t+0]=e,this.array[t+1]=n,this.array[t+2]=r,this.array[t+3]=o,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const data={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return""!==this.name&&(data.name=this.name),this.usage!==Bn&&(data.usage=this.usage),data}}class As extends Es{constructor(t,e,n){super(new Int8Array(t),e,n)}}class Cs extends Es{constructor(t,e,n){super(new Uint8Array(t),e,n)}}class Rs extends Es{constructor(t,e,n){super(new Uint8ClampedArray(t),e,n)}}class Ps extends Es{constructor(t,e,n){super(new Int16Array(t),e,n)}}class Is extends Es{constructor(t,e,n){super(new Uint16Array(t),e,n)}}class Ls extends Es{constructor(t,e,n){super(new Int32Array(t),e,n)}}class Us extends Es{constructor(t,e,n){super(new Uint32Array(t),e,n)}}class Ds extends Es{constructor(t,e,n){super(new Uint16Array(t),e,n),this.isFloat16BufferAttribute=!0}getX(t){let e=Ss(this.array[t*this.itemSize]);return this.normalized&&(e=ai(e,this.array)),e}setX(t,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize]=Ms(e),this}getY(t){let e=Ss(this.array[t*this.itemSize+1]);return this.normalized&&(e=ai(e,this.array)),e}setY(t,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize+1]=Ms(e),this}getZ(t){let e=Ss(this.array[t*this.itemSize+2]);return this.normalized&&(e=ai(e,this.array)),e}setZ(t,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize+2]=Ms(e),this}getW(t){let e=Ss(this.array[t*this.itemSize+3]);return this.normalized&&(e=ai(e,this.array)),e}setW(t,e){return this.normalized&&(e=oi(e,this.array)),this.array[t*this.itemSize+3]=Ms(e),this}setXY(t,e,n){return t*=this.itemSize,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array)),this.array[t+0]=Ms(e),this.array[t+1]=Ms(n),this}setXYZ(t,e,n,r){return t*=this.itemSize,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array),r=oi(r,this.array)),this.array[t+0]=Ms(e),this.array[t+1]=Ms(n),this.array[t+2]=Ms(r),this}setXYZW(t,e,n,r,o){return t*=this.itemSize,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array),r=oi(r,this.array),o=oi(o,this.array)),this.array[t+0]=Ms(e),this.array[t+1]=Ms(n),this.array[t+2]=Ms(r),this.array[t+3]=Ms(o),this}}class Ns extends Es{constructor(t,e,n){super(new Float32Array(t),e,n)}}let Os=0;const Fs=new Mr,Bs=new Zr,zs=new Gi,ks=new ji,Vs=new ji,Hs=new Gi;class Gs extends Kn{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:Os++}),this.uuid=ni(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(pi(t)?Us:Is)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,e){return this.attributes[t]=e,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return void 0!==this.attributes[t]}addGroup(t,e,n=0){this.groups.push({start:t,count:e,materialIndex:n})}clearGroups(){this.groups=[]}setDrawRange(t,e){this.drawRange.start=t,this.drawRange.count=e}applyMatrix4(t){const e=this.attributes.position;void 0!==e&&(e.applyMatrix4(t),e.needsUpdate=!0);const n=this.attributes.normal;if(void 0!==n){const e=(new ui).getNormalMatrix(t);n.applyNormalMatrix(e),n.needsUpdate=!0}const r=this.attributes.tangent;return void 0!==r&&(r.transformDirection(t),r.needsUpdate=!0),null!==this.boundingBox&&this.computeBoundingBox(),null!==this.boundingSphere&&this.computeBoundingSphere(),this}applyQuaternion(q){return Fs.makeRotationFromQuaternion(q),this.applyMatrix4(Fs),this}rotateX(t){return Fs.makeRotationX(t),this.applyMatrix4(Fs),this}rotateY(t){return Fs.makeRotationY(t),this.applyMatrix4(Fs),this}rotateZ(t){return Fs.makeRotationZ(t),this.applyMatrix4(Fs),this}translate(t,e,n){return Fs.makeTranslation(t,e,n),this.applyMatrix4(Fs),this}scale(t,e,n){return Fs.makeScale(t,e,n),this.applyMatrix4(Fs),this}lookAt(t){return Bs.lookAt(t),Bs.updateMatrix(),this.applyMatrix4(Bs.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(zs).negate(),this.translate(zs.x,zs.y,zs.z),this}setFromPoints(t){const e=this.getAttribute("position");if(void 0===e){const e=[];for(let i=0,n=t.length;i<n;i++){const n=t[i];e.push(n.x,n.y,n.z||0)}this.setAttribute("position",new Ns(e,3))}else{for(let i=0,n=e.count;i<n;i++){const n=t[i];e.setXYZ(i,n.x,n.y,n.z||0)}t.length>e.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),e.needsUpdate=!0}return this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new ji);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),void this.boundingBox.set(new Gi(-1/0,-1/0,-1/0),new Gi(1/0,1/0,1/0));if(void 0!==t){if(this.boundingBox.setFromBufferAttribute(t),e)for(let i=0,t=e.length;i<t;i++){const t=e[i];ks.setFromBufferAttribute(t),this.morphTargetsRelative?(Hs.addVectors(this.boundingBox.min,ks.min),this.boundingBox.expandByPoint(Hs),Hs.addVectors(this.boundingBox.max,ks.max),this.boundingBox.expandByPoint(Hs)):(this.boundingBox.expandByPoint(ks.min),this.boundingBox.expandByPoint(ks.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new dr);const t=this.attributes.position,e=this.morphAttributes.position;if(t&&t.isGLBufferAttribute)return console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),void this.boundingSphere.set(new Gi,1/0);if(t){const n=this.boundingSphere.center;if(ks.setFromBufferAttribute(t),e)for(let i=0,t=e.length;i<t;i++){const t=e[i];Vs.setFromBufferAttribute(t),this.morphTargetsRelative?(Hs.addVectors(ks.min,Vs.min),ks.expandByPoint(Hs),Hs.addVectors(ks.max,Vs.max),ks.expandByPoint(Hs)):(ks.expandByPoint(Vs.min),ks.expandByPoint(Vs.max))}ks.getCenter(n);let r=0;for(let i=0,e=t.count;i<e;i++)Hs.fromBufferAttribute(t,i),r=Math.max(r,n.distanceToSquared(Hs));if(e)for(let i=0,o=e.length;i<o;i++){const o=e[i],l=this.morphTargetsRelative;for(let e=0,c=o.count;e<c;e++)Hs.fromBufferAttribute(o,e),l&&(zs.fromBufferAttribute(t,e),Hs.add(zs)),r=Math.max(r,n.distanceToSquared(Hs))}this.boundingSphere.radius=Math.sqrt(r),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,e=this.attributes;if(null===t||void 0===e.position||void 0===e.normal||void 0===e.uv)return void console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");const n=e.position,r=e.normal,o=e.uv;!1===this.hasAttribute("tangent")&&this.setAttribute("tangent",new Es(new Float32Array(4*n.count),4));const l=this.getAttribute("tangent"),c=[],h=[];for(let i=0;i<n.count;i++)c[i]=new Gi,h[i]=new Gi;const d=new Gi,f=new Gi,m=new Gi,_=new hi,v=new hi,x=new hi,y=new Gi,M=new Gi;function S(a,b,t){d.fromBufferAttribute(n,a),f.fromBufferAttribute(n,b),m.fromBufferAttribute(n,t),_.fromBufferAttribute(o,a),v.fromBufferAttribute(o,b),x.fromBufferAttribute(o,t),f.sub(d),m.sub(d),v.sub(_),x.sub(_);const e=1/(v.x*x.y-x.x*v.y);isFinite(e)&&(y.copy(f).multiplyScalar(x.y).addScaledVector(m,-v.y).multiplyScalar(e),M.copy(m).multiplyScalar(v.x).addScaledVector(f,-x.x).multiplyScalar(e),c[a].add(y),c[b].add(y),c[t].add(y),h[a].add(M),h[b].add(M),h[t].add(M))}let T=this.groups;0===T.length&&(T=[{start:0,count:t.count}]);for(let i=0,e=T.length;i<e;++i){const e=T[i],n=e.start;for(let r=n,o=n+e.count;r<o;r+=3)S(t.getX(r+0),t.getX(r+1),t.getX(r+2))}const w=new Gi,E=new Gi,A=new Gi,C=new Gi;function R(t){A.fromBufferAttribute(r,t),C.copy(A);const e=c[t];w.copy(e),w.sub(A.multiplyScalar(A.dot(e))).normalize(),E.crossVectors(C,e);const n=E.dot(h[t])<0?-1:1;l.setXYZW(t,w.x,w.y,w.z,n)}for(let i=0,e=T.length;i<e;++i){const e=T[i],n=e.start;for(let r=n,o=n+e.count;r<o;r+=3)R(t.getX(r+0)),R(t.getX(r+1)),R(t.getX(r+2))}}computeVertexNormals(){const t=this.index,e=this.getAttribute("position");if(void 0!==e){let n=this.getAttribute("normal");if(void 0===n)n=new Es(new Float32Array(3*e.count),3),this.setAttribute("normal",n);else for(let i=0,t=n.count;i<t;i++)n.setXYZ(i,0,0,0);const r=new Gi,o=new Gi,l=new Gi,c=new Gi,h=new Gi,d=new Gi,f=new Gi,m=new Gi;if(t)for(let i=0,_=t.count;i<_;i+=3){const _=t.getX(i+0),v=t.getX(i+1),x=t.getX(i+2);r.fromBufferAttribute(e,_),o.fromBufferAttribute(e,v),l.fromBufferAttribute(e,x),f.subVectors(l,o),m.subVectors(r,o),f.cross(m),c.fromBufferAttribute(n,_),h.fromBufferAttribute(n,v),d.fromBufferAttribute(n,x),c.add(f),h.add(f),d.add(f),n.setXYZ(_,c.x,c.y,c.z),n.setXYZ(v,h.x,h.y,h.z),n.setXYZ(x,d.x,d.y,d.z)}else for(let i=0,t=e.count;i<t;i+=3)r.fromBufferAttribute(e,i+0),o.fromBufferAttribute(e,i+1),l.fromBufferAttribute(e,i+2),f.subVectors(l,o),m.subVectors(r,o),f.cross(m),n.setXYZ(i+0,f.x,f.y,f.z),n.setXYZ(i+1,f.x,f.y,f.z),n.setXYZ(i+2,f.x,f.y,f.z);this.normalizeNormals(),n.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let i=0,e=t.count;i<e;i++)Hs.fromBufferAttribute(t,i),Hs.normalize(),t.setXYZ(i,Hs.x,Hs.y,Hs.z)}toNonIndexed(){function t(t,e){const n=t.array,r=t.itemSize,o=t.normalized,l=new n.constructor(e.length*r);let c=0,h=0;for(let i=0,o=e.length;i<o;i++){c=t.isInterleavedBufferAttribute?e[i]*t.data.stride+t.offset:e[i]*r;for(let t=0;t<r;t++)l[h++]=n[c++]}return new Es(l,r,o)}if(null===this.index)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const e=new Gs,n=this.index.array,r=this.attributes;for(const o in r){const l=t(r[o],n);e.setAttribute(o,l)}const o=this.morphAttributes;for(const r in o){const l=[],c=o[r];for(let i=0,e=c.length;i<e;i++){const e=t(c[i],n);l.push(e)}e.morphAttributes[r]=l}e.morphTargetsRelative=this.morphTargetsRelative;const l=this.groups;for(let i=0,t=l.length;i<t;i++){const t=l[i];e.addGroup(t.start,t.count,t.materialIndex)}return e}toJSON(){const data={metadata:{version:4.6,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(data.uuid=this.uuid,data.type=this.type,""!==this.name&&(data.name=this.name),Object.keys(this.userData).length>0&&(data.userData=this.userData),void 0!==this.parameters){const t=this.parameters;for(const e in t)void 0!==t[e]&&(data[e]=t[e]);return data}data.data={attributes:{}};const t=this.index;null!==t&&(data.data.index={type:t.array.constructor.name,array:Array.prototype.slice.call(t.array)});const e=this.attributes;for(const t in e){const n=e[t];data.data.attributes[t]=n.toJSON(data.data)}const n={};let r=!1;for(const t in this.morphAttributes){const e=this.morphAttributes[t],o=[];for(let i=0,t=e.length;i<t;i++){const t=e[i];o.push(t.toJSON(data.data))}o.length>0&&(n[t]=o,r=!0)}r&&(data.data.morphAttributes=n,data.data.morphTargetsRelative=this.morphTargetsRelative);const o=this.groups;o.length>0&&(data.data.groups=JSON.parse(JSON.stringify(o)));const l=this.boundingSphere;return null!==l&&(data.data.boundingSphere={center:l.center.toArray(),radius:l.radius}),data}clone(){return(new this.constructor).copy(this)}copy(source){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const data={};this.name=source.name;const t=source.index;null!==t&&this.setIndex(t.clone(data));const e=source.attributes;for(const t in e){const n=e[t];this.setAttribute(t,n.clone(data))}const n=source.morphAttributes;for(const t in n){const e=[],r=n[t];for(let i=0,t=r.length;i<t;i++)e.push(r[i].clone(data));this.morphAttributes[t]=e}this.morphTargetsRelative=source.morphTargetsRelative;const r=source.groups;for(let i=0,t=r.length;i<t;i++){const t=r[i];this.addGroup(t.start,t.count,t.materialIndex)}const o=source.boundingBox;null!==o&&(this.boundingBox=o.clone());const l=source.boundingSphere;return null!==l&&(this.boundingSphere=l.clone()),this.drawRange.start=source.drawRange.start,this.drawRange.count=source.drawRange.count,this.userData=source.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Ws=new Mr,Xs=new yr,js=new dr,qs=new Gi,Ys=new Gi,Zs=new Gi,Js=new Gi,Ks=new Gi,$s=new Gi,Qs=new Gi,ta=new Gi;class ea extends Zr{constructor(t=new Gs,e=new vs){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(source,t){return super.copy(source,t),void 0!==source.morphTargetInfluences&&(this.morphTargetInfluences=source.morphTargetInfluences.slice()),void 0!==source.morphTargetDictionary&&(this.morphTargetDictionary=Object.assign({},source.morphTargetDictionary)),this.material=Array.isArray(source.material)?source.material.slice():source.material,this.geometry=source.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}getVertexPosition(t,e){const n=this.geometry,r=n.attributes.position,o=n.morphAttributes.position,l=n.morphTargetsRelative;e.fromBufferAttribute(r,t);const c=this.morphTargetInfluences;if(o&&c){$s.set(0,0,0);for(let i=0,n=o.length;i<n;i++){const n=c[i],r=o[i];0!==n&&(Ks.fromBufferAttribute(r,t),l?$s.addScaledVector(Ks,n):$s.addScaledVector(Ks.sub(e),n))}e.add($s)}return e}raycast(t,e){const n=this.geometry,r=this.material,o=this.matrixWorld;if(void 0!==r){if(null===n.boundingSphere&&n.computeBoundingSphere(),js.copy(n.boundingSphere),js.applyMatrix4(o),Xs.copy(t.ray).recast(t.near),!1===js.containsPoint(Xs.origin)){if(null===Xs.intersectSphere(js,qs))return;if(Xs.origin.distanceToSquared(qs)>(t.far-t.near)**2)return}Ws.copy(o).invert(),Xs.copy(t.ray).applyMatrix4(Ws),null!==n.boundingBox&&!1===Xs.intersectsBox(n.boundingBox)||this._computeIntersections(t,e,Xs)}}_computeIntersections(t,e,n){let r;const o=this.geometry,l=this.material,c=o.index,h=o.attributes.position,d=o.attributes.uv,f=o.attributes.uv1,m=o.attributes.normal,_=o.groups,v=o.drawRange;if(null!==c)if(Array.isArray(l))for(let i=0,o=_.length;i<o;i++){const o=_[i],h=l[o.materialIndex];for(let l=Math.max(o.start,v.start),_=Math.min(c.count,Math.min(o.start+o.count,v.start+v.count));l<_;l+=3){r=na(this,h,t,n,d,f,m,c.getX(l),c.getX(l+1),c.getX(l+2)),r&&(r.faceIndex=Math.floor(l/3),r.face.materialIndex=o.materialIndex,e.push(r))}}else{for(let i=Math.max(0,v.start),o=Math.min(c.count,v.start+v.count);i<o;i+=3){r=na(this,l,t,n,d,f,m,c.getX(i),c.getX(i+1),c.getX(i+2)),r&&(r.faceIndex=Math.floor(i/3),e.push(r))}}else if(void 0!==h)if(Array.isArray(l))for(let i=0,o=_.length;i<o;i++){const o=_[i],c=l[o.materialIndex];for(let l=Math.max(o.start,v.start),_=Math.min(h.count,Math.min(o.start+o.count,v.start+v.count));l<_;l+=3){r=na(this,c,t,n,d,f,m,l,l+1,l+2),r&&(r.faceIndex=Math.floor(l/3),r.face.materialIndex=o.materialIndex,e.push(r))}}else{for(let i=Math.max(0,v.start),o=Math.min(h.count,v.start+v.count);i<o;i+=3){r=na(this,l,t,n,d,f,m,i,i+1,i+2),r&&(r.faceIndex=Math.floor(i/3),e.push(r))}}}}function na(object,t,e,n,r,o,l,a,b,c){object.getVertexPosition(a,Ys),object.getVertexPosition(b,Zs),object.getVertexPosition(c,Js);const h=function(object,t,e,n,r,o,l,c){let h;if(h=t.side===M?n.intersectTriangle(l,o,r,!0,c):n.intersectTriangle(r,o,l,t.side===y,c),null===h)return null;ta.copy(c),ta.applyMatrix4(object.matrixWorld);const d=e.ray.origin.distanceTo(ta);return d<e.near||d>e.far?null:{distance:d,point:ta.clone(),object:object}}(object,t,e,n,Ys,Zs,Js,Qs);if(h){const t=new Gi;cs.getBarycoord(Qs,Ys,Zs,Js,t),r&&(h.uv=cs.getInterpolatedAttribute(r,a,b,c,t,new hi)),o&&(h.uv1=cs.getInterpolatedAttribute(o,a,b,c,t,new hi)),l&&(h.normal=cs.getInterpolatedAttribute(l,a,b,c,t,new Gi),h.normal.dot(n.direction)>0&&h.normal.multiplyScalar(-1));const e={a:a,b:b,c:c,normal:new Gi,materialIndex:0};cs.getNormal(Ys,Zs,Js,e.normal),h.face=e,h.barycoord=t}return h}class ia extends Gs{constructor(t=1,e=1,n=1,r=1,o=1,l=1){super(),this.type="BoxGeometry",this.parameters={width:t,height:e,depth:n,widthSegments:r,heightSegments:o,depthSegments:l};const c=this;r=Math.floor(r),o=Math.floor(o),l=Math.floor(l);const h=[],d=[],f=[],m=[];let _=0,v=0;function x(u,t,e,n,r,o,l,x,y,M,S){const T=o/y,w=l/M,E=o/2,A=l/2,C=x/2,R=y+1,P=M+1;let I=0,L=0;const U=new Gi;for(let o=0;o<P;o++){const l=o*w-A;for(let c=0;c<R;c++){const h=c*T-E;U[u]=h*n,U[t]=l*r,U[e]=C,d.push(U.x,U.y,U.z),U[u]=0,U[t]=0,U[e]=x>0?1:-1,f.push(U.x,U.y,U.z),m.push(c/y),m.push(1-o/M),I+=1}}for(let t=0;t<M;t++)for(let e=0;e<y;e++){const a=_+e+R*t,b=_+e+R*(t+1),n=_+(e+1)+R*(t+1),r=_+(e+1)+R*t;h.push(a,b,r),h.push(b,n,r),L+=6}c.addGroup(v,L,S),v+=L,_+=I}x("z","y","x",-1,-1,n,e,t,l,o,0),x("z","y","x",1,-1,n,e,-t,l,o,1),x("x","z","y",1,1,t,n,e,r,l,2),x("x","z","y",1,-1,t,n,-e,r,l,3),x("x","y","z",1,-1,t,e,n,r,o,4),x("x","y","z",-1,-1,t,e,-n,r,o,5),this.setIndex(h),this.setAttribute("position",new Ns(d,3)),this.setAttribute("normal",new Ns(f,3)),this.setAttribute("uv",new Ns(m,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new ia(data.width,data.height,data.depth,data.widthSegments,data.heightSegments,data.depthSegments)}}function ra(t){const e={};for(const u in t){e[u]={};for(const p in t[u]){const n=t[u][p];n&&(n.isColor||n.isMatrix3||n.isMatrix4||n.isVector2||n.isVector3||n.isVector4||n.isTexture||n.isQuaternion)?n.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),e[u][p]=null):e[u][p]=n.clone():Array.isArray(n)?e[u][p]=n.slice():e[u][p]=n}}return e}function sa(t){const e={};for(let u=0;u<t.length;u++){const n=ra(t[u]);for(const p in n)e[p]=n[p]}return e}function aa(t){const e=t.getRenderTarget();return null===e?t.outputColorSpace:!0===e.isXRRenderTarget?e.texture.colorSpace:yi.workingColorSpace}const oa={clone:ra,merge:sa};class la extends _s{static get type(){return"ShaderMaterial"}constructor(t){super(),this.isShaderMaterial=!0,this.defines={},this.uniforms={},this.uniformsGroups=[],this.vertexShader="void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",this.fragmentShader="void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}",this.linewidth=1,this.wireframe=!1,this.wireframeLinewidth=1,this.fog=!1,this.lights=!1,this.clipping=!1,this.forceSinglePass=!0,this.extensions={clipCullDistance:!1,multiDraw:!1},this.defaultAttributeValues={color:[1,1,1],uv:[0,0],uv1:[0,0]},this.index0AttributeName=void 0,this.uniformsNeedUpdate=!1,this.glslVersion=null,void 0!==t&&this.setValues(t)}copy(source){return super.copy(source),this.fragmentShader=source.fragmentShader,this.vertexShader=source.vertexShader,this.uniforms=ra(source.uniforms),this.uniformsGroups=function(t){const e=[];for(let u=0;u<t.length;u++)e.push(t[u].clone());return e}(source.uniformsGroups),this.defines=Object.assign({},source.defines),this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.fog=source.fog,this.lights=source.lights,this.clipping=source.clipping,this.extensions=Object.assign({},source.extensions),this.glslVersion=source.glslVersion,this}toJSON(meta){const data=super.toJSON(meta);data.glslVersion=this.glslVersion,data.uniforms={};for(const t in this.uniforms){const e=this.uniforms[t].value;e&&e.isTexture?data.uniforms[t]={type:"t",value:e.toJSON(meta).uuid}:e&&e.isColor?data.uniforms[t]={type:"c",value:e.getHex()}:e&&e.isVector2?data.uniforms[t]={type:"v2",value:e.toArray()}:e&&e.isVector3?data.uniforms[t]={type:"v3",value:e.toArray()}:e&&e.isVector4?data.uniforms[t]={type:"v4",value:e.toArray()}:e&&e.isMatrix3?data.uniforms[t]={type:"m3",value:e.toArray()}:e&&e.isMatrix4?data.uniforms[t]={type:"m4",value:e.toArray()}:data.uniforms[t]={value:e}}Object.keys(this.defines).length>0&&(data.defines=this.defines),data.vertexShader=this.vertexShader,data.fragmentShader=this.fragmentShader,data.lights=this.lights,data.clipping=this.clipping;const t={};for(const e in this.extensions)!0===this.extensions[e]&&(t[e]=!0);return Object.keys(t).length>0&&(data.extensions=t),data}}class ca extends Zr{constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new Mr,this.projectionMatrix=new Mr,this.projectionMatrixInverse=new Mr,this.coordinateSystem=Zn}copy(source,t){return super.copy(source,t),this.matrixWorldInverse.copy(source.matrixWorldInverse),this.projectionMatrix.copy(source.projectionMatrix),this.projectionMatrixInverse.copy(source.projectionMatrixInverse),this.coordinateSystem=source.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,e){super.updateWorldMatrix(t,e),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return(new this.constructor).copy(this)}}const ha=new Gi,ua=new hi,da=new hi;class pa extends ca{constructor(t=50,e=1,n=.1,r=2e3){super(),this.isPerspectiveCamera=!0,this.type="PerspectiveCamera",this.fov=t,this.zoom=1,this.near=n,this.far=r,this.focus=10,this.aspect=e,this.view=null,this.filmGauge=35,this.filmOffset=0,this.updateProjectionMatrix()}copy(source,t){return super.copy(source,t),this.fov=source.fov,this.zoom=source.zoom,this.near=source.near,this.far=source.far,this.focus=source.focus,this.aspect=source.aspect,this.view=null===source.view?null:Object.assign({},source.view),this.filmGauge=source.filmGauge,this.filmOffset=source.filmOffset,this}setFocalLength(t){const e=.5*this.getFilmHeight()/t;this.fov=2*ei*Math.atan(e),this.updateProjectionMatrix()}getFocalLength(){const t=Math.tan(.5*ti*this.fov);return.5*this.getFilmHeight()/t}getEffectiveFOV(){return 2*ei*Math.atan(Math.tan(.5*ti*this.fov)/this.zoom)}getFilmWidth(){return this.filmGauge*Math.min(this.aspect,1)}getFilmHeight(){return this.filmGauge/Math.max(this.aspect,1)}getViewBounds(t,e,n){ha.set(-1,-1,.5).applyMatrix4(this.projectionMatrixInverse),e.set(ha.x,ha.y).multiplyScalar(-t/ha.z),ha.set(1,1,.5).applyMatrix4(this.projectionMatrixInverse),n.set(ha.x,ha.y).multiplyScalar(-t/ha.z)}getViewSize(t,e){return this.getViewBounds(t,ua,da),e.subVectors(da,ua)}setViewOffset(t,e,n,r,o,l){this.aspect=t/e,null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=o,this.view.height=l,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=this.near;let e=t*Math.tan(.5*ti*this.fov)/this.zoom,n=2*e,r=this.aspect*n,o=-.5*r;const view=this.view;if(null!==this.view&&this.view.enabled){const t=view.fullWidth,l=view.fullHeight;o+=view.offsetX*r/t,e-=view.offsetY*n/l,r*=view.width/t,n*=view.height/l}const l=this.filmOffset;0!==l&&(o+=t*l/this.getFilmWidth()),this.projectionMatrix.makePerspective(o,o+r,e,e-n,t,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(meta){const data=super.toJSON(meta);return data.object.fov=this.fov,data.object.zoom=this.zoom,data.object.near=this.near,data.object.far=this.far,data.object.focus=this.focus,data.object.aspect=this.aspect,null!==this.view&&(data.object.view=Object.assign({},this.view)),data.object.filmGauge=this.filmGauge,data.object.filmOffset=this.filmOffset,data}}const fa=-90;class ma extends Zr{constructor(t,e,n){super(),this.type="CubeCamera",this.renderTarget=n,this.coordinateSystem=null,this.activeMipmapLevel=0;const r=new pa(fa,1,t,e);r.layers=this.layers,this.add(r);const o=new pa(fa,1,t,e);o.layers=this.layers,this.add(o);const l=new pa(fa,1,t,e);l.layers=this.layers,this.add(l);const c=new pa(fa,1,t,e);c.layers=this.layers,this.add(c);const h=new pa(fa,1,t,e);h.layers=this.layers,this.add(h);const d=new pa(fa,1,t,e);d.layers=this.layers,this.add(d)}updateCoordinateSystem(){const t=this.coordinateSystem,e=this.children.concat(),[n,r,o,l,c,h]=e;for(const t of e)this.remove(t);if(t===Zn)n.up.set(0,1,0),n.lookAt(1,0,0),r.up.set(0,1,0),r.lookAt(-1,0,0),o.up.set(0,0,-1),o.lookAt(0,1,0),l.up.set(0,0,1),l.lookAt(0,-1,0),c.up.set(0,1,0),c.lookAt(0,0,1),h.up.set(0,1,0),h.lookAt(0,0,-1);else{if(t!==Jn)throw new Error("THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: "+t);n.up.set(0,-1,0),n.lookAt(-1,0,0),r.up.set(0,-1,0),r.lookAt(1,0,0),o.up.set(0,0,1),o.lookAt(0,1,0),l.up.set(0,0,-1),l.lookAt(0,-1,0),c.up.set(0,-1,0),c.lookAt(0,0,1),h.up.set(0,-1,0),h.lookAt(0,0,-1)}for(const t of e)this.add(t),t.updateMatrixWorld()}update(t,e){null===this.parent&&this.updateMatrixWorld();const{renderTarget:n,activeMipmapLevel:r}=this;this.coordinateSystem!==t.coordinateSystem&&(this.coordinateSystem=t.coordinateSystem,this.updateCoordinateSystem());const[o,l,c,h,d,f]=this.children,m=t.getRenderTarget(),_=t.getActiveCubeFace(),v=t.getActiveMipmapLevel(),x=t.xr.enabled;t.xr.enabled=!1;const y=n.texture.generateMipmaps;n.texture.generateMipmaps=!1,t.setRenderTarget(n,0,r),t.render(e,o),t.setRenderTarget(n,1,r),t.render(e,l),t.setRenderTarget(n,2,r),t.render(e,c),t.setRenderTarget(n,3,r),t.render(e,h),t.setRenderTarget(n,4,r),t.render(e,d),n.texture.generateMipmaps=y,t.setRenderTarget(n,5,r),t.render(e,f),t.setRenderTarget(m,_,v),t.xr.enabled=x,n.texture.needsPMREMUpdate=!0}}class ga extends Di{constructor(t,e,n,r,o,l,c,h,d,f){super(t=void 0!==t?t:[],e=void 0!==e?e:Mt,n,r,o,l,c,h,d,f),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}class _a extends Fi{constructor(t=1,e={}){super(t,t,e),this.isWebGLCubeRenderTarget=!0;const image={width:t,height:t,depth:1},n=[image,image,image,image,image,image];this.texture=new ga(n,e.mapping,e.wrapS,e.wrapT,e.magFilter,e.minFilter,e.format,e.type,e.anisotropy,e.colorSpace),this.texture.isRenderTargetTexture=!0,this.texture.generateMipmaps=void 0!==e.generateMipmaps&&e.generateMipmaps,this.texture.minFilter=void 0!==e.minFilter?e.minFilter:Dt}fromEquirectangularTexture(t,e){this.texture.type=e.type,this.texture.colorSpace=e.colorSpace,this.texture.generateMipmaps=e.generateMipmaps,this.texture.minFilter=e.minFilter,this.texture.magFilter=e.magFilter;const n={uniforms:{tEquirect:{value:null}},vertexShader:"\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t\t}\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvWorldDirection = transformDirection( position, modelMatrix );\n\n\t\t\t\t\t#include <begin_vertex>\n\t\t\t\t\t#include <project_vertex>\n\n\t\t\t\t}\n\t\t\t",fragmentShader:"\n\n\t\t\t\tuniform sampler2D tEquirect;\n\n\t\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t\t#include <common>\n\n\t\t\t\tvoid main() {\n\n\t\t\t\t\tvec3 direction = normalize( vWorldDirection );\n\n\t\t\t\t\tvec2 sampleUV = equirectUv( direction );\n\n\t\t\t\t\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\n\t\t\t\t}\n\t\t\t"},r=new ia(5,5,5),o=new la({name:"CubemapFromEquirect",uniforms:ra(n.uniforms),vertexShader:n.vertexShader,fragmentShader:n.fragmentShader,side:M,blending:T});o.uniforms.tEquirect.value=e;const l=new ea(r,o),c=e.minFilter;e.minFilter===Ft&&(e.minFilter=Dt);return new ma(1,10,this).update(t,l),e.minFilter=c,l.geometry.dispose(),l.material.dispose(),this}clear(t,e,n,r){const o=t.getRenderTarget();for(let i=0;i<6;i++)t.setRenderTarget(this,i),t.clear(e,n,r);t.setRenderTarget(o)}}const va=new Gi,xa=new Gi,ya=new ui;class Ma{constructor(t=new Gi(1,0,0),e=0){this.isPlane=!0,this.normal=t,this.constant=e}set(t,e){return this.normal.copy(t),this.constant=e,this}setComponents(t,e,n,r){return this.normal.set(t,e,n),this.constant=r,this}setFromNormalAndCoplanarPoint(t,e){return this.normal.copy(t),this.constant=-e.dot(this.normal),this}setFromCoplanarPoints(a,b,t){const e=va.subVectors(t,b).cross(xa.subVectors(a,b)).normalize();return this.setFromNormalAndCoplanarPoint(e,a),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,e){return e.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(line,t){const e=line.delta(va),n=this.normal.dot(e);if(0===n)return 0===this.distanceToPoint(line.start)?t.copy(line.start):null;const r=-(line.start.dot(this.normal)+this.constant)/n;return r<0||r>1?null:t.copy(line.start).addScaledVector(e,r)}intersectsLine(line){const t=this.distanceToPoint(line.start),e=this.distanceToPoint(line.end);return t<0&&e>0||e<0&&t>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,e){const n=e||ya.getNormalMatrix(t),r=this.coplanarPoint(va).applyMatrix4(t),o=this.normal.applyMatrix3(n).normalize();return this.constant=-r.dot(o),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return(new this.constructor).copy(this)}}const Sa=new dr,ba=new Gi;class Ta{constructor(t=new Ma,e=new Ma,n=new Ma,r=new Ma,o=new Ma,l=new Ma){this.planes=[t,e,n,r,o,l]}set(t,e,n,r,o,l){const c=this.planes;return c[0].copy(t),c[1].copy(e),c[2].copy(n),c[3].copy(r),c[4].copy(o),c[5].copy(l),this}copy(t){const e=this.planes;for(let i=0;i<6;i++)e[i].copy(t.planes[i]);return this}setFromProjectionMatrix(t,e=Zn){const n=this.planes,r=t.elements,o=r[0],l=r[1],c=r[2],h=r[3],d=r[4],f=r[5],m=r[6],_=r[7],v=r[8],x=r[9],y=r[10],M=r[11],S=r[12],T=r[13],w=r[14],E=r[15];if(n[0].setComponents(h-o,_-d,M-v,E-S).normalize(),n[1].setComponents(h+o,_+d,M+v,E+S).normalize(),n[2].setComponents(h+l,_+f,M+x,E+T).normalize(),n[3].setComponents(h-l,_-f,M-x,E-T).normalize(),n[4].setComponents(h-c,_-m,M-y,E-w).normalize(),e===Zn)n[5].setComponents(h+c,_+m,M+y,E+w).normalize();else{if(e!==Jn)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+e);n[5].setComponents(c,m,y,w).normalize()}return this}intersectsObject(object){if(void 0!==object.boundingSphere)null===object.boundingSphere&&object.computeBoundingSphere(),Sa.copy(object.boundingSphere).applyMatrix4(object.matrixWorld);else{const t=object.geometry;null===t.boundingSphere&&t.computeBoundingSphere(),Sa.copy(t.boundingSphere).applyMatrix4(object.matrixWorld)}return this.intersectsSphere(Sa)}intersectsSprite(t){return Sa.center.set(0,0,0),Sa.radius=.7071067811865476,Sa.applyMatrix4(t.matrixWorld),this.intersectsSphere(Sa)}intersectsSphere(t){const e=this.planes,n=t.center,r=-t.radius;for(let i=0;i<6;i++){if(e[i].distanceToPoint(n)<r)return!1}return!0}intersectsBox(t){const e=this.planes;for(let i=0;i<6;i++){const n=e[i];if(ba.x=n.normal.x>0?t.max.x:t.min.x,ba.y=n.normal.y>0?t.max.y:t.min.y,ba.z=n.normal.z>0?t.max.z:t.min.z,n.distanceToPoint(ba)<0)return!1}return!0}containsPoint(t){const e=this.planes;for(let i=0;i<6;i++)if(e[i].distanceToPoint(t)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}function wa(){let t=null,e=!1,n=null,r=null;function o(time,e){n(time,e),r=t.requestAnimationFrame(o)}return{start:function(){!0!==e&&null!==n&&(r=t.requestAnimationFrame(o),e=!0)},stop:function(){t.cancelAnimationFrame(r),e=!1},setAnimationLoop:function(t){n=t},setContext:function(e){t=e}}}function Ea(t){const e=new WeakMap;return{get:function(t){return t.isInterleavedBufferAttribute&&(t=t.data),e.get(t)},remove:function(n){n.isInterleavedBufferAttribute&&(n=n.data);const data=e.get(n);data&&(t.deleteBuffer(data.buffer),e.delete(n))},update:function(n,r){if(n.isInterleavedBufferAttribute&&(n=n.data),n.isGLBufferAttribute){const t=e.get(n);return void((!t||t.version<n.version)&&e.set(n,{buffer:n.buffer,type:n.type,bytesPerElement:n.elementSize,version:n.version}))}const data=e.get(n);if(void 0===data)e.set(n,function(e,n){const r=e.array,o=e.usage,l=r.byteLength,c=t.createBuffer();let h;if(t.bindBuffer(n,c),t.bufferData(n,r,o),e.onUploadCallback(),r instanceof Float32Array)h=t.FLOAT;else if(r instanceof Uint16Array)h=e.isFloat16BufferAttribute?t.HALF_FLOAT:t.UNSIGNED_SHORT;else if(r instanceof Int16Array)h=t.SHORT;else if(r instanceof Uint32Array)h=t.UNSIGNED_INT;else if(r instanceof Int32Array)h=t.INT;else if(r instanceof Int8Array)h=t.BYTE;else if(r instanceof Uint8Array)h=t.UNSIGNED_BYTE;else{if(!(r instanceof Uint8ClampedArray))throw new Error("THREE.WebGLAttributes: Unsupported buffer data format: "+r);h=t.UNSIGNED_BYTE}return{buffer:c,type:h,bytesPerElement:r.BYTES_PER_ELEMENT,version:e.version,size:l}}(n,r));else if(data.version<n.version){if(data.size!==n.array.byteLength)throw new Error("THREE.WebGLAttributes: The size of the buffer attribute's array buffer does not match the original size. Resizing buffer attributes is not supported.");!function(e,n,r){const o=n.array,l=n.updateRanges;if(t.bindBuffer(r,e),0===l.length)t.bufferSubData(r,0,o);else{l.sort(((a,b)=>a.start-b.start));let e=0;for(let i=1;i<l.length;i++){const t=l[e],n=l[i];n.start<=t.start+t.count+1?t.count=Math.max(t.count,n.start+n.count-t.start):(++e,l[e]=n)}l.length=e+1;for(let i=0,e=l.length;i<e;i++){const e=l[i];t.bufferSubData(r,e.start*o.BYTES_PER_ELEMENT,o,e.start,e.count)}n.clearUpdateRanges()}n.onUploadCallback()}(data.buffer,n,r),data.version=n.version}}}}class Aa extends Gs{constructor(t=1,e=1,n=1,r=1){super(),this.type="PlaneGeometry",this.parameters={width:t,height:e,widthSegments:n,heightSegments:r};const o=t/2,l=e/2,c=Math.floor(n),h=Math.floor(r),d=c+1,f=h+1,m=t/c,_=e/h,v=[],x=[],y=[],M=[];for(let t=0;t<f;t++){const e=t*_-l;for(let n=0;n<d;n++){const r=n*m-o;x.push(r,-e,0),y.push(0,0,1),M.push(n/c),M.push(1-t/h)}}for(let t=0;t<h;t++)for(let e=0;e<c;e++){const a=e+d*t,b=e+d*(t+1),n=e+1+d*(t+1),r=e+1+d*t;v.push(a,b,r),v.push(b,n,r)}this.setIndex(v),this.setAttribute("position",new Ns(x,3)),this.setAttribute("normal",new Ns(y,3)),this.setAttribute("uv",new Ns(M,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new Aa(data.width,data.height,data.widthSegments,data.heightSegments)}}const Ca={alphahash_fragment:"#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif",alphahash_pars_fragment:"#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif",alphamap_fragment:"#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif",alphamap_pars_fragment:"#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",alphatest_fragment:"#ifdef USE_ALPHATEST\n\t#ifdef ALPHA_TO_COVERAGE\n\tdiffuseColor.a = smoothstep( alphaTest, alphaTest + fwidth( diffuseColor.a ), diffuseColor.a );\n\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\tif ( diffuseColor.a < alphaTest ) discard;\n\t#endif\n#endif",alphatest_pars_fragment:"#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif",aomap_fragment:"#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_CLEARCOAT ) \n\t\tclearcoatSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_SHEEN ) \n\t\tsheenSpecularIndirect *= ambientOcclusion;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometryNormal, geometryViewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif",aomap_pars_fragment:"#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif",batching_pars_vertex:"#ifdef USE_BATCHING\n\t#if ! defined( GL_ANGLE_multi_draw )\n\t#define gl_DrawID _gl_DrawID\n\tuniform int _gl_DrawID;\n\t#endif\n\tuniform highp sampler2D batchingTexture;\n\tuniform highp usampler2D batchingIdTexture;\n\tmat4 getBatchingMatrix( const in float i ) {\n\t\tint size = textureSize( batchingTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( batchingTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( batchingTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( batchingTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( batchingTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n\tfloat getIndirectIndex( const in int i ) {\n\t\tint size = textureSize( batchingIdTexture, 0 ).x;\n\t\tint x = i % size;\n\t\tint y = i / size;\n\t\treturn float( texelFetch( batchingIdTexture, ivec2( x, y ), 0 ).r );\n\t}\n#endif\n#ifdef USE_BATCHING_COLOR\n\tuniform sampler2D batchingColorTexture;\n\tvec3 getBatchingColor( const in float i ) {\n\t\tint size = textureSize( batchingColorTexture, 0 ).x;\n\t\tint j = int( i );\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\treturn texelFetch( batchingColorTexture, ivec2( x, y ), 0 ).rgb;\n\t}\n#endif",batching_vertex:"#ifdef USE_BATCHING\n\tmat4 batchingMatrix = getBatchingMatrix( getIndirectIndex( gl_DrawID ) );\n#endif",begin_vertex:"vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif",beginnormal_vertex:"vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif",bsdfs:"float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated",iridescence_fragment:"#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = normalize( dFdx( surf_pos.xyz ) );\n\t\tvec3 vSigmaY = normalize( dFdy( surf_pos.xyz ) );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif",clipping_planes_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#ifdef ALPHA_TO_COVERAGE\n\t\tfloat distanceToPlane, distanceGradient;\n\t\tfloat clipOpacity = 1.0;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\tclipOpacity *= smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\tif ( clipOpacity == 0.0 ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tfloat unionClipOpacity = 1.0;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tdistanceToPlane = - dot( vClipPosition, plane.xyz ) + plane.w;\n\t\t\t\tdistanceGradient = fwidth( distanceToPlane ) / 2.0;\n\t\t\t\tunionClipOpacity *= 1.0 - smoothstep( - distanceGradient, distanceGradient, distanceToPlane );\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tclipOpacity *= 1.0 - unionClipOpacity;\n\t\t#endif\n\t\tdiffuseColor.a *= clipOpacity;\n\t\tif ( diffuseColor.a == 0.0 ) discard;\n\t#else\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\t\tbool clipped = true;\n\t\t\t#pragma unroll_loop_start\n\t\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\t\tplane = clippingPlanes[ i ];\n\t\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t\t}\n\t\t\t#pragma unroll_loop_end\n\t\t\tif ( clipped ) discard;\n\t\t#endif\n\t#endif\n#endif",clipping_planes_pars_fragment:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif",clipping_planes_pars_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif",clipping_planes_vertex:"#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif",color_fragment:"#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif",color_pars_fragment:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif",color_pars_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvarying vec3 vColor;\n#endif",color_vertex:"#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR ) || defined( USE_BATCHING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif\n#ifdef USE_BATCHING_COLOR\n\tvec3 batchingColor = getBatchingColor( getIndirectIndex( gl_DrawID ) );\n\tvColor.xyz *= batchingColor.xyz;\n#endif",common:"#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated",cube_uv_reflection_fragment:"#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif",defaultnormal_vertex:"vec3 transformedNormal = objectNormal;\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = objectTangent;\n#endif\n#ifdef USE_BATCHING\n\tmat3 bm = mat3( batchingMatrix );\n\ttransformedNormal /= vec3( dot( bm[ 0 ], bm[ 0 ] ), dot( bm[ 1 ], bm[ 1 ] ), dot( bm[ 2 ], bm[ 2 ] ) );\n\ttransformedNormal = bm * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = bm * transformedTangent;\n\t#endif\n#endif\n#ifdef USE_INSTANCING\n\tmat3 im = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( im[ 0 ], im[ 0 ] ), dot( im[ 1 ], im[ 1 ] ), dot( im[ 2 ], im[ 2 ] ) );\n\ttransformedNormal = im * transformedNormal;\n\t#ifdef USE_TANGENT\n\t\ttransformedTangent = im * transformedTangent;\n\t#endif\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\ttransformedTangent = ( modelViewMatrix * vec4( transformedTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif",displacementmap_pars_vertex:"#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif",displacementmap_vertex:"#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif",emissivemap_fragment:"#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE_EMISSIVE\n\t\temissiveColor = sRGBTransferEOTF( emissiveColor );\n\t#endif\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif",emissivemap_pars_fragment:"#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif",colorspace_fragment:"gl_FragColor = linearToOutputTexel( gl_FragColor );",colorspace_pars_fragment:"vec4 LinearTransferOETF( in vec4 value ) {\n\treturn value;\n}\nvec4 sRGBTransferEOTF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 sRGBTransferOETF( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}",envmap_fragment:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, envMapRotation * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif",envmap_common_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform mat3 envMapRotation;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif",envmap_pars_fragment:"#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif",envmap_pars_vertex:"#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif",envmap_physical_pars_fragment:"#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, envMapRotation * reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif",envmap_vertex:"#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif",fog_vertex:"#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif",fog_pars_vertex:"#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif",fog_fragment:"#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif",fog_pars_fragment:"#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif",gradientmap_pars_fragment:"#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif",lights_lambert_fragment:"LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;",lights_lambert_pars_fragment:"varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert",lights_pars_begin:"uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\n#if defined( USE_LIGHT_PROBES )\n\tuniform vec3 lightProbe[ 9 ];\n#endif\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif ( cutoffDistance > 0.0 ) {\n\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in vec3 geometryPosition, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometryPosition;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif",lights_toon_fragment:"ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;",lights_toon_pars_fragment:"varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometryNormal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon",lights_phong_fragment:"BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;",lights_phong_pars_fragment:"varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometryViewDir, geometryNormal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong",lights_physical_fragment:"PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( nonPerturbedNormal ) ), abs( dFdy( nonPerturbedNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_DISPERSION\n\tmaterial.dispersion = dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tif( material.anisotropy == 0.0 ) {\n\t\tanisotropyV = vec2( 1.0, 0.0 );\n\t} else {\n\t\tanisotropyV /= material.anisotropy;\n\t\tmaterial.anisotropy = saturate( material.anisotropy );\n\t}\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x + tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x - tbn[ 0 ] * anisotropyV.y;\n#endif",lights_physical_pars_fragment:"struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\tfloat dispersion;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecularDirect = vec3( 0.0 );\nvec3 clearcoatSpecularIndirect = vec3( 0.0 );\nvec3 sheenSpecularDirect = vec3( 0.0 );\nvec3 sheenSpecularIndirect = vec3(0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometryNormal;\n\t\tvec3 viewDir = geometryViewDir;\n\t\tvec3 position = geometryPosition;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometryNormal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometryClearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecularDirect += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometryViewDir, geometryClearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularDirect += irradiance * BRDF_Sheen( directLight.direction, geometryViewDir, geometryNormal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometryViewDir, geometryNormal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in vec3 geometryPosition, const in vec3 geometryNormal, const in vec3 geometryViewDir, const in vec3 geometryClearcoatNormal, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecularIndirect += clearcoatRadiance * EnvironmentBRDF( geometryClearcoatNormal, geometryViewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecularIndirect += irradiance * material.sheenColor * IBLSheenBRDF( geometryNormal, geometryViewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometryNormal, geometryViewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}",lights_fragment_begin:"\nvec3 geometryPosition = - vViewPosition;\nvec3 geometryNormal = normal;\nvec3 geometryViewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\nvec3 geometryClearcoatNormal = vec3( 0.0 );\n#ifdef USE_CLEARCOAT\n\tgeometryClearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometryViewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometryPosition, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowIntensity, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometryPosition, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowIntensity, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowIntensity, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\t#if defined( USE_LIGHT_PROBES )\n\t\tirradiance += getLightProbeIrradiance( lightProbe, geometryNormal );\n\t#endif\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometryNormal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif",lights_fragment_maps:"#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometryNormal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometryViewDir, geometryNormal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometryViewDir, geometryNormal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometryViewDir, geometryClearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif",lights_fragment_end:"#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometryPosition, geometryNormal, geometryViewDir, geometryClearcoatNormal, material, reflectedLight );\n#endif",logdepthbuf_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tgl_FragDepth = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif",logdepthbuf_pars_fragment:"#if defined( USE_LOGDEPTHBUF )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_pars_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif",logdepthbuf_vertex:"#ifdef USE_LOGDEPTHBUF\n\tvFragDepth = 1.0 + gl_Position.w;\n\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n#endif",map_fragment:"#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = sRGBTransferEOTF( sampledDiffuseColor );\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif",map_pars_fragment:"#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif",map_particle_fragment:"#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif",map_particle_pars_fragment:"#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif",metalnessmap_fragment:"float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif",metalnessmap_pars_fragment:"#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif",morphinstance_vertex:"#ifdef USE_INSTANCING_MORPH\n\tfloat morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\tfloat morphTargetBaseInfluence = texelFetch( morphTexture, ivec2( 0, gl_InstanceID ), 0 ).r;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tmorphTargetInfluences[i] =  texelFetch( morphTexture, ivec2( i + 1, gl_InstanceID ), 0 ).r;\n\t}\n#endif",morphcolor_vertex:"#if defined( USE_MORPHCOLORS )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n\t#ifndef USE_INSTANCING_MORPH\n\t\tuniform float morphTargetBaseInfluence;\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t#endif\n\tuniform sampler2DArray morphTargetsTexture;\n\tuniform ivec2 morphTargetsTextureSize;\n\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t}\n#endif",morphtarget_vertex:"#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t}\n#endif",normal_fragment_begin:"float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 nonPerturbedNormal = normal;",normal_fragment_maps:"#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif",normal_pars_fragment:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_pars_vertex:"#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif",normal_vertex:"#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif",normalmap_pars_fragment:"#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif",clearcoat_normal_fragment_begin:"#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = nonPerturbedNormal;\n#endif",clearcoat_normal_fragment_maps:"#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif",clearcoat_pars_fragment:"#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif",iridescence_pars_fragment:"#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif",opaque_fragment:"#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );",packing:"vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;const float ShiftRight8 = 1. / 256.;\nconst float Inv255 = 1. / 255.;\nconst vec4 PackFactors = vec4( 1.0, 256.0, 256.0 * 256.0, 256.0 * 256.0 * 256.0 );\nconst vec2 UnpackFactors2 = vec2( UnpackDownscale, 1.0 / PackFactors.g );\nconst vec3 UnpackFactors3 = vec3( UnpackDownscale / PackFactors.rg, 1.0 / PackFactors.b );\nconst vec4 UnpackFactors4 = vec4( UnpackDownscale / PackFactors.rgb, 1.0 / PackFactors.a );\nvec4 packDepthToRGBA( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec4( 0., 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec4( 1., 1., 1., 1. );\n\tfloat vuf;\n\tfloat af = modf( v * PackFactors.a, vuf );\n\tfloat bf = modf( vuf * ShiftRight8, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec4( vuf * Inv255, gf * PackUpscale, bf * PackUpscale, af );\n}\nvec3 packDepthToRGB( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec3( 0., 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec3( 1., 1., 1. );\n\tfloat vuf;\n\tfloat bf = modf( v * PackFactors.b, vuf );\n\tfloat gf = modf( vuf * ShiftRight8, vuf );\n\treturn vec3( vuf * Inv255, gf * PackUpscale, bf );\n}\nvec2 packDepthToRG( const in float v ) {\n\tif( v <= 0.0 )\n\t\treturn vec2( 0., 0. );\n\tif( v >= 1.0 )\n\t\treturn vec2( 1., 1. );\n\tfloat vuf;\n\tfloat gf = modf( v * 256., vuf );\n\treturn vec2( vuf * Inv255, gf );\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors4 );\n}\nfloat unpackRGBToDepth( const in vec3 v ) {\n\treturn dot( v, UnpackFactors3 );\n}\nfloat unpackRGToDepth( const in vec2 v ) {\n\treturn v.r * UnpackFactors2.r + v.g * UnpackFactors2.g;\n}\nvec4 pack2HalfToRGBA( const in vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( const in vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}",premultiplied_alpha_fragment:"#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif",project_vertex:"vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_BATCHING\n\tmvPosition = batchingMatrix * mvPosition;\n#endif\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;",dithering_fragment:"#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif",dithering_pars_fragment:"#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif",roughnessmap_fragment:"float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif",roughnessmap_pars_fragment:"#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif",shadowmap_pars_fragment:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowIntensity, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tfloat shadow = 1.0;\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\t\n\t\tfloat lightToPositionLength = length( lightToPosition );\n\t\tif ( lightToPositionLength - shadowCameraFar <= 0.0 && lightToPositionLength - shadowCameraNear >= 0.0 ) {\n\t\t\tfloat dp = ( lightToPositionLength - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\t\tdp += shadowBias;\n\t\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\t\tshadow = (\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t\t) * ( 1.0 / 9.0 );\n\t\t\t#else\n\t\t\t\tshadow = texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t\t#endif\n\t\t}\n\t\treturn mix( 1.0, shadow, shadowIntensity );\n\t}\n#endif",shadowmap_pars_vertex:"#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowIntensity;\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif",shadowmap_vertex:"#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif",shadowmask_pars_fragment:"float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowIntensity, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowIntensity, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowIntensity, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}",skinbase_vertex:"#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tint size = textureSize( boneTexture, 0 ).x;\n\t\tint j = int( i ) * 4;\n\t\tint x = j % size;\n\t\tint y = j / size;\n\t\tvec4 v1 = texelFetch( boneTexture, ivec2( x, y ), 0 );\n\t\tvec4 v2 = texelFetch( boneTexture, ivec2( x + 1, y ), 0 );\n\t\tvec4 v3 = texelFetch( boneTexture, ivec2( x + 2, y ), 0 );\n\t\tvec4 v4 = texelFetch( boneTexture, ivec2( x + 3, y ), 0 );\n\t\treturn mat4( v1, v2, v3, v4 );\n\t}\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif",skinnormal_vertex:"#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif",specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif",tonemapping_fragment:"#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif",tonemapping_pars_fragment:"#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 CineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nconst mat3 LINEAR_REC2020_TO_LINEAR_SRGB = mat3(\n\tvec3( 1.6605, - 0.1246, - 0.0182 ),\n\tvec3( - 0.5876, 1.1329, - 0.1006 ),\n\tvec3( - 0.0728, - 0.0083, 1.1187 )\n);\nconst mat3 LINEAR_SRGB_TO_LINEAR_REC2020 = mat3(\n\tvec3( 0.6274, 0.0691, 0.0164 ),\n\tvec3( 0.3293, 0.9195, 0.0880 ),\n\tvec3( 0.0433, 0.0113, 0.8956 )\n);\nvec3 agxDefaultContrastApprox( vec3 x ) {\n\tvec3 x2 = x * x;\n\tvec3 x4 = x2 * x2;\n\treturn + 15.5 * x4 * x2\n\t\t- 40.14 * x4 * x\n\t\t+ 31.96 * x4\n\t\t- 6.868 * x2 * x\n\t\t+ 0.4298 * x2\n\t\t+ 0.1191 * x\n\t\t- 0.00232;\n}\nvec3 AgXToneMapping( vec3 color ) {\n\tconst mat3 AgXInsetMatrix = mat3(\n\t\tvec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ),\n\t\tvec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ),\n\t\tvec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 )\n\t);\n\tconst mat3 AgXOutsetMatrix = mat3(\n\t\tvec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ),\n\t\tvec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ),\n\t\tvec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 )\n\t);\n\tconst float AgxMinEv = - 12.47393;\tconst float AgxMaxEv = 4.026069;\n\tcolor *= toneMappingExposure;\n\tcolor = LINEAR_SRGB_TO_LINEAR_REC2020 * color;\n\tcolor = AgXInsetMatrix * color;\n\tcolor = max( color, 1e-10 );\tcolor = log2( color );\n\tcolor = ( color - AgxMinEv ) / ( AgxMaxEv - AgxMinEv );\n\tcolor = clamp( color, 0.0, 1.0 );\n\tcolor = agxDefaultContrastApprox( color );\n\tcolor = AgXOutsetMatrix * color;\n\tcolor = pow( max( vec3( 0.0 ), color ), vec3( 2.2 ) );\n\tcolor = LINEAR_REC2020_TO_LINEAR_SRGB * color;\n\tcolor = clamp( color, 0.0, 1.0 );\n\treturn color;\n}\nvec3 NeutralToneMapping( vec3 color ) {\n\tconst float StartCompression = 0.8 - 0.04;\n\tconst float Desaturation = 0.15;\n\tcolor *= toneMappingExposure;\n\tfloat x = min( color.r, min( color.g, color.b ) );\n\tfloat offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\n\tcolor -= offset;\n\tfloat peak = max( color.r, max( color.g, color.b ) );\n\tif ( peak < StartCompression ) return color;\n\tfloat d = 1. - StartCompression;\n\tfloat newPeak = 1. - d * d / ( peak + d - StartCompression );\n\tcolor *= newPeak / peak;\n\tfloat g = 1. - 1. / ( Desaturation * ( peak - newPeak ) + 1. );\n\treturn mix( color, vec3( newPeak ), g );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }",transmission_fragment:"#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.dispersion, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif",transmission_pars_fragment:"#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float dispersion, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec4 transmittedLight;\n\t\tvec3 transmittance;\n\t\t#ifdef USE_DISPERSION\n\t\t\tfloat halfSpread = ( ior - 1.0 ) * 0.025 * dispersion;\n\t\t\tvec3 iors = vec3( ior - halfSpread, ior, ior + halfSpread );\n\t\t\tfor ( int i = 0; i < 3; i ++ ) {\n\t\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, iors[ i ], modelMatrix );\n\t\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\n\t\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\t\trefractionCoords += 1.0;\n\t\t\t\trefractionCoords /= 2.0;\n\t\t\n\t\t\t\tvec4 transmissionSample = getTransmissionSample( refractionCoords, roughness, iors[ i ] );\n\t\t\t\ttransmittedLight[ i ] = transmissionSample[ i ];\n\t\t\t\ttransmittedLight.a += transmissionSample.a;\n\t\t\t\ttransmittance[ i ] = diffuseColor[ i ] * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance )[ i ];\n\t\t\t}\n\t\t\ttransmittedLight.a /= 3.0;\n\t\t\n\t\t#else\n\t\t\n\t\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\t\trefractionCoords += 1.0;\n\t\t\trefractionCoords /= 2.0;\n\t\t\ttransmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\t\ttransmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\t\n\t\t#endif\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif",uv_pars_fragment:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_pars_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif",uv_vertex:"#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_BATCHING\n\t\tworldPosition = batchingMatrix * worldPosition;\n\t#endif\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif",background_vert:"varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}",background_frag:"uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",backgroundCube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",backgroundCube_frag:"#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nuniform mat3 backgroundRotation;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, backgroundRotation * vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, backgroundRotation * vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",cube_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}",cube_frag:"uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",depth_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}",depth_frag:"#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#elif DEPTH_PACKING == 3202\n\t\tgl_FragColor = vec4( packDepthToRGB( fragCoordZ ), 1.0 );\n\t#elif DEPTH_PACKING == 3203\n\t\tgl_FragColor = vec4( packDepthToRG( fragCoordZ ), 0.0, 1.0 );\n\t#endif\n}",distanceRGBA_vert:"#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <skinbase_vertex>\n\t#include <morphinstance_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}",distanceRGBA_frag:"#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <clipping_planes_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}",equirect_vert:"varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}",equirect_frag:"uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}",linedashed_vert:"uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",linedashed_frag:"uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",meshbasic_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}",meshbasic_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshlambert_vert:"#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshlambert_frag:"#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshmatcap_vert:"#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}",meshmatcap_frag:"#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshnormal_vert:"#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}",meshnormal_frag:"#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( 0.0, 0.0, 0.0, opacity );\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), diffuseColor.a );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}",meshphong_vert:"#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshphong_frag:"#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshphysical_vert:"#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}",meshphysical_frag:"#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_DISPERSION\n\tuniform float dispersion;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",meshtoon_vert:"#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <batching_pars_vertex>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",meshtoon_frag:"#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}",points_vert:"uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}",points_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}",shadow_vert:"#include <common>\n#include <batching_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <batching_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphinstance_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}",shadow_frag:"uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}",sprite_vert:"uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix[ 3 ];\n\tvec2 scale = vec2( length( modelMatrix[ 0 ].xyz ), length( modelMatrix[ 1 ].xyz ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}",sprite_frag:"uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}"},Ra={common:{diffuse:{value:new fs(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new ui},alphaMap:{value:null},alphaMapTransform:{value:new ui},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new ui}},envmap:{envMap:{value:null},envMapRotation:{value:new ui},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new ui}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new ui}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new ui},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new ui},normalScale:{value:new hi(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new ui},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new ui}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new ui}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new ui}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new fs(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new fs(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new ui},alphaTest:{value:0},uvTransform:{value:new ui}},sprite:{diffuse:{value:new fs(16777215)},opacity:{value:1},center:{value:new hi(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new ui},alphaMap:{value:null},alphaMapTransform:{value:new ui},alphaTest:{value:0}}},Pa={basic:{uniforms:sa([Ra.common,Ra.specularmap,Ra.envmap,Ra.aomap,Ra.lightmap,Ra.fog]),vertexShader:Ca.meshbasic_vert,fragmentShader:Ca.meshbasic_frag},lambert:{uniforms:sa([Ra.common,Ra.specularmap,Ra.envmap,Ra.aomap,Ra.lightmap,Ra.emissivemap,Ra.bumpmap,Ra.normalmap,Ra.displacementmap,Ra.fog,Ra.lights,{emissive:{value:new fs(0)}}]),vertexShader:Ca.meshlambert_vert,fragmentShader:Ca.meshlambert_frag},phong:{uniforms:sa([Ra.common,Ra.specularmap,Ra.envmap,Ra.aomap,Ra.lightmap,Ra.emissivemap,Ra.bumpmap,Ra.normalmap,Ra.displacementmap,Ra.fog,Ra.lights,{emissive:{value:new fs(0)},specular:{value:new fs(1118481)},shininess:{value:30}}]),vertexShader:Ca.meshphong_vert,fragmentShader:Ca.meshphong_frag},standard:{uniforms:sa([Ra.common,Ra.envmap,Ra.aomap,Ra.lightmap,Ra.emissivemap,Ra.bumpmap,Ra.normalmap,Ra.displacementmap,Ra.roughnessmap,Ra.metalnessmap,Ra.fog,Ra.lights,{emissive:{value:new fs(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}]),vertexShader:Ca.meshphysical_vert,fragmentShader:Ca.meshphysical_frag},toon:{uniforms:sa([Ra.common,Ra.aomap,Ra.lightmap,Ra.emissivemap,Ra.bumpmap,Ra.normalmap,Ra.displacementmap,Ra.gradientmap,Ra.fog,Ra.lights,{emissive:{value:new fs(0)}}]),vertexShader:Ca.meshtoon_vert,fragmentShader:Ca.meshtoon_frag},matcap:{uniforms:sa([Ra.common,Ra.bumpmap,Ra.normalmap,Ra.displacementmap,Ra.fog,{matcap:{value:null}}]),vertexShader:Ca.meshmatcap_vert,fragmentShader:Ca.meshmatcap_frag},points:{uniforms:sa([Ra.points,Ra.fog]),vertexShader:Ca.points_vert,fragmentShader:Ca.points_frag},dashed:{uniforms:sa([Ra.common,Ra.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}]),vertexShader:Ca.linedashed_vert,fragmentShader:Ca.linedashed_frag},depth:{uniforms:sa([Ra.common,Ra.displacementmap]),vertexShader:Ca.depth_vert,fragmentShader:Ca.depth_frag},normal:{uniforms:sa([Ra.common,Ra.bumpmap,Ra.normalmap,Ra.displacementmap,{opacity:{value:1}}]),vertexShader:Ca.meshnormal_vert,fragmentShader:Ca.meshnormal_frag},sprite:{uniforms:sa([Ra.sprite,Ra.fog]),vertexShader:Ca.sprite_vert,fragmentShader:Ca.sprite_frag},background:{uniforms:{uvTransform:{value:new ui},t2D:{value:null},backgroundIntensity:{value:1}},vertexShader:Ca.background_vert,fragmentShader:Ca.background_frag},backgroundCube:{uniforms:{envMap:{value:null},flipEnvMap:{value:-1},backgroundBlurriness:{value:0},backgroundIntensity:{value:1},backgroundRotation:{value:new ui}},vertexShader:Ca.backgroundCube_vert,fragmentShader:Ca.backgroundCube_frag},cube:{uniforms:{tCube:{value:null},tFlip:{value:-1},opacity:{value:1}},vertexShader:Ca.cube_vert,fragmentShader:Ca.cube_frag},equirect:{uniforms:{tEquirect:{value:null}},vertexShader:Ca.equirect_vert,fragmentShader:Ca.equirect_frag},distanceRGBA:{uniforms:sa([Ra.common,Ra.displacementmap,{referencePosition:{value:new Gi},nearDistance:{value:1},farDistance:{value:1e3}}]),vertexShader:Ca.distanceRGBA_vert,fragmentShader:Ca.distanceRGBA_frag},shadow:{uniforms:sa([Ra.lights,Ra.fog,{color:{value:new fs(0)},opacity:{value:1}}]),vertexShader:Ca.shadow_vert,fragmentShader:Ca.shadow_frag}};Pa.physical={uniforms:sa([Pa.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new ui},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new ui},clearcoatNormalScale:{value:new hi(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new ui},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new ui},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new ui},sheen:{value:0},sheenColor:{value:new fs(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new ui},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new ui},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new ui},transmissionSamplerSize:{value:new hi},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new ui},attenuationDistance:{value:0},attenuationColor:{value:new fs(0)},specularColor:{value:new fs(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new ui},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new ui},anisotropyVector:{value:new hi},anisotropyMap:{value:null},anisotropyMapTransform:{value:new ui}}]),vertexShader:Ca.meshphysical_vert,fragmentShader:Ca.meshphysical_frag};const Ia={r:0,b:0,g:0},La=new Lr,Ua=new Mr;function Da(t,e,n,r,o,l,c){const h=new fs(0);let d,f,m=!0===l?0:1,_=null,v=0,x=null;function S(t){let r=!0===t.isScene?t.background:null;if(r&&r.isTexture){r=(t.backgroundBlurriness>0?n:e).get(r)}return r}function T(e,n){e.getRGB(Ia,aa(t)),r.buffers.color.setClear(Ia.r,Ia.g,Ia.b,n,c)}return{getClearColor:function(){return h},setClearColor:function(t,e=1){h.set(t),m=e,T(h,m)},getClearAlpha:function(){return m},setClearAlpha:function(t){m=t,T(h,m)},render:function(e){let n=!1;const o=S(e);null===o?T(h,m):o&&o.isColor&&(T(o,1),n=!0);const l=t.xr.getEnvironmentBlendMode();"additive"===l?r.buffers.color.setClear(0,0,0,1,c):"alpha-blend"===l&&r.buffers.color.setClear(0,0,0,0,c),(t.autoClear||n)&&(r.buffers.depth.setTest(!0),r.buffers.depth.setMask(!0),r.buffers.color.setMask(!0),t.clear(t.autoClearColor,t.autoClearDepth,t.autoClearStencil))},addToRenderList:function(e,n){const r=S(n);r&&(r.isCubeTexture||r.mapping===wt)?(void 0===f&&(f=new ea(new ia(1,1,1),new la({name:"BackgroundCubeMaterial",uniforms:ra(Pa.backgroundCube.uniforms),vertexShader:Pa.backgroundCube.vertexShader,fragmentShader:Pa.backgroundCube.fragmentShader,side:M,depthTest:!1,depthWrite:!1,fog:!1})),f.geometry.deleteAttribute("normal"),f.geometry.deleteAttribute("uv"),f.onBeforeRender=function(t,e,n){this.matrixWorld.copyPosition(n.matrixWorld)},Object.defineProperty(f.material,"envMap",{get:function(){return this.uniforms.envMap.value}}),o.update(f)),La.copy(n.backgroundRotation),La.x*=-1,La.y*=-1,La.z*=-1,r.isCubeTexture&&!1===r.isRenderTargetTexture&&(La.y*=-1,La.z*=-1),f.material.uniforms.envMap.value=r,f.material.uniforms.flipEnvMap.value=r.isCubeTexture&&!1===r.isRenderTargetTexture?-1:1,f.material.uniforms.backgroundBlurriness.value=n.backgroundBlurriness,f.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,f.material.uniforms.backgroundRotation.value.setFromMatrix4(Ua.makeRotationFromEuler(La)),f.material.toneMapped=yi.getTransfer(r.colorSpace)!==pn,_===r&&v===r.version&&x===t.toneMapping||(f.material.needsUpdate=!0,_=r,v=r.version,x=t.toneMapping),f.layers.enableAll(),e.unshift(f,f.geometry,f.material,0,0,null)):r&&r.isTexture&&(void 0===d&&(d=new ea(new Aa(2,2),new la({name:"BackgroundMaterial",uniforms:ra(Pa.background.uniforms),vertexShader:Pa.background.vertexShader,fragmentShader:Pa.background.fragmentShader,side:y,depthTest:!1,depthWrite:!1,fog:!1})),d.geometry.deleteAttribute("normal"),Object.defineProperty(d.material,"map",{get:function(){return this.uniforms.t2D.value}}),o.update(d)),d.material.uniforms.t2D.value=r,d.material.uniforms.backgroundIntensity.value=n.backgroundIntensity,d.material.toneMapped=yi.getTransfer(r.colorSpace)!==pn,!0===r.matrixAutoUpdate&&r.updateMatrix(),d.material.uniforms.uvTransform.value.copy(r.matrix),_===r&&v===r.version&&x===t.toneMapping||(d.material.needsUpdate=!0,_=r,v=r.version,x=t.toneMapping),d.layers.enableAll(),e.unshift(d,d.geometry,d.material,0,0,null))}}}function Na(t,e){const n=t.getParameter(t.MAX_VERTEX_ATTRIBS),r={},o=f(null);let l=o,c=!1;function h(e){return t.bindVertexArray(e)}function d(e){return t.deleteVertexArray(e)}function f(t){const e=[],r=[],o=[];for(let i=0;i<n;i++)e[i]=0,r[i]=0,o[i]=0;return{geometry:null,program:null,wireframe:!1,newAttributes:e,enabledAttributes:r,attributeDivisors:o,object:t,attributes:{},index:null}}function m(){const t=l.newAttributes;for(let i=0,e=t.length;i<e;i++)t[i]=0}function _(t){v(t,0)}function v(e,n){const r=l.newAttributes,o=l.enabledAttributes,c=l.attributeDivisors;r[e]=1,0===o[e]&&(t.enableVertexAttribArray(e),o[e]=1),c[e]!==n&&(t.vertexAttribDivisor(e,n),c[e]=n)}function x(){const e=l.newAttributes,n=l.enabledAttributes;for(let i=0,r=n.length;i<r;i++)n[i]!==e[i]&&(t.disableVertexAttribArray(i),n[i]=0)}function y(e,n,r,o,l,c,h){!0===h?t.vertexAttribIPointer(e,n,r,l,c):t.vertexAttribPointer(e,n,r,o,l,c)}function M(){S(),c=!0,l!==o&&(l=o,h(l.object))}function S(){o.geometry=null,o.program=null,o.wireframe=!1}return{setup:function(object,n,o,d,M){let S=!1;const T=function(e,n,o){const l=!0===o.wireframe;let c=r[e.id];void 0===c&&(c={},r[e.id]=c);let h=c[n.id];void 0===h&&(h={},c[n.id]=h);let d=h[l];void 0===d&&(d=f(t.createVertexArray()),h[l]=d);return d}(d,o,n);l!==T&&(l=T,h(l.object)),S=function(object,t,e,n){const r=l.attributes,o=t.attributes;let c=0;const h=e.getAttributes();for(const t in h){if(h[t].location>=0){const e=r[t];let n=o[t];if(void 0===n&&("instanceMatrix"===t&&object.instanceMatrix&&(n=object.instanceMatrix),"instanceColor"===t&&object.instanceColor&&(n=object.instanceColor)),void 0===e)return!0;if(e.attribute!==n)return!0;if(n&&e.data!==n.data)return!0;c++}}return l.attributesNum!==c||l.index!==n}(object,d,o,M),S&&function(object,t,e,n){const r={},o=t.attributes;let c=0;const h=e.getAttributes();for(const t in h){if(h[t].location>=0){let e=o[t];void 0===e&&("instanceMatrix"===t&&object.instanceMatrix&&(e=object.instanceMatrix),"instanceColor"===t&&object.instanceColor&&(e=object.instanceColor));const data={};data.attribute=e,e&&e.data&&(data.data=e.data),r[t]=data,c++}}l.attributes=r,l.attributesNum=c,l.index=n}(object,d,o,M),null!==M&&e.update(M,t.ELEMENT_ARRAY_BUFFER),(S||c)&&(c=!1,function(object,n,r,o){m();const l=o.attributes,c=r.getAttributes(),h=n.defaultAttributeValues;for(const n in c){const r=c[n];if(r.location>=0){let c=l[n];if(void 0===c&&("instanceMatrix"===n&&object.instanceMatrix&&(c=object.instanceMatrix),"instanceColor"===n&&object.instanceColor&&(c=object.instanceColor)),void 0!==c){const n=c.normalized,l=c.itemSize,h=e.get(c);if(void 0===h)continue;const d=h.buffer,f=h.type,m=h.bytesPerElement,x=f===t.INT||f===t.UNSIGNED_INT||c.gpuType===Gt;if(c.isInterleavedBufferAttribute){const data=c.data,e=data.stride,h=c.offset;if(data.isInstancedInterleavedBuffer){for(let i=0;i<r.locationSize;i++)v(r.location+i,data.meshPerAttribute);!0!==object.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=data.meshPerAttribute*data.count)}else for(let i=0;i<r.locationSize;i++)_(r.location+i);t.bindBuffer(t.ARRAY_BUFFER,d);for(let i=0;i<r.locationSize;i++)y(r.location+i,l/r.locationSize,f,n,e*m,(h+l/r.locationSize*i)*m,x)}else{if(c.isInstancedBufferAttribute){for(let i=0;i<r.locationSize;i++)v(r.location+i,c.meshPerAttribute);!0!==object.isInstancedMesh&&void 0===o._maxInstanceCount&&(o._maxInstanceCount=c.meshPerAttribute*c.count)}else for(let i=0;i<r.locationSize;i++)_(r.location+i);t.bindBuffer(t.ARRAY_BUFFER,d);for(let i=0;i<r.locationSize;i++)y(r.location+i,l/r.locationSize,f,n,l*m,l/r.locationSize*i*m,x)}}else if(void 0!==h){const e=h[n];if(void 0!==e)switch(e.length){case 2:t.vertexAttrib2fv(r.location,e);break;case 3:t.vertexAttrib3fv(r.location,e);break;case 4:t.vertexAttrib4fv(r.location,e);break;default:t.vertexAttrib1fv(r.location,e)}}}}x()}(object,n,o,d),null!==M&&t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,e.get(M).buffer))},reset:M,resetDefaultState:S,dispose:function(){M();for(const t in r){const e=r[t];for(const t in e){const n=e[t];for(const t in n)d(n[t].object),delete n[t];delete e[t]}delete r[t]}},releaseStatesOfGeometry:function(t){if(void 0===r[t.id])return;const e=r[t.id];for(const t in e){const n=e[t];for(const t in n)d(n[t].object),delete n[t];delete e[t]}delete r[t.id]},releaseStatesOfProgram:function(t){for(const e in r){const n=r[e];if(void 0===n[t.id])continue;const o=n[t.id];for(const t in o)d(o[t].object),delete o[t];delete n[t.id]}},initAttributes:m,enableAttribute:_,disableUnusedAttributes:x}}function Oa(t,e,n){let r;function o(e,o,l){0!==l&&(t.drawArraysInstanced(r,e,o,l),n.update(o,r,l))}this.setMode=function(t){r=t},this.render=function(e,o){t.drawArrays(r,e,o),n.update(o,r,1)},this.renderInstances=o,this.renderMultiDraw=function(t,o,l){if(0===l)return;e.get("WEBGL_multi_draw").multiDrawArraysWEBGL(r,t,0,o,0,l);let c=0;for(let i=0;i<l;i++)c+=o[i];n.update(c,r,1)},this.renderMultiDrawInstances=function(t,l,c,h){if(0===c)return;const d=e.get("WEBGL_multi_draw");if(null===d)for(let i=0;i<t.length;i++)o(t[i],l[i],h[i]);else{d.multiDrawArraysInstancedWEBGL(r,t,0,l,0,h,0,c);let e=0;for(let i=0;i<c;i++)e+=l[i]*h[i];n.update(e,r,1)}}}function Fa(t,e,n,r){let o;function l(e){if("highp"===e){if(t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.HIGH_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.HIGH_FLOAT).precision>0)return"highp";e="mediump"}return"mediump"===e&&t.getShaderPrecisionFormat(t.VERTEX_SHADER,t.MEDIUM_FLOAT).precision>0&&t.getShaderPrecisionFormat(t.FRAGMENT_SHADER,t.MEDIUM_FLOAT).precision>0?"mediump":"lowp"}let c=void 0!==n.precision?n.precision:"highp";const h=l(c);h!==c&&(console.warn("THREE.WebGLRenderer:",c,"not supported, using",h,"instead."),c=h);const d=!0===n.logarithmicDepthBuffer,f=!0===n.reverseDepthBuffer&&e.has("EXT_clip_control"),m=t.getParameter(t.MAX_TEXTURE_IMAGE_UNITS),_=t.getParameter(t.MAX_VERTEX_TEXTURE_IMAGE_UNITS);return{isWebGL2:!0,getMaxAnisotropy:function(){if(void 0!==o)return o;if(!0===e.has("EXT_texture_filter_anisotropic")){const n=e.get("EXT_texture_filter_anisotropic");o=t.getParameter(n.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else o=0;return o},getMaxPrecision:l,textureFormatReadable:function(e){return e===Qt||r.convert(e)===t.getParameter(t.IMPLEMENTATION_COLOR_READ_FORMAT)},textureTypeReadable:function(n){const o=n===jt&&(e.has("EXT_color_buffer_half_float")||e.has("EXT_color_buffer_float"));return!(n!==zt&&r.convert(n)!==t.getParameter(t.IMPLEMENTATION_COLOR_READ_TYPE)&&n!==Xt&&!o)},precision:c,logarithmicDepthBuffer:d,reverseDepthBuffer:f,maxTextures:m,maxVertexTextures:_,maxTextureSize:t.getParameter(t.MAX_TEXTURE_SIZE),maxCubemapSize:t.getParameter(t.MAX_CUBE_MAP_TEXTURE_SIZE),maxAttributes:t.getParameter(t.MAX_VERTEX_ATTRIBS),maxVertexUniforms:t.getParameter(t.MAX_VERTEX_UNIFORM_VECTORS),maxVaryings:t.getParameter(t.MAX_VARYING_VECTORS),maxFragmentUniforms:t.getParameter(t.MAX_FRAGMENT_UNIFORM_VECTORS),vertexTextures:_>0,maxSamples:t.getParameter(t.MAX_SAMPLES)}}function Ba(t){const e=this;let n=null,r=0,o=!1,l=!1;const c=new Ma,h=new ui,d={value:null,needsUpdate:!1};function f(t,n,r,o){const l=null!==t?t.length:0;let f=null;if(0!==l){if(f=d.value,!0!==o||null===f){const e=r+4*l,o=n.matrixWorldInverse;h.getNormalMatrix(o),(null===f||f.length<e)&&(f=new Float32Array(e));for(let i=0,e=r;i!==l;++i,e+=4)c.copy(t[i]).applyMatrix4(o,h),c.normal.toArray(f,e),f[e+3]=c.constant}d.value=f,d.needsUpdate=!0}return e.numPlanes=l,e.numIntersection=0,f}this.uniform=d,this.numPlanes=0,this.numIntersection=0,this.init=function(t,e){const n=0!==t.length||e||0!==r||o;return o=e,r=t.length,n},this.beginShadows=function(){l=!0,f(null)},this.endShadows=function(){l=!1},this.setGlobalState=function(t,e){n=f(t,e,0)},this.setState=function(c,h,m){const _=c.clippingPlanes,v=c.clipIntersection,x=c.clipShadows,y=t.get(c);if(!o||null===_||0===_.length||l&&!x)l?f(null):function(){d.value!==n&&(d.value=n,d.needsUpdate=r>0);e.numPlanes=r,e.numIntersection=0}();else{const t=l?0:r,e=4*t;let o=y.clippingState||null;d.value=o,o=f(_,h,e,m);for(let i=0;i!==e;++i)o[i]=n[i];y.clippingState=o,this.numIntersection=v?this.numPlanes:0,this.numPlanes+=t}}}function za(t){let e=new WeakMap;function n(t,e){return e===bt?t.mapping=Mt:e===Tt&&(t.mapping=St),t}function r(t){const n=t.target;n.removeEventListener("dispose",r);const o=e.get(n);void 0!==o&&(e.delete(n),o.dispose())}return{get:function(o){if(o&&o.isTexture){const l=o.mapping;if(l===bt||l===Tt){if(e.has(o)){return n(e.get(o).texture,o.mapping)}{const image=o.image;if(image&&image.height>0){const l=new _a(image.height);return l.fromEquirectangularTexture(t,o),e.set(o,l),o.addEventListener("dispose",r),n(l.texture,o.mapping)}return null}}}return o},dispose:function(){e=new WeakMap}}}class ka extends ca{constructor(t=-1,e=1,n=1,r=-1,o=.1,l=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=e,this.top=n,this.bottom=r,this.near=o,this.far=l,this.updateProjectionMatrix()}copy(source,t){return super.copy(source,t),this.left=source.left,this.right=source.right,this.top=source.top,this.bottom=source.bottom,this.near=source.near,this.far=source.far,this.zoom=source.zoom,this.view=null===source.view?null:Object.assign({},source.view),this}setViewOffset(t,e,n,r,o,l){null===this.view&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=e,this.view.offsetX=n,this.view.offsetY=r,this.view.width=o,this.view.height=l,this.updateProjectionMatrix()}clearViewOffset(){null!==this.view&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),e=(this.top-this.bottom)/(2*this.zoom),n=(this.right+this.left)/2,r=(this.top+this.bottom)/2;let o=n-t,l=n+t,c=r+e,h=r-e;if(null!==this.view&&this.view.enabled){const t=(this.right-this.left)/this.view.fullWidth/this.zoom,e=(this.top-this.bottom)/this.view.fullHeight/this.zoom;o+=t*this.view.offsetX,l=o+t*this.view.width,c-=e*this.view.offsetY,h=c-e*this.view.height}this.projectionMatrix.makeOrthographic(o,l,c,h,this.near,this.far,this.coordinateSystem),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(meta){const data=super.toJSON(meta);return data.object.zoom=this.zoom,data.object.left=this.left,data.object.right=this.right,data.object.top=this.top,data.object.bottom=this.bottom,data.object.near=this.near,data.object.far=this.far,null!==this.view&&(data.object.view=Object.assign({},this.view)),data}}const Va=[.125,.215,.35,.446,.526,.582],Ha=20,Ga=new ka,Wa=new fs;let Xa=null,ja=0,qa=0,Ya=!1;const Za=(1+Math.sqrt(5))/2,Ja=1/Za,Ka=[new Gi(-Za,Ja,0),new Gi(Za,Ja,0),new Gi(-Ja,0,Za),new Gi(Ja,0,Za),new Gi(0,Za,-Ja),new Gi(0,Za,Ja),new Gi(-1,1,-1),new Gi(1,1,-1),new Gi(-1,1,1),new Gi(1,1,1)];class $a{constructor(t){this._renderer=t,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._compileMaterial(this._blurMaterial)}fromScene(t,e=0,n=.1,r=100){Xa=this._renderer.getRenderTarget(),ja=this._renderer.getActiveCubeFace(),qa=this._renderer.getActiveMipmapLevel(),Ya=this._renderer.xr.enabled,this._renderer.xr.enabled=!1,this._setSize(256);const o=this._allocateTargets();return o.depthBuffer=!0,this._sceneToCubeUV(t,n,r,o),e>0&&this._blur(o,0,0,e),this._applyPMREM(o),this._cleanup(o),o}fromEquirectangular(t,e=null){return this._fromTexture(t,e)}fromCubemap(t,e=null){return this._fromTexture(t,e)}compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=no(),this._compileMaterial(this._cubemapMaterial))}compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=eo(),this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose()}_setSize(t){this._lodMax=Math.floor(Math.log2(t)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let i=0;i<this._lodPlanes.length;i++)this._lodPlanes[i].dispose()}_cleanup(t){this._renderer.setRenderTarget(Xa,ja,qa),this._renderer.xr.enabled=Ya,t.scissorTest=!1,to(t,0,0,t.width,t.height)}_fromTexture(t,e){t.mapping===Mt||t.mapping===St?this._setSize(0===t.image.length?16:t.image[0].width||t.image[0].image.width):this._setSize(t.image.width/4),Xa=this._renderer.getRenderTarget(),ja=this._renderer.getActiveCubeFace(),qa=this._renderer.getActiveMipmapLevel(),Ya=this._renderer.xr.enabled,this._renderer.xr.enabled=!1;const n=e||this._allocateTargets();return this._textureToCubeUV(t,n),this._applyPMREM(n),this._cleanup(n),n}_allocateTargets(){const t=3*Math.max(this._cubeSize,112),e=4*this._cubeSize,n={magFilter:Dt,minFilter:Dt,generateMipmaps:!1,type:jt,format:Qt,colorSpace:un,depthBuffer:!1},r=Qa(t,e,n);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==t||this._pingPongRenderTarget.height!==e){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Qa(t,e,n);const{_lodMax:r}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas}=function(t){const e=[],n=[],r=[];let o=t;const l=t-4+1+Va.length;for(let i=0;i<l;i++){const l=Math.pow(2,o);n.push(l);let c=1/l;i>t-4?c=Va[i-t+4-1]:0===i&&(c=0),r.push(c);const h=1/(l-2),d=-h,f=1+h,m=[d,d,f,d,f,f,d,d,f,f,d,f],_=6,v=6,x=3,y=2,M=1,S=new Float32Array(x*v*_),T=new Float32Array(y*v*_),w=new Float32Array(M*v*_);for(let t=0;t<_;t++){const e=t%3*2/3-1,n=t>2?0:-1,r=[e,n,0,e+2/3,n,0,e+2/3,n+1,0,e,n,0,e+2/3,n+1,0,e,n+1,0];S.set(r,x*v*t),T.set(m,y*v*t);const o=[t,t,t,t,t,t];w.set(o,M*v*t)}const E=new Gs;E.setAttribute("position",new Es(S,x)),E.setAttribute("uv",new Es(T,y)),E.setAttribute("faceIndex",new Es(w,M)),e.push(E),o>4&&o--}return{lodPlanes:e,sizeLods:n,sigmas:r}}(r)),this._blurMaterial=function(t,e,n){const r=new Float32Array(Ha),o=new Gi(0,1,0),l=new la({name:"SphericalGaussianBlur",defines:{n:Ha,CUBEUV_TEXEL_WIDTH:1/e,CUBEUV_TEXEL_HEIGHT:1/n,CUBEUV_MAX_MIP:`${t}.0`},uniforms:{envMap:{value:null},samples:{value:1},weights:{value:r},latitudinal:{value:!1},dTheta:{value:0},mipInt:{value:0},poleAxis:{value:o}},vertexShader:io(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include <cube_uv_reflection_fragment>\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta = cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection = vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis = normalize( axis );\n\n\t\t\t\tgl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i = 1; i < n; i++ ) {\n\n\t\t\t\t\tif ( i >= samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta = dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb += weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t}\n\t\t",blending:T,depthTest:!1,depthWrite:!1});return l}(r,t,e)}return r}_compileMaterial(t){const e=new ea(this._lodPlanes[0],t);this._renderer.compile(e,Ga)}_sceneToCubeUV(t,e,n,r){const o=new pa(90,1,e,n),l=[1,-1,1,1,1,1],c=[1,1,1,-1,-1,-1],h=this._renderer,d=h.autoClear,f=h.toneMapping;h.getClearColor(Wa),h.toneMapping=ct,h.autoClear=!1;const m=new vs({name:"PMREM.Background",side:M,depthWrite:!1,depthTest:!1}),_=new ea(new ia,m);let v=!1;const x=t.background;x?x.isColor&&(m.color.copy(x),t.background=null,v=!0):(m.color.copy(Wa),v=!0);for(let i=0;i<6;i++){const col=i%3;0===col?(o.up.set(0,l[i],0),o.lookAt(c[i],0,0)):1===col?(o.up.set(0,0,l[i]),o.lookAt(0,c[i],0)):(o.up.set(0,l[i],0),o.lookAt(0,0,c[i]));const e=this._cubeSize;to(r,col*e,i>2?e:0,e,e),h.setRenderTarget(r),v&&h.render(_,o),h.render(t,o)}_.geometry.dispose(),_.material.dispose(),h.toneMapping=f,h.autoClear=d,t.background=x}_textureToCubeUV(t,e){const n=this._renderer,r=t.mapping===Mt||t.mapping===St;r?(null===this._cubemapMaterial&&(this._cubemapMaterial=no()),this._cubemapMaterial.uniforms.flipEnvMap.value=!1===t.isRenderTargetTexture?-1:1):null===this._equirectMaterial&&(this._equirectMaterial=eo());const o=r?this._cubemapMaterial:this._equirectMaterial,l=new ea(this._lodPlanes[0],o);o.uniforms.envMap.value=t;const c=this._cubeSize;to(e,0,0,3*c,2*c),n.setRenderTarget(e),n.render(l,Ga)}_applyPMREM(t){const e=this._renderer,n=e.autoClear;e.autoClear=!1;const r=this._lodPlanes.length;for(let i=1;i<r;i++){const e=Math.sqrt(this._sigmas[i]*this._sigmas[i]-this._sigmas[i-1]*this._sigmas[i-1]),n=Ka[(r-i-1)%Ka.length];this._blur(t,i-1,i,e,n)}e.autoClear=n}_blur(t,e,n,r,o){const l=this._pingPongRenderTarget;this._halfBlur(t,l,e,n,r,"latitudinal",o),this._halfBlur(l,t,n,n,r,"longitudinal",o)}_halfBlur(t,e,n,r,o,l,c){const h=this._renderer,d=this._blurMaterial;"latitudinal"!==l&&"longitudinal"!==l&&console.error("blur direction must be either latitudinal or longitudinal!");const f=new ea(this._lodPlanes[r],d),m=d.uniforms,_=this._sizeLods[n]-1,v=isFinite(o)?Math.PI/(2*_):2*Math.PI/39,x=o/v,y=isFinite(o)?1+Math.floor(3*x):Ha;y>Ha&&console.warn(`sigmaRadians, ${o}, is too large and will clip, as it requested ${y} samples when the maximum is set to 20`);const M=[];let S=0;for(let i=0;i<Ha;++i){const t=i/x,e=Math.exp(-t*t/2);M.push(e),0===i?S+=e:i<y&&(S+=2*e)}for(let i=0;i<M.length;i++)M[i]=M[i]/S;m.envMap.value=t.texture,m.samples.value=y,m.weights.value=M,m.latitudinal.value="latitudinal"===l,c&&(m.poleAxis.value=c);const{_lodMax:T}=this;m.dTheta.value=v,m.mipInt.value=T-n;const w=this._sizeLods[r];to(e,3*w*(r>T-4?r-T+4:0),4*(this._cubeSize-w),3*w,2*w),h.setRenderTarget(e),h.render(f,Ga)}}function Qa(t,e,n){const r=new Fi(t,e,n);return r.texture.mapping=wt,r.texture.name="PMREM.cubeUv",r.scissorTest=!0,r}function to(t,e,n,r,o){t.viewport.set(e,n,r,o),t.scissor.set(e,n,r,o)}function eo(){return new la({name:"EquirectangularToCubeUV",uniforms:{envMap:{value:null}},vertexShader:io(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\n\t\t\t#include <common>\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 outputDirection = normalize( vOutputDirection );\n\t\t\t\tvec2 uv = equirectUv( outputDirection );\n\n\t\t\t\tgl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );\n\n\t\t\t}\n\t\t",blending:T,depthTest:!1,depthWrite:!1})}function no(){return new la({name:"CubemapToCubeUV",uniforms:{envMap:{value:null},flipEnvMap:{value:-1}},vertexShader:io(),fragmentShader:"\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tuniform float flipEnvMap;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );\n\n\t\t\t}\n\t\t",blending:T,depthTest:!1,depthWrite:!1})}function io(){return"\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv = 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction = vec3( uv, 1.0 );\n\n\t\t\tif ( face == 0.0 ) {\n\n\t\t\t\tdirection = direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face == 1.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xz *= -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face == 2.0 ) {\n\n\t\t\t\tdirection.x *= -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face == 3.0 ) {\n\n\t\t\t\tdirection = direction.zyx;\n\t\t\t\tdirection.xz *= -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face == 4.0 ) {\n\n\t\t\t\tdirection = direction.xzy;\n\t\t\t\tdirection.xy *= -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face == 5.0 ) {\n\n\t\t\t\tdirection.z *= -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection = getDirection( uv, faceIndex );\n\t\t\tgl_Position = vec4( position, 1.0 );\n\n\t\t}\n\t"}function ro(t){let e=new WeakMap,n=null;function r(t){const n=t.target;n.removeEventListener("dispose",r);const o=e.get(n);void 0!==o&&(e.delete(n),o.dispose())}return{get:function(o){if(o&&o.isTexture){const l=o.mapping,c=l===bt||l===Tt,h=l===Mt||l===St;if(c||h){let l=e.get(o);const d=void 0!==l?l.texture.pmremVersion:0;if(o.isRenderTargetTexture&&o.pmremVersion!==d)return null===n&&(n=new $a(t)),l=c?n.fromEquirectangular(o,l):n.fromCubemap(o,l),l.texture.pmremVersion=o.pmremVersion,e.set(o,l),l.texture;if(void 0!==l)return l.texture;{const image=o.image;return c&&image&&image.height>0||h&&image&&function(image){let t=0;const e=6;for(let i=0;i<e;i++)void 0!==image[i]&&t++;return t===e}(image)?(null===n&&(n=new $a(t)),l=c?n.fromEquirectangular(o):n.fromCubemap(o),l.texture.pmremVersion=o.pmremVersion,e.set(o,l),o.addEventListener("dispose",r),l.texture):null}}}return o},dispose:function(){e=new WeakMap,null!==n&&(n.dispose(),n=null)}}}function so(t){const e={};function n(n){if(void 0!==e[n])return e[n];let r;switch(n){case"WEBGL_depth_texture":r=t.getExtension("WEBGL_depth_texture")||t.getExtension("MOZ_WEBGL_depth_texture")||t.getExtension("WEBKIT_WEBGL_depth_texture");break;case"EXT_texture_filter_anisotropic":r=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic");break;case"WEBGL_compressed_texture_s3tc":r=t.getExtension("WEBGL_compressed_texture_s3tc")||t.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");break;case"WEBGL_compressed_texture_pvrtc":r=t.getExtension("WEBGL_compressed_texture_pvrtc")||t.getExtension("WEBKIT_WEBGL_compressed_texture_pvrtc");break;default:r=t.getExtension(n)}return e[n]=r,r}return{has:function(t){return null!==n(t)},init:function(){n("EXT_color_buffer_float"),n("WEBGL_clip_cull_distance"),n("OES_texture_float_linear"),n("EXT_color_buffer_half_float"),n("WEBGL_multisampled_render_to_texture"),n("WEBGL_render_shared_exponent")},get:function(t){const e=n(t);return null===e&&xi("THREE.WebGLRenderer: "+t+" extension not supported."),e}}}function ao(t,e,n,r){const o={},l=new WeakMap;function c(t){const h=t.target;null!==h.index&&e.remove(h.index);for(const t in h.attributes)e.remove(h.attributes[t]);for(const t in h.morphAttributes){const n=h.morphAttributes[t];for(let i=0,t=n.length;i<t;i++)e.remove(n[i])}h.removeEventListener("dispose",c),delete o[h.id];const d=l.get(h);d&&(e.remove(d),l.delete(h)),r.releaseStatesOfGeometry(h),!0===h.isInstancedBufferGeometry&&delete h._maxInstanceCount,n.memory.geometries--}function h(t){const n=[],r=t.index,o=t.attributes.position;let c=0;if(null!==r){const t=r.array;c=r.version;for(let i=0,e=t.length;i<e;i+=3){const a=t[i+0],b=t[i+1],e=t[i+2];n.push(a,b,b,e,e,a)}}else{if(void 0===o)return;{const t=o.array;c=o.version;for(let i=0,e=t.length/3-1;i<e;i+=3){const a=i+0,b=i+1,t=i+2;n.push(a,b,b,t,t,a)}}}const h=new(pi(n)?Us:Is)(n,1);h.version=c;const d=l.get(t);d&&e.remove(d),l.set(t,h)}return{get:function(object,t){return!0===o[t.id]||(t.addEventListener("dispose",c),o[t.id]=!0,n.memory.geometries++),t},update:function(n){const r=n.attributes;for(const n in r)e.update(r[n],t.ARRAY_BUFFER);const o=n.morphAttributes;for(const n in o){const r=o[n];for(let i=0,n=r.length;i<n;i++)e.update(r[i],t.ARRAY_BUFFER)}},getWireframeAttribute:function(t){const e=l.get(t);if(e){const n=t.index;null!==n&&e.version<n.version&&h(t)}else h(t);return l.get(t)}}}function oo(t,e,n){let r,o,l;function c(e,c,h){0!==h&&(t.drawElementsInstanced(r,c,o,e*l,h),n.update(c,r,h))}this.setMode=function(t){r=t},this.setIndex=function(t){o=t.type,l=t.bytesPerElement},this.render=function(e,c){t.drawElements(r,c,o,e*l),n.update(c,r,1)},this.renderInstances=c,this.renderMultiDraw=function(t,l,c){if(0===c)return;e.get("WEBGL_multi_draw").multiDrawElementsWEBGL(r,l,0,o,t,0,c);let h=0;for(let i=0;i<c;i++)h+=l[i];n.update(h,r,1)},this.renderMultiDrawInstances=function(t,h,d,f){if(0===d)return;const m=e.get("WEBGL_multi_draw");if(null===m)for(let i=0;i<t.length;i++)c(t[i]/l,h[i],f[i]);else{m.multiDrawElementsInstancedWEBGL(r,h,0,o,t,0,f,0,d);let e=0;for(let i=0;i<d;i++)e+=h[i]*f[i];n.update(e,r,1)}}}function lo(t){const e={frame:0,calls:0,triangles:0,points:0,lines:0};return{memory:{geometries:0,textures:0},render:e,programs:null,autoReset:!0,reset:function(){e.calls=0,e.triangles=0,e.points=0,e.lines=0},update:function(n,r,o){switch(e.calls++,r){case t.TRIANGLES:e.triangles+=o*(n/3);break;case t.LINES:e.lines+=o*(n/2);break;case t.LINE_STRIP:e.lines+=o*(n-1);break;case t.LINE_LOOP:e.lines+=o*n;break;case t.POINTS:e.points+=o*n;break;default:console.error("THREE.WebGLInfo: Unknown draw mode:",r)}}}}function co(t,e,n){const r=new WeakMap,o=new Ni;return{update:function(object,l,c){const h=object.morphTargetInfluences,d=l.morphAttributes.position||l.morphAttributes.normal||l.morphAttributes.color,f=void 0!==d?d.length:0;let m=r.get(l);if(void 0===m||m.count!==f){void 0!==m&&m.texture.dispose();const _=void 0!==l.morphAttributes.position,v=void 0!==l.morphAttributes.normal,x=void 0!==l.morphAttributes.color,y=l.morphAttributes.position||[],M=l.morphAttributes.normal||[],S=l.morphAttributes.color||[];let T=0;!0===_&&(T=1),!0===v&&(T=2),!0===x&&(T=3);let w=l.attributes.position.count*T,E=1;w>e.maxTextureSize&&(E=Math.ceil(w/e.maxTextureSize),w=e.maxTextureSize);const A=new Float32Array(w*E*4*f),C=new Bi(A,w,E,f);C.type=Xt,C.needsUpdate=!0;const R=4*T;for(let i=0;i<f;i++){const I=y[i],L=M[i],U=S[i],D=w*E*4*i;for(let N=0;N<I.count;N++){const O=N*R;!0===_&&(o.fromBufferAttribute(I,N),A[D+O+0]=o.x,A[D+O+1]=o.y,A[D+O+2]=o.z,A[D+O+3]=0),!0===v&&(o.fromBufferAttribute(L,N),A[D+O+4]=o.x,A[D+O+5]=o.y,A[D+O+6]=o.z,A[D+O+7]=0),!0===x&&(o.fromBufferAttribute(U,N),A[D+O+8]=o.x,A[D+O+9]=o.y,A[D+O+10]=o.z,A[D+O+11]=4===U.itemSize?o.w:1)}}function P(){C.dispose(),r.delete(l),l.removeEventListener("dispose",P)}m={count:f,texture:C,size:new hi(w,E)},r.set(l,m),l.addEventListener("dispose",P)}if(!0===object.isInstancedMesh&&null!==object.morphTexture)c.getUniforms().setValue(t,"morphTexture",object.morphTexture,n);else{let F=0;for(let i=0;i<h.length;i++)F+=h[i];const B=l.morphTargetsRelative?1:1-F;c.getUniforms().setValue(t,"morphTargetBaseInfluence",B),c.getUniforms().setValue(t,"morphTargetInfluences",h)}c.getUniforms().setValue(t,"morphTargetsTexture",m.texture,n),c.getUniforms().setValue(t,"morphTargetsTextureSize",m.size)}}}function ho(t,e,n,r){let o=new WeakMap;function l(t){const e=t.target;e.removeEventListener("dispose",l),n.remove(e.instanceMatrix),null!==e.instanceColor&&n.remove(e.instanceColor)}return{update:function(object){const c=r.render.frame,h=object.geometry,d=e.get(object,h);if(o.get(d)!==c&&(e.update(d),o.set(d,c)),object.isInstancedMesh&&(!1===object.hasEventListener("dispose",l)&&object.addEventListener("dispose",l),o.get(object)!==c&&(n.update(object.instanceMatrix,t.ARRAY_BUFFER),null!==object.instanceColor&&n.update(object.instanceColor,t.ARRAY_BUFFER),o.set(object,c))),object.isSkinnedMesh){const t=object.skeleton;o.get(t)!==c&&(t.update(),o.set(t,c))}return d},dispose:function(){o=new WeakMap}}}class uo extends Di{constructor(t,e,n,r,o,l,c,h,d,f=ne){if(f!==ne&&f!==ie)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");void 0===n&&f===ne&&(n=Wt),void 0===n&&f===ie&&(n=Zt),super(null,r,o,l,c,h,f,n,d),this.isDepthTexture=!0,this.image={width:t,height:e},this.magFilter=void 0!==c?c:Rt,this.minFilter=void 0!==h?h:Rt,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(source){return super.copy(source),this.compareFunction=source.compareFunction,this}toJSON(meta){const data=super.toJSON(meta);return null!==this.compareFunction&&(data.compareFunction=this.compareFunction),data}}const po=new Di,fo=new uo(1,1),mo=new Bi,go=new ki,_o=new ga,vo=[],xo=[],yo=new Float32Array(16),Mo=new Float32Array(9),So=new Float32Array(4);function bo(t,e,n){const r=t[0];if(r<=0||r>0)return t;const o=e*n;let l=vo[o];if(void 0===l&&(l=new Float32Array(o),vo[o]=l),0!==e){r.toArray(l,0);for(let i=1,r=0;i!==e;++i)r+=n,t[i].toArray(l,r)}return l}function To(a,b){if(a.length!==b.length)return!1;for(let i=0,t=a.length;i<t;i++)if(a[i]!==b[i])return!1;return!0}function wo(a,b){for(let i=0,t=b.length;i<t;i++)a[i]=b[i]}function Eo(t,e){let n=xo[e];void 0===n&&(n=new Int32Array(e),xo[e]=n);for(let i=0;i!==e;++i)n[i]=t.allocateTextureUnit();return n}function Ao(t,e){const n=this.cache;n[0]!==e&&(t.uniform1f(this.addr,e),n[0]=e)}function Co(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2f(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(To(n,e))return;t.uniform2fv(this.addr,e),wo(n,e)}}function Ro(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3f(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else if(void 0!==e.r)n[0]===e.r&&n[1]===e.g&&n[2]===e.b||(t.uniform3f(this.addr,e.r,e.g,e.b),n[0]=e.r,n[1]=e.g,n[2]=e.b);else{if(To(n,e))return;t.uniform3fv(this.addr,e),wo(n,e)}}function Po(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4f(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(To(n,e))return;t.uniform4fv(this.addr,e),wo(n,e)}}function Io(t,e){const n=this.cache,r=e.elements;if(void 0===r){if(To(n,e))return;t.uniformMatrix2fv(this.addr,!1,e),wo(n,e)}else{if(To(n,r))return;So.set(r),t.uniformMatrix2fv(this.addr,!1,So),wo(n,r)}}function Lo(t,e){const n=this.cache,r=e.elements;if(void 0===r){if(To(n,e))return;t.uniformMatrix3fv(this.addr,!1,e),wo(n,e)}else{if(To(n,r))return;Mo.set(r),t.uniformMatrix3fv(this.addr,!1,Mo),wo(n,r)}}function Uo(t,e){const n=this.cache,r=e.elements;if(void 0===r){if(To(n,e))return;t.uniformMatrix4fv(this.addr,!1,e),wo(n,e)}else{if(To(n,r))return;yo.set(r),t.uniformMatrix4fv(this.addr,!1,yo),wo(n,r)}}function Do(t,e){const n=this.cache;n[0]!==e&&(t.uniform1i(this.addr,e),n[0]=e)}function No(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2i(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(To(n,e))return;t.uniform2iv(this.addr,e),wo(n,e)}}function Oo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3i(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(To(n,e))return;t.uniform3iv(this.addr,e),wo(n,e)}}function Fo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4i(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(To(n,e))return;t.uniform4iv(this.addr,e),wo(n,e)}}function Bo(t,e){const n=this.cache;n[0]!==e&&(t.uniform1ui(this.addr,e),n[0]=e)}function zo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y||(t.uniform2ui(this.addr,e.x,e.y),n[0]=e.x,n[1]=e.y);else{if(To(n,e))return;t.uniform2uiv(this.addr,e),wo(n,e)}}function ko(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z||(t.uniform3ui(this.addr,e.x,e.y,e.z),n[0]=e.x,n[1]=e.y,n[2]=e.z);else{if(To(n,e))return;t.uniform3uiv(this.addr,e),wo(n,e)}}function Vo(t,e){const n=this.cache;if(void 0!==e.x)n[0]===e.x&&n[1]===e.y&&n[2]===e.z&&n[3]===e.w||(t.uniform4ui(this.addr,e.x,e.y,e.z,e.w),n[0]=e.x,n[1]=e.y,n[2]=e.z,n[3]=e.w);else{if(To(n,e))return;t.uniform4uiv(this.addr,e),wo(n,e)}}function Ho(t,e,n){const r=this.cache,o=n.allocateTextureUnit();let l;r[0]!==o&&(t.uniform1i(this.addr,o),r[0]=o),this.type===t.SAMPLER_2D_SHADOW?(fo.compareFunction=Un,l=fo):l=po,n.setTexture2D(e||l,o)}function Go(t,e,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(t.uniform1i(this.addr,o),r[0]=o),n.setTexture3D(e||go,o)}function Wo(t,e,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(t.uniform1i(this.addr,o),r[0]=o),n.setTextureCube(e||_o,o)}function Xo(t,e,n){const r=this.cache,o=n.allocateTextureUnit();r[0]!==o&&(t.uniform1i(this.addr,o),r[0]=o),n.setTexture2DArray(e||mo,o)}function jo(t,e){t.uniform1fv(this.addr,e)}function qo(t,e){const data=bo(e,this.size,2);t.uniform2fv(this.addr,data)}function Yo(t,e){const data=bo(e,this.size,3);t.uniform3fv(this.addr,data)}function Zo(t,e){const data=bo(e,this.size,4);t.uniform4fv(this.addr,data)}function Jo(t,e){const data=bo(e,this.size,4);t.uniformMatrix2fv(this.addr,!1,data)}function Ko(t,e){const data=bo(e,this.size,9);t.uniformMatrix3fv(this.addr,!1,data)}function $o(t,e){const data=bo(e,this.size,16);t.uniformMatrix4fv(this.addr,!1,data)}function Qo(t,e){t.uniform1iv(this.addr,e)}function tl(t,e){t.uniform2iv(this.addr,e)}function el(t,e){t.uniform3iv(this.addr,e)}function nl(t,e){t.uniform4iv(this.addr,e)}function il(t,e){t.uniform1uiv(this.addr,e)}function rl(t,e){t.uniform2uiv(this.addr,e)}function sl(t,e){t.uniform3uiv(this.addr,e)}function al(t,e){t.uniform4uiv(this.addr,e)}function ll(t,e,n){const r=this.cache,o=e.length,l=Eo(n,o);To(r,l)||(t.uniform1iv(this.addr,l),wo(r,l));for(let i=0;i!==o;++i)n.setTexture2D(e[i]||po,l[i])}function cl(t,e,n){const r=this.cache,o=e.length,l=Eo(n,o);To(r,l)||(t.uniform1iv(this.addr,l),wo(r,l));for(let i=0;i!==o;++i)n.setTexture3D(e[i]||go,l[i])}function hl(t,e,n){const r=this.cache,o=e.length,l=Eo(n,o);To(r,l)||(t.uniform1iv(this.addr,l),wo(r,l));for(let i=0;i!==o;++i)n.setTextureCube(e[i]||_o,l[i])}function pl(t,e,n){const r=this.cache,o=e.length,l=Eo(n,o);To(r,l)||(t.uniform1iv(this.addr,l),wo(r,l));for(let i=0;i!==o;++i)n.setTexture2DArray(e[i]||mo,l[i])}class fl{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.setValue=function(t){switch(t){case 5126:return Ao;case 35664:return Co;case 35665:return Ro;case 35666:return Po;case 35674:return Io;case 35675:return Lo;case 35676:return Uo;case 5124:case 35670:return Do;case 35667:case 35671:return No;case 35668:case 35672:return Oo;case 35669:case 35673:return Fo;case 5125:return Bo;case 36294:return zo;case 36295:return ko;case 36296:return Vo;case 35678:case 36198:case 36298:case 36306:case 35682:return Ho;case 35679:case 36299:case 36307:return Go;case 35680:case 36300:case 36308:case 36293:return Wo;case 36289:case 36303:case 36311:case 36292:return Xo}}(e.type)}}class ml{constructor(t,e,n){this.id=t,this.addr=n,this.cache=[],this.type=e.type,this.size=e.size,this.setValue=function(t){switch(t){case 5126:return jo;case 35664:return qo;case 35665:return Yo;case 35666:return Zo;case 35674:return Jo;case 35675:return Ko;case 35676:return $o;case 5124:case 35670:return Qo;case 35667:case 35671:return tl;case 35668:case 35672:return el;case 35669:case 35673:return nl;case 5125:return il;case 36294:return rl;case 36295:return sl;case 36296:return al;case 35678:case 36198:case 36298:case 36306:case 35682:return ll;case 35679:case 36299:case 36307:return cl;case 35680:case 36300:case 36308:case 36293:return hl;case 36289:case 36303:case 36311:case 36292:return pl}}(e.type)}}class gl{constructor(t){this.id=t,this.seq=[],this.map={}}setValue(t,e,n){const r=this.seq;for(let i=0,o=r.length;i!==o;++i){const u=r[i];u.setValue(t,e[u.id],n)}}}const _l=/(\w+)(\])?(\[|\.)?/g;function vl(t,e){t.seq.push(e),t.map[e.id]=e}function xl(t,e,n){const path=t.name,r=path.length;for(_l.lastIndex=0;;){const o=_l.exec(path),l=_l.lastIndex;let c=o[1];const h="]"===o[2],d=o[3];if(h&&(c|=0),void 0===d||"["===d&&l+2===r){vl(n,void 0===d?new fl(c,t,e):new ml(c,t,e));break}{let t=n.map[c];void 0===t&&(t=new gl(c),vl(n,t)),n=t}}}class yl{constructor(t,e){this.seq=[],this.map={};const n=t.getProgramParameter(e,t.ACTIVE_UNIFORMS);for(let i=0;i<n;++i){const n=t.getActiveUniform(e,i);xl(n,t.getUniformLocation(e,n.name),this)}}setValue(t,e,n,r){const u=this.map[e];void 0!==u&&u.setValue(t,n,r)}setOptional(t,object,e){const n=object[e];void 0!==n&&this.setValue(t,e,n)}static upload(t,e,n,r){for(let i=0,o=e.length;i!==o;++i){const u=e[i],o=n[u.id];!1!==o.needsUpdate&&u.setValue(t,o.value,r)}}static seqWithValue(t,e){const n=[];for(let i=0,r=t.length;i!==r;++i){const u=t[i];u.id in e&&n.push(u)}return n}}function Ml(t,e,n){const r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),r}let Sl=0;const bl=new ui;function Tl(t,e,n){const r=t.getShaderParameter(e,t.COMPILE_STATUS),o=t.getShaderInfoLog(e).trim();if(r&&""===o)return"";const l=/ERROR: 0:(\d+)/.exec(o);if(l){const r=parseInt(l[1]);return n.toUpperCase()+"\n\n"+o+"\n\n"+function(t,e){const n=t.split("\n"),r=[],o=Math.max(e-6,0),l=Math.min(e+6,n.length);for(let i=o;i<l;i++){const line=i+1;r.push(`${line===e?">":" "} ${line}: ${n[i]}`)}return r.join("\n")}(t.getShaderSource(e),r)}return o}function wl(t,e){const n=function(t){yi._getMatrix(bl,yi.workingColorSpace,t);const e=`mat3( ${bl.elements.map((t=>t.toFixed(4)))} )`;switch(yi.getTransfer(t)){case dn:return[e,"LinearTransferOETF"];case pn:return[e,"sRGBTransferOETF"];default:return console.warn("THREE.WebGLProgram: Unsupported color space: ",t),[e,"LinearTransferOETF"]}}(e);return[`vec4 ${t}( vec4 value ) {`,`\treturn ${n[1]}( vec4( value.rgb * ${n[0]}, value.a ) );`,"}"].join("\n")}function El(t,e){let n;switch(e){case ht:n="Linear";break;case ut:n="Reinhard";break;case pt:n="Cineon";break;case ft:n="ACESFilmic";break;case gt:n="AgX";break;case _t:n="Neutral";break;case mt:n="Custom";break;default:console.warn("THREE.WebGLProgram: Unsupported toneMapping:",e),n="Linear"}return"vec3 "+t+"( vec3 color ) { return "+n+"ToneMapping( color ); }"}const Al=new Gi;function Cl(){yi.getLuminanceCoefficients(Al);return["float luminance( const in vec3 rgb ) {",`\tconst vec3 weights = vec3( ${Al.x.toFixed(4)}, ${Al.y.toFixed(4)}, ${Al.z.toFixed(4)} );`,"\treturn dot( weights, rgb );","}"].join("\n")}function Rl(t){return""!==t}function Pl(t,e){const n=e.numSpotLightShadows+e.numSpotLightMaps-e.numSpotLightShadowsWithMaps;return t.replace(/NUM_DIR_LIGHTS/g,e.numDirLights).replace(/NUM_SPOT_LIGHTS/g,e.numSpotLights).replace(/NUM_SPOT_LIGHT_MAPS/g,e.numSpotLightMaps).replace(/NUM_SPOT_LIGHT_COORDS/g,n).replace(/NUM_RECT_AREA_LIGHTS/g,e.numRectAreaLights).replace(/NUM_POINT_LIGHTS/g,e.numPointLights).replace(/NUM_HEMI_LIGHTS/g,e.numHemiLights).replace(/NUM_DIR_LIGHT_SHADOWS/g,e.numDirLightShadows).replace(/NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g,e.numSpotLightShadowsWithMaps).replace(/NUM_SPOT_LIGHT_SHADOWS/g,e.numSpotLightShadows).replace(/NUM_POINT_LIGHT_SHADOWS/g,e.numPointLightShadows)}function Il(t,e){return t.replace(/NUM_CLIPPING_PLANES/g,e.numClippingPlanes).replace(/UNION_CLIPPING_PLANES/g,e.numClippingPlanes-e.numClipIntersection)}const Ll=/^[ \t]*#include +<([\w\d./]+)>/gm;function Ul(t){return t.replace(Ll,Nl)}const Dl=new Map;function Nl(t,e){let n=Ca[e];if(void 0===n){const t=Dl.get(e);if(void 0===t)throw new Error("Can not resolve #include <"+e+">");n=Ca[t],console.warn('THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.',e,t)}return Ul(n)}const Ol=/#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;function Fl(t){return t.replace(Ol,Bl)}function Bl(t,e,n,r){let o="";for(let i=parseInt(e);i<parseInt(n);i++)o+=r.replace(/\[\s*i\s*\]/g,"[ "+i+" ]").replace(/UNROLLED_LOOP_INDEX/g,i);return o}function zl(t){let e=`precision ${t.precision} float;\n\tprecision ${t.precision} int;\n\tprecision ${t.precision} sampler2D;\n\tprecision ${t.precision} samplerCube;\n\tprecision ${t.precision} sampler3D;\n\tprecision ${t.precision} sampler2DArray;\n\tprecision ${t.precision} sampler2DShadow;\n\tprecision ${t.precision} samplerCubeShadow;\n\tprecision ${t.precision} sampler2DArrayShadow;\n\tprecision ${t.precision} isampler2D;\n\tprecision ${t.precision} isampler3D;\n\tprecision ${t.precision} isamplerCube;\n\tprecision ${t.precision} isampler2DArray;\n\tprecision ${t.precision} usampler2D;\n\tprecision ${t.precision} usampler3D;\n\tprecision ${t.precision} usamplerCube;\n\tprecision ${t.precision} usampler2DArray;\n\t`;return"highp"===t.precision?e+="\n#define HIGH_PRECISION":"mediump"===t.precision?e+="\n#define MEDIUM_PRECISION":"lowp"===t.precision&&(e+="\n#define LOW_PRECISION"),e}function kl(t,e,n,r){const o=t.getContext(),l=n.defines;let c=n.vertexShader,h=n.fragmentShader;const d=function(t){let e="SHADOWMAP_TYPE_BASIC";return t.shadowMapType===_?e="SHADOWMAP_TYPE_PCF":t.shadowMapType===v?e="SHADOWMAP_TYPE_PCF_SOFT":t.shadowMapType===x&&(e="SHADOWMAP_TYPE_VSM"),e}(n),f=function(t){let e="ENVMAP_TYPE_CUBE";if(t.envMap)switch(t.envMapMode){case Mt:case St:e="ENVMAP_TYPE_CUBE";break;case wt:e="ENVMAP_TYPE_CUBE_UV"}return e}(n),m=function(t){let e="ENVMAP_MODE_REFLECTION";t.envMap&&t.envMapMode===St&&(e="ENVMAP_MODE_REFRACTION");return e}(n),y=function(t){let e="ENVMAP_BLENDING_NONE";if(t.envMap)switch(t.combine){case at:e="ENVMAP_BLENDING_MULTIPLY";break;case ot:e="ENVMAP_BLENDING_MIX";break;case lt:e="ENVMAP_BLENDING_ADD"}return e}(n),M=function(t){const e=t.envMapCubeUVHeight;if(null===e)return null;const n=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,n),112)),texelHeight:r,maxMip:n}}(n),S=function(t){return[t.extensionClipCullDistance?"#extension GL_ANGLE_clip_cull_distance : require":"",t.extensionMultiDraw?"#extension GL_ANGLE_multi_draw : require":""].filter(Rl).join("\n")}(n),T=function(t){const e=[];for(const n in t){const r=t[n];!1!==r&&e.push("#define "+n+" "+r)}return e.join("\n")}(l),w=o.createProgram();let E,A,C=n.glslVersion?"#version "+n.glslVersion+"\n":"";n.isRawShaderMaterial?(E=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,T].filter(Rl).join("\n"),E.length>0&&(E+="\n"),A=["#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,T].filter(Rl).join("\n"),A.length>0&&(A+="\n")):(E=[zl(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,T,n.extensionClipCullDistance?"#define USE_CLIP_DISTANCE":"",n.batching?"#define USE_BATCHING":"",n.batchingColor?"#define USE_BATCHING_COLOR":"",n.instancing?"#define USE_INSTANCING":"",n.instancingColor?"#define USE_INSTANCING_COLOR":"",n.instancingMorph?"#define USE_INSTANCING_MORPH":"",n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.map?"#define USE_MAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+m:"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.displacementMap?"#define USE_DISPLACEMENTMAP":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.mapUv?"#define MAP_UV "+n.mapUv:"",n.alphaMapUv?"#define ALPHAMAP_UV "+n.alphaMapUv:"",n.lightMapUv?"#define LIGHTMAP_UV "+n.lightMapUv:"",n.aoMapUv?"#define AOMAP_UV "+n.aoMapUv:"",n.emissiveMapUv?"#define EMISSIVEMAP_UV "+n.emissiveMapUv:"",n.bumpMapUv?"#define BUMPMAP_UV "+n.bumpMapUv:"",n.normalMapUv?"#define NORMALMAP_UV "+n.normalMapUv:"",n.displacementMapUv?"#define DISPLACEMENTMAP_UV "+n.displacementMapUv:"",n.metalnessMapUv?"#define METALNESSMAP_UV "+n.metalnessMapUv:"",n.roughnessMapUv?"#define ROUGHNESSMAP_UV "+n.roughnessMapUv:"",n.anisotropyMapUv?"#define ANISOTROPYMAP_UV "+n.anisotropyMapUv:"",n.clearcoatMapUv?"#define CLEARCOATMAP_UV "+n.clearcoatMapUv:"",n.clearcoatNormalMapUv?"#define CLEARCOAT_NORMALMAP_UV "+n.clearcoatNormalMapUv:"",n.clearcoatRoughnessMapUv?"#define CLEARCOAT_ROUGHNESSMAP_UV "+n.clearcoatRoughnessMapUv:"",n.iridescenceMapUv?"#define IRIDESCENCEMAP_UV "+n.iridescenceMapUv:"",n.iridescenceThicknessMapUv?"#define IRIDESCENCE_THICKNESSMAP_UV "+n.iridescenceThicknessMapUv:"",n.sheenColorMapUv?"#define SHEEN_COLORMAP_UV "+n.sheenColorMapUv:"",n.sheenRoughnessMapUv?"#define SHEEN_ROUGHNESSMAP_UV "+n.sheenRoughnessMapUv:"",n.specularMapUv?"#define SPECULARMAP_UV "+n.specularMapUv:"",n.specularColorMapUv?"#define SPECULAR_COLORMAP_UV "+n.specularColorMapUv:"",n.specularIntensityMapUv?"#define SPECULAR_INTENSITYMAP_UV "+n.specularIntensityMapUv:"",n.transmissionMapUv?"#define TRANSMISSIONMAP_UV "+n.transmissionMapUv:"",n.thicknessMapUv?"#define THICKNESSMAP_UV "+n.thicknessMapUv:"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.flatShading?"#define FLAT_SHADED":"",n.skinning?"#define USE_SKINNING":"",n.morphTargets?"#define USE_MORPHTARGETS":"",n.morphNormals&&!1===n.flatShading?"#define USE_MORPHNORMALS":"",n.morphColors?"#define USE_MORPHCOLORS":"",n.morphTargetsCount>0?"#define MORPHTARGETS_TEXTURE_STRIDE "+n.morphTextureStride:"",n.morphTargetsCount>0?"#define MORPHTARGETS_COUNT "+n.morphTargetsCount:"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+d:"",n.sizeAttenuation?"#define USE_SIZEATTENUATION":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 modelMatrix;","uniform mat4 modelViewMatrix;","uniform mat4 projectionMatrix;","uniform mat4 viewMatrix;","uniform mat3 normalMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;","#ifdef USE_INSTANCING","\tattribute mat4 instanceMatrix;","#endif","#ifdef USE_INSTANCING_COLOR","\tattribute vec3 instanceColor;","#endif","#ifdef USE_INSTANCING_MORPH","\tuniform sampler2D morphTexture;","#endif","attribute vec3 position;","attribute vec3 normal;","attribute vec2 uv;","#ifdef USE_UV1","\tattribute vec2 uv1;","#endif","#ifdef USE_UV2","\tattribute vec2 uv2;","#endif","#ifdef USE_UV3","\tattribute vec2 uv3;","#endif","#ifdef USE_TANGENT","\tattribute vec4 tangent;","#endif","#if defined( USE_COLOR_ALPHA )","\tattribute vec4 color;","#elif defined( USE_COLOR )","\tattribute vec3 color;","#endif","#ifdef USE_SKINNING","\tattribute vec4 skinIndex;","\tattribute vec4 skinWeight;","#endif","\n"].filter(Rl).join("\n"),A=[zl(n),"#define SHADER_TYPE "+n.shaderType,"#define SHADER_NAME "+n.shaderName,T,n.useFog&&n.fog?"#define USE_FOG":"",n.useFog&&n.fogExp2?"#define FOG_EXP2":"",n.alphaToCoverage?"#define ALPHA_TO_COVERAGE":"",n.map?"#define USE_MAP":"",n.matcap?"#define USE_MATCAP":"",n.envMap?"#define USE_ENVMAP":"",n.envMap?"#define "+f:"",n.envMap?"#define "+m:"",n.envMap?"#define "+y:"",M?"#define CUBEUV_TEXEL_WIDTH "+M.texelWidth:"",M?"#define CUBEUV_TEXEL_HEIGHT "+M.texelHeight:"",M?"#define CUBEUV_MAX_MIP "+M.maxMip+".0":"",n.lightMap?"#define USE_LIGHTMAP":"",n.aoMap?"#define USE_AOMAP":"",n.bumpMap?"#define USE_BUMPMAP":"",n.normalMap?"#define USE_NORMALMAP":"",n.normalMapObjectSpace?"#define USE_NORMALMAP_OBJECTSPACE":"",n.normalMapTangentSpace?"#define USE_NORMALMAP_TANGENTSPACE":"",n.emissiveMap?"#define USE_EMISSIVEMAP":"",n.anisotropy?"#define USE_ANISOTROPY":"",n.anisotropyMap?"#define USE_ANISOTROPYMAP":"",n.clearcoat?"#define USE_CLEARCOAT":"",n.clearcoatMap?"#define USE_CLEARCOATMAP":"",n.clearcoatRoughnessMap?"#define USE_CLEARCOAT_ROUGHNESSMAP":"",n.clearcoatNormalMap?"#define USE_CLEARCOAT_NORMALMAP":"",n.dispersion?"#define USE_DISPERSION":"",n.iridescence?"#define USE_IRIDESCENCE":"",n.iridescenceMap?"#define USE_IRIDESCENCEMAP":"",n.iridescenceThicknessMap?"#define USE_IRIDESCENCE_THICKNESSMAP":"",n.specularMap?"#define USE_SPECULARMAP":"",n.specularColorMap?"#define USE_SPECULAR_COLORMAP":"",n.specularIntensityMap?"#define USE_SPECULAR_INTENSITYMAP":"",n.roughnessMap?"#define USE_ROUGHNESSMAP":"",n.metalnessMap?"#define USE_METALNESSMAP":"",n.alphaMap?"#define USE_ALPHAMAP":"",n.alphaTest?"#define USE_ALPHATEST":"",n.alphaHash?"#define USE_ALPHAHASH":"",n.sheen?"#define USE_SHEEN":"",n.sheenColorMap?"#define USE_SHEEN_COLORMAP":"",n.sheenRoughnessMap?"#define USE_SHEEN_ROUGHNESSMAP":"",n.transmission?"#define USE_TRANSMISSION":"",n.transmissionMap?"#define USE_TRANSMISSIONMAP":"",n.thicknessMap?"#define USE_THICKNESSMAP":"",n.vertexTangents&&!1===n.flatShading?"#define USE_TANGENT":"",n.vertexColors||n.instancingColor||n.batchingColor?"#define USE_COLOR":"",n.vertexAlphas?"#define USE_COLOR_ALPHA":"",n.vertexUv1s?"#define USE_UV1":"",n.vertexUv2s?"#define USE_UV2":"",n.vertexUv3s?"#define USE_UV3":"",n.pointsUvs?"#define USE_POINTS_UV":"",n.gradientMap?"#define USE_GRADIENTMAP":"",n.flatShading?"#define FLAT_SHADED":"",n.doubleSided?"#define DOUBLE_SIDED":"",n.flipSided?"#define FLIP_SIDED":"",n.shadowMapEnabled?"#define USE_SHADOWMAP":"",n.shadowMapEnabled?"#define "+d:"",n.premultipliedAlpha?"#define PREMULTIPLIED_ALPHA":"",n.numLightProbes>0?"#define USE_LIGHT_PROBES":"",n.decodeVideoTexture?"#define DECODE_VIDEO_TEXTURE":"",n.decodeVideoTextureEmissive?"#define DECODE_VIDEO_TEXTURE_EMISSIVE":"",n.logarithmicDepthBuffer?"#define USE_LOGDEPTHBUF":"",n.reverseDepthBuffer?"#define USE_REVERSEDEPTHBUF":"","uniform mat4 viewMatrix;","uniform vec3 cameraPosition;","uniform bool isOrthographic;",n.toneMapping!==ct?"#define TONE_MAPPING":"",n.toneMapping!==ct?Ca.tonemapping_pars_fragment:"",n.toneMapping!==ct?El("toneMapping",n.toneMapping):"",n.dithering?"#define DITHERING":"",n.opaque?"#define OPAQUE":"",Ca.colorspace_pars_fragment,wl("linearToOutputTexel",n.outputColorSpace),Cl(),n.useDepthPacking?"#define DEPTH_PACKING "+n.depthPacking:"","\n"].filter(Rl).join("\n")),c=Ul(c),c=Pl(c,n),c=Il(c,n),h=Ul(h),h=Pl(h,n),h=Il(h,n),c=Fl(c),h=Fl(h),!0!==n.isRawShaderMaterial&&(C="#version 300 es\n",E=[S,"#define attribute in","#define varying out","#define texture2D texture"].join("\n")+"\n"+E,A=["#define varying in",n.glslVersion===Yn?"":"layout(location = 0) out highp vec4 pc_fragColor;",n.glslVersion===Yn?"":"#define gl_FragColor pc_fragColor","#define gl_FragDepthEXT gl_FragDepth","#define texture2D texture","#define textureCube texture","#define texture2DProj textureProj","#define texture2DLodEXT textureLod","#define texture2DProjLodEXT textureProjLod","#define textureCubeLodEXT textureLod","#define texture2DGradEXT textureGrad","#define texture2DProjGradEXT textureProjGrad","#define textureCubeGradEXT textureGrad"].join("\n")+"\n"+A);const R=C+E+c,P=C+A+h,I=Ml(o,o.VERTEX_SHADER,R),L=Ml(o,o.FRAGMENT_SHADER,P);function U(e){if(t.debug.checkShaderErrors){const n=o.getProgramInfoLog(w).trim(),r=o.getShaderInfoLog(I).trim(),l=o.getShaderInfoLog(L).trim();let c=!0,h=!0;if(!1===o.getProgramParameter(w,o.LINK_STATUS))if(c=!1,"function"==typeof t.debug.onShaderError)t.debug.onShaderError(o,w,I,L);else{const t=Tl(o,I,"vertex"),r=Tl(o,L,"fragment");console.error("THREE.WebGLProgram: Shader Error "+o.getError()+" - VALIDATE_STATUS "+o.getProgramParameter(w,o.VALIDATE_STATUS)+"\n\nMaterial Name: "+e.name+"\nMaterial Type: "+e.type+"\n\nProgram Info Log: "+n+"\n"+t+"\n"+r)}else""!==n?console.warn("THREE.WebGLProgram: Program Info Log:",n):""!==r&&""!==l||(h=!1);h&&(e.diagnostics={runnable:c,programLog:n,vertexShader:{log:r,prefix:E},fragmentShader:{log:l,prefix:A}})}o.deleteShader(I),o.deleteShader(L),D=new yl(o,w),N=function(t,e){const n={},r=t.getProgramParameter(e,t.ACTIVE_ATTRIBUTES);for(let i=0;i<r;i++){const r=t.getActiveAttrib(e,i),o=r.name;let l=1;r.type===t.FLOAT_MAT2&&(l=2),r.type===t.FLOAT_MAT3&&(l=3),r.type===t.FLOAT_MAT4&&(l=4),n[o]={type:r.type,location:t.getAttribLocation(e,o),locationSize:l}}return n}(o,w)}let D,N;o.attachShader(w,I),o.attachShader(w,L),void 0!==n.index0AttributeName?o.bindAttribLocation(w,0,n.index0AttributeName):!0===n.morphTargets&&o.bindAttribLocation(w,0,"position"),o.linkProgram(w),this.getUniforms=function(){return void 0===D&&U(this),D},this.getAttributes=function(){return void 0===N&&U(this),N};let O=!1===n.rendererExtensionParallelShaderCompile;return this.isReady=function(){return!1===O&&(O=o.getProgramParameter(w,37297)),O},this.destroy=function(){r.releaseStatesOfProgram(this),o.deleteProgram(w),this.program=void 0},this.type=n.shaderType,this.name=n.shaderName,this.id=Sl++,this.cacheKey=e,this.usedTimes=1,this.program=w,this.vertexShader=I,this.fragmentShader=L,this}let Vl=0;class Hl{constructor(){this.shaderCache=new Map,this.materialCache=new Map}update(t){const e=t.vertexShader,n=t.fragmentShader,r=this._getShaderStage(e),o=this._getShaderStage(n),l=this._getShaderCacheForMaterial(t);return!1===l.has(r)&&(l.add(r),r.usedTimes++),!1===l.has(o)&&(l.add(o),o.usedTimes++),this}remove(t){const e=this.materialCache.get(t);for(const t of e)t.usedTimes--,0===t.usedTimes&&this.shaderCache.delete(t.code);return this.materialCache.delete(t),this}getVertexShaderID(t){return this._getShaderStage(t.vertexShader).id}getFragmentShaderID(t){return this._getShaderStage(t.fragmentShader).id}dispose(){this.shaderCache.clear(),this.materialCache.clear()}_getShaderCacheForMaterial(t){const e=this.materialCache;let n=e.get(t);return void 0===n&&(n=new Set,e.set(t,n)),n}_getShaderStage(code){const t=this.shaderCache;let e=t.get(code);return void 0===e&&(e=new Gl(code),t.set(code,e)),e}}class Gl{constructor(code){this.id=Vl++,this.code=code,this.usedTimes=0}}function Wl(t,e,n,r,o,l,c){const h=new Ur,d=new Hl,f=new Set,m=[],_=o.logarithmicDepthBuffer,v=o.vertexTextures;let x=o.precision;const y={MeshDepthMaterial:"depth",MeshDistanceMaterial:"distanceRGBA",MeshNormalMaterial:"normal",MeshBasicMaterial:"basic",MeshLambertMaterial:"lambert",MeshPhongMaterial:"phong",MeshToonMaterial:"toon",MeshStandardMaterial:"physical",MeshPhysicalMaterial:"physical",MeshMatcapMaterial:"matcap",LineBasicMaterial:"basic",LineDashedMaterial:"dashed",PointsMaterial:"points",ShadowMaterial:"shadow",SpriteMaterial:"sprite"};function T(t){return f.add(t),0===t?"uv":`uv${t}`}return{getParameters:function(l,h,m,E,object){const A=E.fog,C=object.geometry,R=l.isMeshStandardMaterial?E.environment:null,P=(l.isMeshStandardMaterial?n:e).get(l.envMap||R),I=P&&P.mapping===wt?P.image.height:null,L=y[l.type];null!==l.precision&&(x=o.getMaxPrecision(l.precision),x!==l.precision&&console.warn("THREE.WebGLProgram.getParameters:",l.precision,"not supported, using",x,"instead."));const U=C.morphAttributes.position||C.morphAttributes.normal||C.morphAttributes.color,D=void 0!==U?U.length:0;let N,O,F,B,z=0;if(void 0!==C.morphAttributes.position&&(z=1),void 0!==C.morphAttributes.normal&&(z=2),void 0!==C.morphAttributes.color&&(z=3),L){const t=Pa[L];N=t.vertexShader,O=t.fragmentShader}else N=l.vertexShader,O=l.fragmentShader,d.update(l),F=d.getVertexShaderID(l),B=d.getFragmentShaderID(l);const k=t.getRenderTarget(),V=t.state.buffers.depth.getReversed(),H=!0===object.isInstancedMesh,G=!0===object.isBatchedMesh,W=!!l.map,X=!!l.matcap,j=!!P,Y=!!l.aoMap,Z=!!l.lightMap,J=!!l.bumpMap,K=!!l.normalMap,$=!!l.displacementMap,Q=!!l.emissiveMap,tt=!!l.metalnessMap,et=!!l.roughnessMap,nt=l.anisotropy>0,it=l.clearcoat>0,st=l.dispersion>0,at=l.iridescence>0,ot=l.sheen>0,lt=l.transmission>0,ht=nt&&!!l.anisotropyMap,ut=it&&!!l.clearcoatMap,pt=it&&!!l.clearcoatNormalMap,ft=it&&!!l.clearcoatRoughnessMap,mt=at&&!!l.iridescenceMap,gt=at&&!!l.iridescenceThicknessMap,_t=ot&&!!l.sheenColorMap,vt=ot&&!!l.sheenRoughnessMap,xt=!!l.specularMap,yt=!!l.specularColorMap,Mt=!!l.specularIntensityMap,St=lt&&!!l.transmissionMap,bt=lt&&!!l.thicknessMap,Tt=!!l.gradientMap,Et=!!l.alphaMap,At=l.alphaTest>0,Ct=!!l.alphaHash,Rt=!!l.extensions;let Pt=ct;l.toneMapped&&(null!==k&&!0!==k.isXRRenderTarget||(Pt=t.toneMapping));const It={shaderID:L,shaderType:l.type,shaderName:l.name,vertexShader:N,fragmentShader:O,defines:l.defines,customVertexShaderID:F,customFragmentShaderID:B,isRawShaderMaterial:!0===l.isRawShaderMaterial,glslVersion:l.glslVersion,precision:x,batching:G,batchingColor:G&&null!==object._colorsTexture,instancing:H,instancingColor:H&&null!==object.instanceColor,instancingMorph:H&&null!==object.morphTexture,supportsVertexTextures:v,outputColorSpace:null===k?t.outputColorSpace:!0===k.isXRRenderTarget?k.texture.colorSpace:un,alphaToCoverage:!!l.alphaToCoverage,map:W,matcap:X,envMap:j,envMapMode:j&&P.mapping,envMapCubeUVHeight:I,aoMap:Y,lightMap:Z,bumpMap:J,normalMap:K,displacementMap:v&&$,emissiveMap:Q,normalMapObjectSpace:K&&l.normalMapType===ln,normalMapTangentSpace:K&&l.normalMapType===on,metalnessMap:tt,roughnessMap:et,anisotropy:nt,anisotropyMap:ht,clearcoat:it,clearcoatMap:ut,clearcoatNormalMap:pt,clearcoatRoughnessMap:ft,dispersion:st,iridescence:at,iridescenceMap:mt,iridescenceThicknessMap:gt,sheen:ot,sheenColorMap:_t,sheenRoughnessMap:vt,specularMap:xt,specularColorMap:yt,specularIntensityMap:Mt,transmission:lt,transmissionMap:St,thicknessMap:bt,gradientMap:Tt,opaque:!1===l.transparent&&l.blending===w&&!1===l.alphaToCoverage,alphaMap:Et,alphaTest:At,alphaHash:Ct,combine:l.combine,mapUv:W&&T(l.map.channel),aoMapUv:Y&&T(l.aoMap.channel),lightMapUv:Z&&T(l.lightMap.channel),bumpMapUv:J&&T(l.bumpMap.channel),normalMapUv:K&&T(l.normalMap.channel),displacementMapUv:$&&T(l.displacementMap.channel),emissiveMapUv:Q&&T(l.emissiveMap.channel),metalnessMapUv:tt&&T(l.metalnessMap.channel),roughnessMapUv:et&&T(l.roughnessMap.channel),anisotropyMapUv:ht&&T(l.anisotropyMap.channel),clearcoatMapUv:ut&&T(l.clearcoatMap.channel),clearcoatNormalMapUv:pt&&T(l.clearcoatNormalMap.channel),clearcoatRoughnessMapUv:ft&&T(l.clearcoatRoughnessMap.channel),iridescenceMapUv:mt&&T(l.iridescenceMap.channel),iridescenceThicknessMapUv:gt&&T(l.iridescenceThicknessMap.channel),sheenColorMapUv:_t&&T(l.sheenColorMap.channel),sheenRoughnessMapUv:vt&&T(l.sheenRoughnessMap.channel),specularMapUv:xt&&T(l.specularMap.channel),specularColorMapUv:yt&&T(l.specularColorMap.channel),specularIntensityMapUv:Mt&&T(l.specularIntensityMap.channel),transmissionMapUv:St&&T(l.transmissionMap.channel),thicknessMapUv:bt&&T(l.thicknessMap.channel),alphaMapUv:Et&&T(l.alphaMap.channel),vertexTangents:!!C.attributes.tangent&&(K||nt),vertexColors:l.vertexColors,vertexAlphas:!0===l.vertexColors&&!!C.attributes.color&&4===C.attributes.color.itemSize,pointsUvs:!0===object.isPoints&&!!C.attributes.uv&&(W||Et),fog:!!A,useFog:!0===l.fog,fogExp2:!!A&&A.isFogExp2,flatShading:!0===l.flatShading,sizeAttenuation:!0===l.sizeAttenuation,logarithmicDepthBuffer:_,reverseDepthBuffer:V,skinning:!0===object.isSkinnedMesh,morphTargets:void 0!==C.morphAttributes.position,morphNormals:void 0!==C.morphAttributes.normal,morphColors:void 0!==C.morphAttributes.color,morphTargetsCount:D,morphTextureStride:z,numDirLights:h.directional.length,numPointLights:h.point.length,numSpotLights:h.spot.length,numSpotLightMaps:h.spotLightMap.length,numRectAreaLights:h.rectArea.length,numHemiLights:h.hemi.length,numDirLightShadows:h.directionalShadowMap.length,numPointLightShadows:h.pointShadowMap.length,numSpotLightShadows:h.spotShadowMap.length,numSpotLightShadowsWithMaps:h.numSpotLightShadowsWithMaps,numLightProbes:h.numLightProbes,numClippingPlanes:c.numPlanes,numClipIntersection:c.numIntersection,dithering:l.dithering,shadowMapEnabled:t.shadowMap.enabled&&m.length>0,shadowMapType:t.shadowMap.type,toneMapping:Pt,decodeVideoTexture:W&&!0===l.map.isVideoTexture&&yi.getTransfer(l.map.colorSpace)===pn,decodeVideoTextureEmissive:Q&&!0===l.emissiveMap.isVideoTexture&&yi.getTransfer(l.emissiveMap.colorSpace)===pn,premultipliedAlpha:l.premultipliedAlpha,doubleSided:l.side===S,flipSided:l.side===M,useDepthPacking:l.depthPacking>=0,depthPacking:l.depthPacking||0,index0AttributeName:l.index0AttributeName,extensionClipCullDistance:Rt&&!0===l.extensions.clipCullDistance&&r.has("WEBGL_clip_cull_distance"),extensionMultiDraw:(Rt&&!0===l.extensions.multiDraw||G)&&r.has("WEBGL_multi_draw"),rendererExtensionParallelShaderCompile:r.has("KHR_parallel_shader_compile"),customProgramCacheKey:l.customProgramCacheKey()};return It.vertexUv1s=f.has(1),It.vertexUv2s=f.has(2),It.vertexUv3s=f.has(3),f.clear(),It},getProgramCacheKey:function(e){const n=[];if(e.shaderID?n.push(e.shaderID):(n.push(e.customVertexShaderID),n.push(e.customFragmentShaderID)),void 0!==e.defines)for(const t in e.defines)n.push(t),n.push(e.defines[t]);return!1===e.isRawShaderMaterial&&(!function(t,e){t.push(e.precision),t.push(e.outputColorSpace),t.push(e.envMapMode),t.push(e.envMapCubeUVHeight),t.push(e.mapUv),t.push(e.alphaMapUv),t.push(e.lightMapUv),t.push(e.aoMapUv),t.push(e.bumpMapUv),t.push(e.normalMapUv),t.push(e.displacementMapUv),t.push(e.emissiveMapUv),t.push(e.metalnessMapUv),t.push(e.roughnessMapUv),t.push(e.anisotropyMapUv),t.push(e.clearcoatMapUv),t.push(e.clearcoatNormalMapUv),t.push(e.clearcoatRoughnessMapUv),t.push(e.iridescenceMapUv),t.push(e.iridescenceThicknessMapUv),t.push(e.sheenColorMapUv),t.push(e.sheenRoughnessMapUv),t.push(e.specularMapUv),t.push(e.specularColorMapUv),t.push(e.specularIntensityMapUv),t.push(e.transmissionMapUv),t.push(e.thicknessMapUv),t.push(e.combine),t.push(e.fogExp2),t.push(e.sizeAttenuation),t.push(e.morphTargetsCount),t.push(e.morphAttributeCount),t.push(e.numDirLights),t.push(e.numPointLights),t.push(e.numSpotLights),t.push(e.numSpotLightMaps),t.push(e.numHemiLights),t.push(e.numRectAreaLights),t.push(e.numDirLightShadows),t.push(e.numPointLightShadows),t.push(e.numSpotLightShadows),t.push(e.numSpotLightShadowsWithMaps),t.push(e.numLightProbes),t.push(e.shadowMapType),t.push(e.toneMapping),t.push(e.numClippingPlanes),t.push(e.numClipIntersection),t.push(e.depthPacking)}(n,e),function(t,e){h.disableAll(),e.supportsVertexTextures&&h.enable(0);e.instancing&&h.enable(1);e.instancingColor&&h.enable(2);e.instancingMorph&&h.enable(3);e.matcap&&h.enable(4);e.envMap&&h.enable(5);e.normalMapObjectSpace&&h.enable(6);e.normalMapTangentSpace&&h.enable(7);e.clearcoat&&h.enable(8);e.iridescence&&h.enable(9);e.alphaTest&&h.enable(10);e.vertexColors&&h.enable(11);e.vertexAlphas&&h.enable(12);e.vertexUv1s&&h.enable(13);e.vertexUv2s&&h.enable(14);e.vertexUv3s&&h.enable(15);e.vertexTangents&&h.enable(16);e.anisotropy&&h.enable(17);e.alphaHash&&h.enable(18);e.batching&&h.enable(19);e.dispersion&&h.enable(20);e.batchingColor&&h.enable(21);t.push(h.mask),h.disableAll(),e.fog&&h.enable(0);e.useFog&&h.enable(1);e.flatShading&&h.enable(2);e.logarithmicDepthBuffer&&h.enable(3);e.reverseDepthBuffer&&h.enable(4);e.skinning&&h.enable(5);e.morphTargets&&h.enable(6);e.morphNormals&&h.enable(7);e.morphColors&&h.enable(8);e.premultipliedAlpha&&h.enable(9);e.shadowMapEnabled&&h.enable(10);e.doubleSided&&h.enable(11);e.flipSided&&h.enable(12);e.useDepthPacking&&h.enable(13);e.dithering&&h.enable(14);e.transmission&&h.enable(15);e.sheen&&h.enable(16);e.opaque&&h.enable(17);e.pointsUvs&&h.enable(18);e.decodeVideoTexture&&h.enable(19);e.decodeVideoTextureEmissive&&h.enable(20);e.alphaToCoverage&&h.enable(21);t.push(h.mask)}(n,e),n.push(t.outputColorSpace)),n.push(e.customProgramCacheKey),n.join()},getUniforms:function(t){const e=y[t.type];let n;if(e){const t=Pa[e];n=oa.clone(t.uniforms)}else n=t.uniforms;return n},acquireProgram:function(e,n){let r;for(let p=0,t=m.length;p<t;p++){const t=m[p];if(t.cacheKey===n){r=t,++r.usedTimes;break}}return void 0===r&&(r=new kl(t,n,e,l),m.push(r)),r},releaseProgram:function(t){if(0==--t.usedTimes){const i=m.indexOf(t);m[i]=m[m.length-1],m.pop(),t.destroy()}},releaseShaderCache:function(t){d.remove(t)},programs:m,dispose:function(){d.dispose()}}}function Xl(){let t=new WeakMap;return{has:function(object){return t.has(object)},get:function(object){let map=t.get(object);return void 0===map&&(map={},t.set(object,map)),map},remove:function(object){t.delete(object)},update:function(object,e,n){t.get(object)[e]=n},dispose:function(){t=new WeakMap}}}function jl(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.material.id!==b.material.id?a.material.id-b.material.id:a.z!==b.z?a.z-b.z:a.id-b.id}function ql(a,b){return a.groupOrder!==b.groupOrder?a.groupOrder-b.groupOrder:a.renderOrder!==b.renderOrder?a.renderOrder-b.renderOrder:a.z!==b.z?b.z-a.z:a.id-b.id}function Yl(){const t=[];let e=0;const n=[],r=[],o=[];function l(object,n,r,o,l,c){let h=t[e];return void 0===h?(h={id:object.id,object:object,geometry:n,material:r,groupOrder:o,renderOrder:object.renderOrder,z:l,group:c},t[e]=h):(h.id=object.id,h.object=object,h.geometry=n,h.material=r,h.groupOrder=o,h.renderOrder=object.renderOrder,h.z=l,h.group=c),e++,h}return{opaque:n,transmissive:r,transparent:o,init:function(){e=0,n.length=0,r.length=0,o.length=0},push:function(object,t,e,c,h,d){const f=l(object,t,e,c,h,d);e.transmission>0?r.push(f):!0===e.transparent?o.push(f):n.push(f)},unshift:function(object,t,e,c,h,d){const f=l(object,t,e,c,h,d);e.transmission>0?r.unshift(f):!0===e.transparent?o.unshift(f):n.unshift(f)},finish:function(){for(let i=e,n=t.length;i<n;i++){const e=t[i];if(null===e.id)break;e.id=null,e.object=null,e.geometry=null,e.material=null,e.group=null}},sort:function(t,e){n.length>1&&n.sort(t||jl),r.length>1&&r.sort(e||ql),o.length>1&&o.sort(e||ql)}}}function Zl(){let t=new WeakMap;return{get:function(e,n){const r=t.get(e);let o;return void 0===r?(o=new Yl,t.set(e,[o])):n>=r.length?(o=new Yl,r.push(o)):o=r[n],o},dispose:function(){t=new WeakMap}}}function Jl(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":n={direction:new Gi,color:new fs};break;case"SpotLight":n={position:new Gi,direction:new Gi,color:new fs,distance:0,coneCos:0,penumbraCos:0,decay:0};break;case"PointLight":n={position:new Gi,color:new fs,distance:0,decay:0};break;case"HemisphereLight":n={direction:new Gi,skyColor:new fs,groundColor:new fs};break;case"RectAreaLight":n={color:new fs,position:new Gi,halfWidth:new Gi,halfHeight:new Gi}}return t[e.id]=n,n}}}let Kl=0;function $l(t,e){return(e.castShadow?2:0)-(t.castShadow?2:0)+(e.map?1:0)-(t.map?1:0)}function Ql(t){const e=new Jl,n=function(){const t={};return{get:function(e){if(void 0!==t[e.id])return t[e.id];let n;switch(e.type){case"DirectionalLight":case"SpotLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new hi};break;case"PointLight":n={shadowIntensity:1,shadowBias:0,shadowNormalBias:0,shadowRadius:1,shadowMapSize:new hi,shadowCameraNear:1,shadowCameraFar:1e3}}return t[e.id]=n,n}}}(),r={version:0,hash:{directionalLength:-1,pointLength:-1,spotLength:-1,rectAreaLength:-1,hemiLength:-1,numDirectionalShadows:-1,numPointShadows:-1,numSpotShadows:-1,numSpotMaps:-1,numLightProbes:-1},ambient:[0,0,0],probe:[],directional:[],directionalShadow:[],directionalShadowMap:[],directionalShadowMatrix:[],spot:[],spotLightMap:[],spotShadow:[],spotShadowMap:[],spotLightMatrix:[],rectArea:[],rectAreaLTC1:null,rectAreaLTC2:null,point:[],pointShadow:[],pointShadowMap:[],pointShadowMatrix:[],hemi:[],numSpotLightShadowsWithMaps:0,numLightProbes:0};for(let i=0;i<9;i++)r.probe.push(new Gi);const o=new Gi,l=new Mr,c=new Mr;return{setup:function(o){let l=0,g=0,b=0;for(let i=0;i<9;i++)r.probe[i].set(0,0,0);let c=0,h=0,d=0,f=0,m=0,_=0,v=0,x=0,y=0,M=0,S=0;o.sort($l);for(let i=0,t=o.length;i<t;i++){const t=o[i],T=t.color,w=t.intensity,E=t.distance,A=t.shadow&&t.shadow.map?t.shadow.map.texture:null;if(t.isAmbientLight)l+=T.r*w,g+=T.g*w,b+=T.b*w;else if(t.isLightProbe){for(let e=0;e<9;e++)r.probe[e].addScaledVector(t.sh.coefficients[e],w);S++}else if(t.isDirectionalLight){const o=e.get(t);if(o.color.copy(t.color).multiplyScalar(t.intensity),t.castShadow){const shadow=t.shadow,e=n.get(t);e.shadowIntensity=shadow.intensity,e.shadowBias=shadow.bias,e.shadowNormalBias=shadow.normalBias,e.shadowRadius=shadow.radius,e.shadowMapSize=shadow.mapSize,r.directionalShadow[c]=e,r.directionalShadowMap[c]=A,r.directionalShadowMatrix[c]=t.shadow.matrix,_++}r.directional[c]=o,c++}else if(t.isSpotLight){const o=e.get(t);o.position.setFromMatrixPosition(t.matrixWorld),o.color.copy(T).multiplyScalar(w),o.distance=E,o.coneCos=Math.cos(t.angle),o.penumbraCos=Math.cos(t.angle*(1-t.penumbra)),o.decay=t.decay,r.spot[d]=o;const shadow=t.shadow;if(t.map&&(r.spotLightMap[y]=t.map,y++,shadow.updateMatrices(t),t.castShadow&&M++),r.spotLightMatrix[d]=shadow.matrix,t.castShadow){const e=n.get(t);e.shadowIntensity=shadow.intensity,e.shadowBias=shadow.bias,e.shadowNormalBias=shadow.normalBias,e.shadowRadius=shadow.radius,e.shadowMapSize=shadow.mapSize,r.spotShadow[d]=e,r.spotShadowMap[d]=A,x++}d++}else if(t.isRectAreaLight){const n=e.get(t);n.color.copy(T).multiplyScalar(w),n.halfWidth.set(.5*t.width,0,0),n.halfHeight.set(0,.5*t.height,0),r.rectArea[f]=n,f++}else if(t.isPointLight){const o=e.get(t);if(o.color.copy(t.color).multiplyScalar(t.intensity),o.distance=t.distance,o.decay=t.decay,t.castShadow){const shadow=t.shadow,e=n.get(t);e.shadowIntensity=shadow.intensity,e.shadowBias=shadow.bias,e.shadowNormalBias=shadow.normalBias,e.shadowRadius=shadow.radius,e.shadowMapSize=shadow.mapSize,e.shadowCameraNear=shadow.camera.near,e.shadowCameraFar=shadow.camera.far,r.pointShadow[h]=e,r.pointShadowMap[h]=A,r.pointShadowMatrix[h]=t.shadow.matrix,v++}r.point[h]=o,h++}else if(t.isHemisphereLight){const n=e.get(t);n.skyColor.copy(t.color).multiplyScalar(w),n.groundColor.copy(t.groundColor).multiplyScalar(w),r.hemi[m]=n,m++}}f>0&&(!0===t.has("OES_texture_float_linear")?(r.rectAreaLTC1=Ra.LTC_FLOAT_1,r.rectAreaLTC2=Ra.LTC_FLOAT_2):(r.rectAreaLTC1=Ra.LTC_HALF_1,r.rectAreaLTC2=Ra.LTC_HALF_2)),r.ambient[0]=l,r.ambient[1]=g,r.ambient[2]=b;const T=r.hash;T.directionalLength===c&&T.pointLength===h&&T.spotLength===d&&T.rectAreaLength===f&&T.hemiLength===m&&T.numDirectionalShadows===_&&T.numPointShadows===v&&T.numSpotShadows===x&&T.numSpotMaps===y&&T.numLightProbes===S||(r.directional.length=c,r.spot.length=d,r.rectArea.length=f,r.point.length=h,r.hemi.length=m,r.directionalShadow.length=_,r.directionalShadowMap.length=_,r.pointShadow.length=v,r.pointShadowMap.length=v,r.spotShadow.length=x,r.spotShadowMap.length=x,r.directionalShadowMatrix.length=_,r.pointShadowMatrix.length=v,r.spotLightMatrix.length=x+y-M,r.spotLightMap.length=y,r.numSpotLightShadowsWithMaps=M,r.numLightProbes=S,T.directionalLength=c,T.pointLength=h,T.spotLength=d,T.rectAreaLength=f,T.hemiLength=m,T.numDirectionalShadows=_,T.numPointShadows=v,T.numSpotShadows=x,T.numSpotMaps=y,T.numLightProbes=S,r.version=Kl++)},setupView:function(t,e){let n=0,h=0,d=0,f=0,m=0;const _=e.matrixWorldInverse;for(let i=0,e=t.length;i<e;i++){const e=t[i];if(e.isDirectionalLight){const t=r.directional[n];t.direction.setFromMatrixPosition(e.matrixWorld),o.setFromMatrixPosition(e.target.matrixWorld),t.direction.sub(o),t.direction.transformDirection(_),n++}else if(e.isSpotLight){const t=r.spot[d];t.position.setFromMatrixPosition(e.matrixWorld),t.position.applyMatrix4(_),t.direction.setFromMatrixPosition(e.matrixWorld),o.setFromMatrixPosition(e.target.matrixWorld),t.direction.sub(o),t.direction.transformDirection(_),d++}else if(e.isRectAreaLight){const t=r.rectArea[f];t.position.setFromMatrixPosition(e.matrixWorld),t.position.applyMatrix4(_),c.identity(),l.copy(e.matrixWorld),l.premultiply(_),c.extractRotation(l),t.halfWidth.set(.5*e.width,0,0),t.halfHeight.set(0,.5*e.height,0),t.halfWidth.applyMatrix4(c),t.halfHeight.applyMatrix4(c),f++}else if(e.isPointLight){const t=r.point[h];t.position.setFromMatrixPosition(e.matrixWorld),t.position.applyMatrix4(_),h++}else if(e.isHemisphereLight){const t=r.hemi[m];t.direction.setFromMatrixPosition(e.matrixWorld),t.direction.transformDirection(_),m++}}},state:r}}function tc(t){const e=new Ql(t),n=[],r=[];const o={lightsArray:n,shadowsArray:r,camera:null,lights:e,transmissionRenderTarget:{}};return{init:function(t){o.camera=t,n.length=0,r.length=0},state:o,setupLights:function(){e.setup(n)},setupLightsView:function(t){e.setupView(n,t)},pushLight:function(t){n.push(t)},pushShadow:function(t){r.push(t)}}}function ec(t){let e=new WeakMap;return{get:function(n,r=0){const o=e.get(n);let l;return void 0===o?(l=new tc(t),e.set(n,[l])):r>=o.length?(l=new tc(t),o.push(l)):l=o[r],l},dispose:function(){e=new WeakMap}}}class nc extends _s{static get type(){return"MeshDepthMaterial"}constructor(t){super(),this.isMeshDepthMaterial=!0,this.depthPacking=nn,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.setValues(t)}copy(source){return super.copy(source),this.depthPacking=source.depthPacking,this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this}}class ic extends _s{static get type(){return"MeshDistanceMaterial"}constructor(t){super(),this.isMeshDistanceMaterial=!0,this.map=null,this.alphaMap=null,this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.setValues(t)}copy(source){return super.copy(source),this.map=source.map,this.alphaMap=source.alphaMap,this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this}}function rc(t,e,n){let r=new Ta;const o=new hi,l=new hi,c=new Ni,h=new nc({depthPacking:rn}),d=new ic,f={},m=n.maxTextureSize,v={[y]:M,[M]:y,[S]:S},w=new la({defines:{VSM_SAMPLES:8},uniforms:{shadow_pass:{value:null},resolution:{value:new hi},radius:{value:4}},vertexShader:"void main() {\n\tgl_Position = vec4( position, 1.0 );\n}",fragmentShader:"uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}"}),E=w.clone();E.defines.HORIZONTAL_PASS=1;const A=new Gs;A.setAttribute("position",new Es(new Float32Array([-1,-1,.5,3,-1,.5,-1,3,.5]),3));const C=new ea(A,w),R=this;this.enabled=!1,this.autoUpdate=!0,this.needsUpdate=!1,this.type=_;let P=this.type;function I(shadow,n){const r=e.update(C);w.defines.VSM_SAMPLES!==shadow.blurSamples&&(w.defines.VSM_SAMPLES=shadow.blurSamples,E.defines.VSM_SAMPLES=shadow.blurSamples,w.needsUpdate=!0,E.needsUpdate=!0),null===shadow.mapPass&&(shadow.mapPass=new Fi(o.x,o.y)),w.uniforms.shadow_pass.value=shadow.map.texture,w.uniforms.resolution.value=shadow.mapSize,w.uniforms.radius.value=shadow.radius,t.setRenderTarget(shadow.mapPass),t.clear(),t.renderBufferDirect(n,null,r,w,C,null),E.uniforms.shadow_pass.value=shadow.mapPass.texture,E.uniforms.resolution.value=shadow.mapSize,E.uniforms.radius.value=shadow.radius,t.setRenderTarget(shadow.map),t.clear(),t.renderBufferDirect(n,null,r,E,C,null)}function L(object,e,n,r){let o=null;const l=!0===n.isPointLight?object.customDistanceMaterial:object.customDepthMaterial;if(void 0!==l)o=l;else if(o=!0===n.isPointLight?d:h,t.localClippingEnabled&&!0===e.clipShadows&&Array.isArray(e.clippingPlanes)&&0!==e.clippingPlanes.length||e.displacementMap&&0!==e.displacementScale||e.alphaMap&&e.alphaTest>0||e.map&&e.alphaTest>0){const t=o.uuid,n=e.uuid;let r=f[t];void 0===r&&(r={},f[t]=r);let l=r[n];void 0===l&&(l=o.clone(),r[n]=l,e.addEventListener("dispose",D)),o=l}if(o.visible=e.visible,o.wireframe=e.wireframe,o.side=r===x?null!==e.shadowSide?e.shadowSide:e.side:null!==e.shadowSide?e.shadowSide:v[e.side],o.alphaMap=e.alphaMap,o.alphaTest=e.alphaTest,o.map=e.map,o.clipShadows=e.clipShadows,o.clippingPlanes=e.clippingPlanes,o.clipIntersection=e.clipIntersection,o.displacementMap=e.displacementMap,o.displacementScale=e.displacementScale,o.displacementBias=e.displacementBias,o.wireframeLinewidth=e.wireframeLinewidth,o.linewidth=e.linewidth,!0===n.isPointLight&&!0===o.isMeshDistanceMaterial){t.properties.get(o).light=n}return o}function U(object,n,o,l,c){if(!1===object.visible)return;if(object.layers.test(n.layers)&&(object.isMesh||object.isLine||object.isPoints)&&(object.castShadow||object.receiveShadow&&c===x)&&(!object.frustumCulled||r.intersectsObject(object))){object.modelViewMatrix.multiplyMatrices(o.matrixWorldInverse,object.matrixWorld);const r=e.update(object),h=object.material;if(Array.isArray(h)){const e=r.groups;for(let d=0,f=e.length;d<f;d++){const f=e[d],m=h[f.materialIndex];if(m&&m.visible){const e=L(object,m,l,c);object.onBeforeShadow(t,object,n,o,r,e,f),t.renderBufferDirect(o,null,r,e,object,f),object.onAfterShadow(t,object,n,o,r,e,f)}}}else if(h.visible){const e=L(object,h,l,c);object.onBeforeShadow(t,object,n,o,r,e,null),t.renderBufferDirect(o,null,r,e,object,null),object.onAfterShadow(t,object,n,o,r,e,null)}}const h=object.children;for(let i=0,t=h.length;i<t;i++)U(h[i],n,o,l,c)}function D(t){t.target.removeEventListener("dispose",D);for(const e in f){const n=f[e],r=t.target.uuid;if(r in n){n[r].dispose(),delete n[r]}}}this.render=function(e,n,h){if(!1===R.enabled)return;if(!1===R.autoUpdate&&!1===R.needsUpdate)return;if(0===e.length)return;const d=t.getRenderTarget(),f=t.getActiveCubeFace(),_=t.getActiveMipmapLevel(),v=t.state;v.setBlending(T),v.buffers.color.setClear(1,1,1,1),v.buffers.depth.setTest(!0),v.setScissorTest(!1);const y=P!==x&&this.type===x,M=P===x&&this.type!==x;for(let i=0,d=e.length;i<d;i++){const d=e[i],shadow=d.shadow;if(void 0===shadow){console.warn("THREE.WebGLShadowMap:",d,"has no shadow.");continue}if(!1===shadow.autoUpdate&&!1===shadow.needsUpdate)continue;o.copy(shadow.mapSize);const f=shadow.getFrameExtents();if(o.multiply(f),l.copy(shadow.mapSize),(o.x>m||o.y>m)&&(o.x>m&&(l.x=Math.floor(m/f.x),o.x=l.x*f.x,shadow.mapSize.x=l.x),o.y>m&&(l.y=Math.floor(m/f.y),o.y=l.y*f.y,shadow.mapSize.y=l.y)),null===shadow.map||!0===y||!0===M){const t=this.type!==x?{minFilter:Rt,magFilter:Rt}:{};null!==shadow.map&&shadow.map.dispose(),shadow.map=new Fi(o.x,o.y,t),shadow.map.texture.name=d.name+".shadowMap",shadow.camera.updateProjectionMatrix()}t.setRenderTarget(shadow.map),t.clear();const _=shadow.getViewportCount();for(let t=0;t<_;t++){const e=shadow.getViewport(t);c.set(l.x*e.x,l.y*e.y,l.x*e.z,l.y*e.w),v.viewport(c),shadow.updateMatrices(d,t),r=shadow.getFrustum(),U(n,h,shadow.camera,d,this.type)}!0!==shadow.isPointLightShadow&&this.type===x&&I(shadow,h),shadow.needsUpdate=!1}P=this.type,R.needsUpdate=!1,t.setRenderTarget(d,f,_)}}const sc={[K]:$,[Q]:it,[et]:st,[tt]:nt,[$]:K,[it]:Q,[st]:et,[nt]:tt};function ac(t,e){const n=new function(){let e=!1;const n=new Ni;let r=null;const o=new Ni(0,0,0,0);return{setMask:function(n){r===n||e||(t.colorMask(n,n,n,n),r=n)},setLocked:function(t){e=t},setClear:function(e,g,b,a,r){!0===r&&(e*=a,g*=a,b*=a),n.set(e,g,b,a),!1===o.equals(n)&&(t.clearColor(e,g,b,a),o.copy(n))},reset:function(){e=!1,r=null,o.set(-1,0,0,0)}}},r=new function(){let n=!1,r=!1,o=null,l=null,c=null;return{setReversed:function(t){if(r!==t){const t=e.get("EXT_clip_control");r?t.clipControlEXT(t.LOWER_LEFT_EXT,t.ZERO_TO_ONE_EXT):t.clipControlEXT(t.LOWER_LEFT_EXT,t.NEGATIVE_ONE_TO_ONE_EXT);const n=c;c=null,this.setClear(n)}r=t},getReversed:function(){return r},setTest:function(e){e?Nt(t.DEPTH_TEST):Ot(t.DEPTH_TEST)},setMask:function(e){o===e||n||(t.depthMask(e),o=e)},setFunc:function(e){if(r&&(e=sc[e]),l!==e){switch(e){case K:t.depthFunc(t.NEVER);break;case $:t.depthFunc(t.ALWAYS);break;case Q:t.depthFunc(t.LESS);break;case tt:t.depthFunc(t.LEQUAL);break;case et:t.depthFunc(t.EQUAL);break;case nt:t.depthFunc(t.GEQUAL);break;case it:t.depthFunc(t.GREATER);break;case st:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}l=e}},setLocked:function(t){n=t},setClear:function(e){c!==e&&(r&&(e=1-e),t.clearDepth(e),c=e)},reset:function(){n=!1,o=null,l=null,c=null,r=!1}}},o=new function(){let e=!1,n=null,r=null,o=null,l=null,c=null,h=null,d=null,f=null;return{setTest:function(n){e||(n?Nt(t.STENCIL_TEST):Ot(t.STENCIL_TEST))},setMask:function(r){n===r||e||(t.stencilMask(r),n=r)},setFunc:function(e,n,c){r===e&&o===n&&l===c||(t.stencilFunc(e,n,c),r=e,o=n,l=c)},setOp:function(e,n,r){c===e&&h===n&&d===r||(t.stencilOp(e,n,r),c=e,h=n,d=r)},setLocked:function(t){e=t},setClear:function(e){f!==e&&(t.clearStencil(e),f=e)},reset:function(){e=!1,n=null,r=null,o=null,l=null,c=null,h=null,d=null,f=null}}},l=new WeakMap,f=new WeakMap;let m={},_={},v=new WeakMap,x=[],y=null,at=!1,ot=null,lt=null,ct=null,ht=null,ut=null,pt=null,ft=null,mt=new fs(0,0,0),gt=0,_t=!1,vt=null,xt=null,yt=null,Mt=null,St=null;const bt=t.getParameter(t.MAX_COMBINED_TEXTURE_IMAGE_UNITS);let Tt=!1,wt=0;const Et=t.getParameter(t.VERSION);-1!==Et.indexOf("WebGL")?(wt=parseFloat(/^WebGL (\d)/.exec(Et)[1]),Tt=wt>=1):-1!==Et.indexOf("OpenGL ES")&&(wt=parseFloat(/^OpenGL ES (\d)/.exec(Et)[1]),Tt=wt>=2);let At=null,Ct={};const Rt=t.getParameter(t.SCISSOR_BOX),Pt=t.getParameter(t.VIEWPORT),It=(new Ni).fromArray(Rt),Lt=(new Ni).fromArray(Pt);function Ut(e,n,r,o){const data=new Uint8Array(4),l=t.createTexture();t.bindTexture(e,l),t.texParameteri(e,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(e,t.TEXTURE_MAG_FILTER,t.NEAREST);for(let i=0;i<r;i++)e===t.TEXTURE_3D||e===t.TEXTURE_2D_ARRAY?t.texImage3D(n,0,t.RGBA,1,1,o,0,t.RGBA,t.UNSIGNED_BYTE,data):t.texImage2D(n+i,0,t.RGBA,1,1,0,t.RGBA,t.UNSIGNED_BYTE,data);return l}const Dt={};function Nt(e){!0!==m[e]&&(t.enable(e),m[e]=!0)}function Ot(e){!1!==m[e]&&(t.disable(e),m[e]=!1)}Dt[t.TEXTURE_2D]=Ut(t.TEXTURE_2D,t.TEXTURE_2D,1),Dt[t.TEXTURE_CUBE_MAP]=Ut(t.TEXTURE_CUBE_MAP,t.TEXTURE_CUBE_MAP_POSITIVE_X,6),Dt[t.TEXTURE_2D_ARRAY]=Ut(t.TEXTURE_2D_ARRAY,t.TEXTURE_2D_ARRAY,1,1),Dt[t.TEXTURE_3D]=Ut(t.TEXTURE_3D,t.TEXTURE_3D,1,1),n.setClear(0,0,0,1),r.setClear(1),o.setClear(0),Nt(t.DEPTH_TEST),r.setFunc(tt),kt(!1),Vt(h),Nt(t.CULL_FACE),zt(T);const Ft={[P]:t.FUNC_ADD,[I]:t.FUNC_SUBTRACT,[L]:t.FUNC_REVERSE_SUBTRACT};Ft[U]=t.MIN,Ft[D]=t.MAX;const Bt={[N]:t.ZERO,[O]:t.ONE,[F]:t.SRC_COLOR,[z]:t.SRC_ALPHA,[X]:t.SRC_ALPHA_SATURATE,[G]:t.DST_COLOR,[V]:t.DST_ALPHA,[B]:t.ONE_MINUS_SRC_COLOR,[k]:t.ONE_MINUS_SRC_ALPHA,[W]:t.ONE_MINUS_DST_COLOR,[H]:t.ONE_MINUS_DST_ALPHA,[j]:t.CONSTANT_COLOR,[Y]:t.ONE_MINUS_CONSTANT_COLOR,[Z]:t.CONSTANT_ALPHA,[J]:t.ONE_MINUS_CONSTANT_ALPHA};function zt(e,n,r,o,l,c,h,d,f,m){if(e!==T){if(!1===at&&(Nt(t.BLEND),at=!0),e===R)l=l||n,c=c||r,h=h||o,n===lt&&l===ut||(t.blendEquationSeparate(Ft[n],Ft[l]),lt=n,ut=l),r===ct&&o===ht&&c===pt&&h===ft||(t.blendFuncSeparate(Bt[r],Bt[o],Bt[c],Bt[h]),ct=r,ht=o,pt=c,ft=h),!1!==d.equals(mt)&&f===gt||(t.blendColor(d.r,d.g,d.b,f),mt.copy(d),gt=f),ot=e,_t=!1;else if(e!==ot||m!==_t){if(lt===P&&ut===P||(t.blendEquation(t.FUNC_ADD),lt=P,ut=P),m)switch(e){case w:t.blendFuncSeparate(t.ONE,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case E:t.blendFunc(t.ONE,t.ONE);break;case A:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case C:t.blendFuncSeparate(t.ZERO,t.SRC_COLOR,t.ZERO,t.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case w:t.blendFuncSeparate(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA,t.ONE,t.ONE_MINUS_SRC_ALPHA);break;case E:t.blendFunc(t.SRC_ALPHA,t.ONE);break;case A:t.blendFuncSeparate(t.ZERO,t.ONE_MINUS_SRC_COLOR,t.ZERO,t.ONE);break;case C:t.blendFunc(t.ZERO,t.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}ct=null,ht=null,pt=null,ft=null,mt.set(0,0,0),gt=0,ot=e,_t=m}}else!0===at&&(Ot(t.BLEND),at=!1)}function kt(e){vt!==e&&(e?t.frontFace(t.CW):t.frontFace(t.CCW),vt=e)}function Vt(e){e!==c?(Nt(t.CULL_FACE),e!==xt&&(e===h?t.cullFace(t.BACK):e===d?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):Ot(t.CULL_FACE),xt=e}function Ht(e,n,r){e?(Nt(t.POLYGON_OFFSET_FILL),Mt===n&&St===r||(t.polygonOffset(n,r),Mt=n,St=r)):Ot(t.POLYGON_OFFSET_FILL)}return{buffers:{color:n,depth:r,stencil:o},enable:Nt,disable:Ot,bindFramebuffer:function(e,n){return _[e]!==n&&(t.bindFramebuffer(e,n),_[e]=n,e===t.DRAW_FRAMEBUFFER&&(_[t.FRAMEBUFFER]=n),e===t.FRAMEBUFFER&&(_[t.DRAW_FRAMEBUFFER]=n),!0)},drawBuffers:function(e,n){let r=x,o=!1;if(e){r=v.get(n),void 0===r&&(r=[],v.set(n,r));const l=e.textures;if(r.length!==l.length||r[0]!==t.COLOR_ATTACHMENT0){for(let i=0,e=l.length;i<e;i++)r[i]=t.COLOR_ATTACHMENT0+i;r.length=l.length,o=!0}}else r[0]!==t.BACK&&(r[0]=t.BACK,o=!0);o&&t.drawBuffers(r)},useProgram:function(e){return y!==e&&(t.useProgram(e),y=e,!0)},setBlending:zt,setMaterial:function(e,l){e.side===S?Ot(t.CULL_FACE):Nt(t.CULL_FACE);let c=e.side===M;l&&(c=!c),kt(c),e.blending===w&&!1===e.transparent?zt(T):zt(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.blendColor,e.blendAlpha,e.premultipliedAlpha),r.setFunc(e.depthFunc),r.setTest(e.depthTest),r.setMask(e.depthWrite),n.setMask(e.colorWrite);const h=e.stencilWrite;o.setTest(h),h&&(o.setMask(e.stencilWriteMask),o.setFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),o.setOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),Ht(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage?Nt(t.SAMPLE_ALPHA_TO_COVERAGE):Ot(t.SAMPLE_ALPHA_TO_COVERAGE)},setFlipSided:kt,setCullFace:Vt,setLineWidth:function(e){e!==yt&&(Tt&&t.lineWidth(e),yt=e)},setPolygonOffset:Ht,setScissorTest:function(e){e?Nt(t.SCISSOR_TEST):Ot(t.SCISSOR_TEST)},activeTexture:function(e){void 0===e&&(e=t.TEXTURE0+bt-1),At!==e&&(t.activeTexture(e),At=e)},bindTexture:function(e,n,r){void 0===r&&(r=null===At?t.TEXTURE0+bt-1:At);let o=Ct[r];void 0===o&&(o={type:void 0,texture:void 0},Ct[r]=o),o.type===e&&o.texture===n||(At!==r&&(t.activeTexture(r),At=r),t.bindTexture(e,n||Dt[e]),o.type=e,o.texture=n)},unbindTexture:function(){const e=Ct[At];void 0!==e&&void 0!==e.type&&(t.bindTexture(e.type,null),e.type=void 0,e.texture=void 0)},compressedTexImage2D:function(){try{t.compressedTexImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexImage3D:function(){try{t.compressedTexImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage2D:function(){try{t.texImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texImage3D:function(){try{t.texImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},updateUBOMapping:function(e,n){let r=f.get(n);void 0===r&&(r=new WeakMap,f.set(n,r));let o=r.get(e);void 0===o&&(o=t.getUniformBlockIndex(n,e.name),r.set(e,o))},uniformBlockBinding:function(e,n){const r=f.get(n).get(e);l.get(n)!==r&&(t.uniformBlockBinding(n,r,e.__bindingPointIndex),l.set(n,r))},texStorage2D:function(){try{t.texStorage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texStorage3D:function(){try{t.texStorage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage2D:function(){try{t.texSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},texSubImage3D:function(){try{t.texSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage2D:function(){try{t.compressedTexSubImage2D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},compressedTexSubImage3D:function(){try{t.compressedTexSubImage3D.apply(t,arguments)}catch(t){console.error("THREE.WebGLState:",t)}},scissor:function(e){!1===It.equals(e)&&(t.scissor(e.x,e.y,e.z,e.w),It.copy(e))},viewport:function(e){!1===Lt.equals(e)&&(t.viewport(e.x,e.y,e.z,e.w),Lt.copy(e))},reset:function(){t.disable(t.BLEND),t.disable(t.CULL_FACE),t.disable(t.DEPTH_TEST),t.disable(t.POLYGON_OFFSET_FILL),t.disable(t.SCISSOR_TEST),t.disable(t.STENCIL_TEST),t.disable(t.SAMPLE_ALPHA_TO_COVERAGE),t.blendEquation(t.FUNC_ADD),t.blendFunc(t.ONE,t.ZERO),t.blendFuncSeparate(t.ONE,t.ZERO,t.ONE,t.ZERO),t.blendColor(0,0,0,0),t.colorMask(!0,!0,!0,!0),t.clearColor(0,0,0,0),t.depthMask(!0),t.depthFunc(t.LESS),r.setReversed(!1),t.clearDepth(1),t.stencilMask(4294967295),t.stencilFunc(t.ALWAYS,0,4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP),t.clearStencil(0),t.cullFace(t.BACK),t.frontFace(t.CCW),t.polygonOffset(0,0),t.activeTexture(t.TEXTURE0),t.bindFramebuffer(t.FRAMEBUFFER,null),t.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),t.bindFramebuffer(t.READ_FRAMEBUFFER,null),t.useProgram(null),t.lineWidth(1),t.scissor(0,0,t.canvas.width,t.canvas.height),t.viewport(0,0,t.canvas.width,t.canvas.height),m={},At=null,Ct={},_={},v=new WeakMap,x=[],y=null,at=!1,ot=null,lt=null,ct=null,ht=null,ut=null,pt=null,ft=null,mt=new fs(0,0,0),gt=0,_t=!1,vt=null,xt=null,yt=null,Mt=null,St=null,It.set(0,0,t.canvas.width,t.canvas.height),Lt.set(0,0,t.canvas.width,t.canvas.height),n.reset(),r.reset(),o.reset()}}}function oc(t,e,n,r){const o=function(t){switch(t){case zt:case kt:return{byteLength:1,components:1};case Ht:case Vt:case jt:return{byteLength:2,components:1};case qt:case Yt:return{byteLength:2,components:4};case Wt:case Gt:case Xt:return{byteLength:4,components:1};case Jt:return{byteLength:4,components:3}}throw new Error(`Unknown texture type ${t}.`)}(r);switch(n){case Kt:case te:return t*e;case ee:return t*e*2;case re:case se:return t*e/o.components*o.byteLength;case ae:case oe:return t*e*2/o.components*o.byteLength;case $t:return t*e*3/o.components*o.byteLength;case Qt:case ce:return t*e*4/o.components*o.byteLength;case he:case ue:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case de:case pe:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case me:case _e:return Math.max(t,16)*Math.max(e,8)/4;case fe:case ge:return Math.max(t,8)*Math.max(e,8)/2;case ve:case xe:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*8;case ye:case Me:return Math.floor((t+3)/4)*Math.floor((e+3)/4)*16;case Se:return Math.floor((t+4)/5)*Math.floor((e+3)/4)*16;case be:return Math.floor((t+4)/5)*Math.floor((e+4)/5)*16;case Te:return Math.floor((t+5)/6)*Math.floor((e+4)/5)*16;case we:return Math.floor((t+5)/6)*Math.floor((e+5)/6)*16;case Ee:return Math.floor((t+7)/8)*Math.floor((e+4)/5)*16;case Ae:return Math.floor((t+7)/8)*Math.floor((e+5)/6)*16;case Ce:return Math.floor((t+7)/8)*Math.floor((e+7)/8)*16;case Re:return Math.floor((t+9)/10)*Math.floor((e+4)/5)*16;case Pe:return Math.floor((t+9)/10)*Math.floor((e+5)/6)*16;case Ie:return Math.floor((t+9)/10)*Math.floor((e+7)/8)*16;case Le:return Math.floor((t+9)/10)*Math.floor((e+9)/10)*16;case Ue:return Math.floor((t+11)/12)*Math.floor((e+9)/10)*16;case De:return Math.floor((t+11)/12)*Math.floor((e+11)/12)*16;case Ne:case Oe:case Fe:return Math.ceil(t/4)*Math.ceil(e/4)*16;case Be:case ze:return Math.ceil(t/4)*Math.ceil(e/4)*8;case ke:case Ve:return Math.ceil(t/4)*Math.ceil(e/4)*16}throw new Error(`Unable to determine texture byte length for ${n} format.`)}const lc={contain:function(t,e){const n=t.image&&t.image.width?t.image.width/t.image.height:1;return n>e?(t.repeat.x=1,t.repeat.y=n/e,t.offset.x=0,t.offset.y=(1-t.repeat.y)/2):(t.repeat.x=e/n,t.repeat.y=1,t.offset.x=(1-t.repeat.x)/2,t.offset.y=0),t},cover:function(t,e){const n=t.image&&t.image.width?t.image.width/t.image.height:1;return n>e?(t.repeat.x=e/n,t.repeat.y=1,t.offset.x=(1-t.repeat.x)/2,t.offset.y=0):(t.repeat.x=1,t.repeat.y=n/e,t.offset.x=0,t.offset.y=(1-t.repeat.y)/2),t},fill:function(t){return t.repeat.x=1,t.repeat.y=1,t.offset.x=0,t.offset.y=0,t},getByteLength:oc};function cc(t,e,n,r,o,l,c){const h=e.has("WEBGL_multisampled_render_to_texture")?e.get("WEBGL_multisampled_render_to_texture"):null,d="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),f=new hi,m=new WeakMap;let _;const v=new WeakMap;let x=!1;try{x="undefined"!=typeof OffscreenCanvas&&null!==new OffscreenCanvas(1,1).getContext("2d")}catch(t){}function y(t,e){return x?new OffscreenCanvas(t,e):gi("canvas")}function M(image,t,e){let n=1;const r=Z(image);if((r.width>e||r.height>e)&&(n=e/Math.max(r.width,r.height)),n<1){if("undefined"!=typeof HTMLImageElement&&image instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&image instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&image instanceof ImageBitmap||"undefined"!=typeof VideoFrame&&image instanceof VideoFrame){const e=Math.floor(n*r.width),o=Math.floor(n*r.height);void 0===_&&(_=y(e,o));const canvas=t?y(e,o):_;canvas.width=e,canvas.height=o;return canvas.getContext("2d").drawImage(image,0,0,e,o),console.warn("THREE.WebGLRenderer: Texture has been resized from ("+r.width+"x"+r.height+") to ("+e+"x"+o+")."),canvas}return"data"in image&&console.warn("THREE.WebGLRenderer: Image in DataTexture is too big ("+r.width+"x"+r.height+")."),image}return image}function S(t){return t.generateMipmaps}function T(e){t.generateMipmap(e)}function w(e){return e.isWebGLCubeRenderTarget?t.TEXTURE_CUBE_MAP:e.isWebGL3DRenderTarget?t.TEXTURE_3D:e.isWebGLArrayRenderTarget||e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:t.TEXTURE_2D}function E(n,r,o,l,c=!1){if(null!==n){if(void 0!==t[n])return t[n];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+n+"'")}let h=r;if(r===t.RED&&(o===t.FLOAT&&(h=t.R32F),o===t.HALF_FLOAT&&(h=t.R16F),o===t.UNSIGNED_BYTE&&(h=t.R8)),r===t.RED_INTEGER&&(o===t.UNSIGNED_BYTE&&(h=t.R8UI),o===t.UNSIGNED_SHORT&&(h=t.R16UI),o===t.UNSIGNED_INT&&(h=t.R32UI),o===t.BYTE&&(h=t.R8I),o===t.SHORT&&(h=t.R16I),o===t.INT&&(h=t.R32I)),r===t.RG&&(o===t.FLOAT&&(h=t.RG32F),o===t.HALF_FLOAT&&(h=t.RG16F),o===t.UNSIGNED_BYTE&&(h=t.RG8)),r===t.RG_INTEGER&&(o===t.UNSIGNED_BYTE&&(h=t.RG8UI),o===t.UNSIGNED_SHORT&&(h=t.RG16UI),o===t.UNSIGNED_INT&&(h=t.RG32UI),o===t.BYTE&&(h=t.RG8I),o===t.SHORT&&(h=t.RG16I),o===t.INT&&(h=t.RG32I)),r===t.RGB_INTEGER&&(o===t.UNSIGNED_BYTE&&(h=t.RGB8UI),o===t.UNSIGNED_SHORT&&(h=t.RGB16UI),o===t.UNSIGNED_INT&&(h=t.RGB32UI),o===t.BYTE&&(h=t.RGB8I),o===t.SHORT&&(h=t.RGB16I),o===t.INT&&(h=t.RGB32I)),r===t.RGBA_INTEGER&&(o===t.UNSIGNED_BYTE&&(h=t.RGBA8UI),o===t.UNSIGNED_SHORT&&(h=t.RGBA16UI),o===t.UNSIGNED_INT&&(h=t.RGBA32UI),o===t.BYTE&&(h=t.RGBA8I),o===t.SHORT&&(h=t.RGBA16I),o===t.INT&&(h=t.RGBA32I)),r===t.RGB&&o===t.UNSIGNED_INT_5_9_9_9_REV&&(h=t.RGB9_E5),r===t.RGBA){const e=c?dn:yi.getTransfer(l);o===t.FLOAT&&(h=t.RGBA32F),o===t.HALF_FLOAT&&(h=t.RGBA16F),o===t.UNSIGNED_BYTE&&(h=e===pn?t.SRGB8_ALPHA8:t.RGBA8),o===t.UNSIGNED_SHORT_4_4_4_4&&(h=t.RGBA4),o===t.UNSIGNED_SHORT_5_5_5_1&&(h=t.RGB5_A1)}return h!==t.R16F&&h!==t.R32F&&h!==t.RG16F&&h!==t.RG32F&&h!==t.RGBA16F&&h!==t.RGBA32F||e.get("EXT_color_buffer_float"),h}function A(e,n){let r;return e?null===n||n===Wt||n===Zt?r=t.DEPTH24_STENCIL8:n===Xt?r=t.DEPTH32F_STENCIL8:n===Ht&&(r=t.DEPTH24_STENCIL8,console.warn("DepthTexture: 16 bit depth attachment is not supported with stencil. Using 24-bit attachment.")):null===n||n===Wt||n===Zt?r=t.DEPTH_COMPONENT24:n===Xt?r=t.DEPTH_COMPONENT32F:n===Ht&&(r=t.DEPTH_COMPONENT16),r}function C(t,image){return!0===S(t)||t.isFramebufferTexture&&t.minFilter!==Rt&&t.minFilter!==Dt?Math.log2(Math.max(image.width,image.height))+1:void 0!==t.mipmaps&&t.mipmaps.length>0?t.mipmaps.length:t.isCompressedTexture&&Array.isArray(t.image)?image.mipmaps.length:1}function R(t){const e=t.target;e.removeEventListener("dispose",R),function(t){const e=r.get(t);if(void 0===e.__webglInit)return;const source=t.source,n=v.get(source);if(n){const r=n[e.__cacheKey];r.usedTimes--,0===r.usedTimes&&I(t),0===Object.keys(n).length&&v.delete(source)}r.remove(t)}(e),e.isVideoTexture&&m.delete(e)}function P(e){const n=e.target;n.removeEventListener("dispose",P),function(e){const n=r.get(e);e.depthTexture&&(e.depthTexture.dispose(),r.remove(e.depthTexture));if(e.isWebGLCubeRenderTarget)for(let i=0;i<6;i++){if(Array.isArray(n.__webglFramebuffer[i]))for(let e=0;e<n.__webglFramebuffer[i].length;e++)t.deleteFramebuffer(n.__webglFramebuffer[i][e]);else t.deleteFramebuffer(n.__webglFramebuffer[i]);n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer[i])}else{if(Array.isArray(n.__webglFramebuffer))for(let e=0;e<n.__webglFramebuffer.length;e++)t.deleteFramebuffer(n.__webglFramebuffer[e]);else t.deleteFramebuffer(n.__webglFramebuffer);if(n.__webglDepthbuffer&&t.deleteRenderbuffer(n.__webglDepthbuffer),n.__webglMultisampledFramebuffer&&t.deleteFramebuffer(n.__webglMultisampledFramebuffer),n.__webglColorRenderbuffer)for(let i=0;i<n.__webglColorRenderbuffer.length;i++)n.__webglColorRenderbuffer[i]&&t.deleteRenderbuffer(n.__webglColorRenderbuffer[i]);n.__webglDepthRenderbuffer&&t.deleteRenderbuffer(n.__webglDepthRenderbuffer)}const o=e.textures;for(let i=0,e=o.length;i<e;i++){const e=r.get(o[i]);e.__webglTexture&&(t.deleteTexture(e.__webglTexture),c.memory.textures--),r.remove(o[i])}r.remove(e)}(n)}function I(e){const n=r.get(e);t.deleteTexture(n.__webglTexture);const source=e.source;delete v.get(source)[n.__cacheKey],c.memory.textures--}let L=0;function U(e,slot){const o=r.get(e);if(e.isVideoTexture&&function(t){const e=c.render.frame;m.get(t)!==e&&(m.set(t,e),t.update())}(e),!1===e.isRenderTargetTexture&&e.version>0&&o.__version!==e.version){const image=e.image;if(null===image)console.warn("THREE.WebGLRenderer: Texture marked for update but no image data found.");else{if(!1!==image.complete)return void z(o,e,slot);console.warn("THREE.WebGLRenderer: Texture marked for update but image is incomplete")}}n.bindTexture(t.TEXTURE_2D,o.__webglTexture,t.TEXTURE0+slot)}const D={[Et]:t.REPEAT,[At]:t.CLAMP_TO_EDGE,[Ct]:t.MIRRORED_REPEAT},N={[Rt]:t.NEAREST,[Pt]:t.NEAREST_MIPMAP_NEAREST,[Lt]:t.NEAREST_MIPMAP_LINEAR,[Dt]:t.LINEAR,[Nt]:t.LINEAR_MIPMAP_NEAREST,[Ft]:t.LINEAR_MIPMAP_LINEAR},O={[Pn]:t.NEVER,[Fn]:t.ALWAYS,[In]:t.LESS,[Un]:t.LEQUAL,[Ln]:t.EQUAL,[On]:t.GEQUAL,[Dn]:t.GREATER,[Nn]:t.NOTEQUAL};function F(n,l){if(l.type!==Xt||!1!==e.has("OES_texture_float_linear")||l.magFilter!==Dt&&l.magFilter!==Nt&&l.magFilter!==Lt&&l.magFilter!==Ft&&l.minFilter!==Dt&&l.minFilter!==Nt&&l.minFilter!==Lt&&l.minFilter!==Ft||console.warn("THREE.WebGLRenderer: Unable to use linear filtering with floating point textures. OES_texture_float_linear not supported on this device."),t.texParameteri(n,t.TEXTURE_WRAP_S,D[l.wrapS]),t.texParameteri(n,t.TEXTURE_WRAP_T,D[l.wrapT]),n!==t.TEXTURE_3D&&n!==t.TEXTURE_2D_ARRAY||t.texParameteri(n,t.TEXTURE_WRAP_R,D[l.wrapR]),t.texParameteri(n,t.TEXTURE_MAG_FILTER,N[l.magFilter]),t.texParameteri(n,t.TEXTURE_MIN_FILTER,N[l.minFilter]),l.compareFunction&&(t.texParameteri(n,t.TEXTURE_COMPARE_MODE,t.COMPARE_REF_TO_TEXTURE),t.texParameteri(n,t.TEXTURE_COMPARE_FUNC,O[l.compareFunction])),!0===e.has("EXT_texture_filter_anisotropic")){if(l.magFilter===Rt)return;if(l.minFilter!==Lt&&l.minFilter!==Ft)return;if(l.type===Xt&&!1===e.has("OES_texture_float_linear"))return;if(l.anisotropy>1||r.get(l).__currentAnisotropy){const c=e.get("EXT_texture_filter_anisotropic");t.texParameterf(n,c.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(l.anisotropy,o.getMaxAnisotropy())),r.get(l).__currentAnisotropy=l.anisotropy}}}function B(e,n){let r=!1;void 0===e.__webglInit&&(e.__webglInit=!0,n.addEventListener("dispose",R));const source=n.source;let o=v.get(source);void 0===o&&(o={},v.set(source,o));const l=function(t){const e=[];return e.push(t.wrapS),e.push(t.wrapT),e.push(t.wrapR||0),e.push(t.magFilter),e.push(t.minFilter),e.push(t.anisotropy),e.push(t.internalFormat),e.push(t.format),e.push(t.type),e.push(t.generateMipmaps),e.push(t.premultiplyAlpha),e.push(t.flipY),e.push(t.unpackAlignment),e.push(t.colorSpace),e.join()}(n);if(l!==e.__cacheKey){void 0===o[l]&&(o[l]={texture:t.createTexture(),usedTimes:0},c.memory.textures++,r=!0),o[l].usedTimes++;const h=o[e.__cacheKey];void 0!==h&&(o[e.__cacheKey].usedTimes--,0===h.usedTimes&&I(n)),e.__cacheKey=l,e.__webglTexture=o[l].texture}return r}function z(e,c,slot){let h=t.TEXTURE_2D;(c.isDataArrayTexture||c.isCompressedArrayTexture)&&(h=t.TEXTURE_2D_ARRAY),c.isData3DTexture&&(h=t.TEXTURE_3D);const d=B(e,c),source=c.source;n.bindTexture(h,e.__webglTexture,t.TEXTURE0+slot);const f=r.get(source);if(source.version!==f.__version||!0===d){n.activeTexture(t.TEXTURE0+slot);const e=yi.getPrimaries(yi.workingColorSpace),r=c.colorSpace===cn?null:yi.getPrimaries(c.colorSpace),m=c.colorSpace===cn||e===r?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,c.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,c.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,c.unpackAlignment),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,m);let image=M(c.image,!1,o.maxTextureSize);image=Y(c,image);const _=l.convert(c.format,c.colorSpace),v=l.convert(c.type);let x,y=E(c.internalFormat,_,v,c.colorSpace,c.isVideoTexture);F(h,c);const w=c.mipmaps,R=!0!==c.isVideoTexture,P=void 0===f.__version||!0===d,I=source.dataReady,L=C(c,image);if(c.isDepthTexture)y=A(c.format===ie,c.type),P&&(R?n.texStorage2D(t.TEXTURE_2D,1,y,image.width,image.height):n.texImage2D(t.TEXTURE_2D,0,y,image.width,image.height,0,_,v,null));else if(c.isDataTexture)if(w.length>0){R&&P&&n.texStorage2D(t.TEXTURE_2D,L,y,w[0].width,w[0].height);for(let i=0,e=w.length;i<e;i++)x=w[i],R?I&&n.texSubImage2D(t.TEXTURE_2D,i,0,0,x.width,x.height,_,v,x.data):n.texImage2D(t.TEXTURE_2D,i,y,x.width,x.height,0,_,v,x.data);c.generateMipmaps=!1}else R?(P&&n.texStorage2D(t.TEXTURE_2D,L,y,image.width,image.height),I&&n.texSubImage2D(t.TEXTURE_2D,0,0,0,image.width,image.height,_,v,image.data)):n.texImage2D(t.TEXTURE_2D,0,y,image.width,image.height,0,_,v,image.data);else if(c.isCompressedTexture)if(c.isCompressedArrayTexture){R&&P&&n.texStorage3D(t.TEXTURE_2D_ARRAY,L,y,w[0].width,w[0].height,image.depth);for(let i=0,e=w.length;i<e;i++)if(x=w[i],c.format!==Qt)if(null!==_)if(R){if(I)if(c.layerUpdates.size>0){const e=oc(x.width,x.height,c.format,c.type);for(const r of c.layerUpdates){const o=x.data.subarray(r*e/x.data.BYTES_PER_ELEMENT,(r+1)*e/x.data.BYTES_PER_ELEMENT);n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,i,0,0,r,x.width,x.height,1,_,o)}c.clearLayerUpdates()}else n.compressedTexSubImage3D(t.TEXTURE_2D_ARRAY,i,0,0,0,x.width,x.height,image.depth,_,x.data)}else n.compressedTexImage3D(t.TEXTURE_2D_ARRAY,i,y,x.width,x.height,image.depth,0,x.data,0,0);else console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()");else R?I&&n.texSubImage3D(t.TEXTURE_2D_ARRAY,i,0,0,0,x.width,x.height,image.depth,_,v,x.data):n.texImage3D(t.TEXTURE_2D_ARRAY,i,y,x.width,x.height,image.depth,0,_,v,x.data)}else{R&&P&&n.texStorage2D(t.TEXTURE_2D,L,y,w[0].width,w[0].height);for(let i=0,e=w.length;i<e;i++)x=w[i],c.format!==Qt?null!==_?R?I&&n.compressedTexSubImage2D(t.TEXTURE_2D,i,0,0,x.width,x.height,_,x.data):n.compressedTexImage2D(t.TEXTURE_2D,i,y,x.width,x.height,0,x.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):R?I&&n.texSubImage2D(t.TEXTURE_2D,i,0,0,x.width,x.height,_,v,x.data):n.texImage2D(t.TEXTURE_2D,i,y,x.width,x.height,0,_,v,x.data)}else if(c.isDataArrayTexture)if(R){if(P&&n.texStorage3D(t.TEXTURE_2D_ARRAY,L,y,image.width,image.height,image.depth),I)if(c.layerUpdates.size>0){const e=oc(image.width,image.height,c.format,c.type);for(const r of c.layerUpdates){const o=image.data.subarray(r*e/image.data.BYTES_PER_ELEMENT,(r+1)*e/image.data.BYTES_PER_ELEMENT);n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,r,image.width,image.height,1,_,v,o)}c.clearLayerUpdates()}else n.texSubImage3D(t.TEXTURE_2D_ARRAY,0,0,0,0,image.width,image.height,image.depth,_,v,image.data)}else n.texImage3D(t.TEXTURE_2D_ARRAY,0,y,image.width,image.height,image.depth,0,_,v,image.data);else if(c.isData3DTexture)R?(P&&n.texStorage3D(t.TEXTURE_3D,L,y,image.width,image.height,image.depth),I&&n.texSubImage3D(t.TEXTURE_3D,0,0,0,0,image.width,image.height,image.depth,_,v,image.data)):n.texImage3D(t.TEXTURE_3D,0,y,image.width,image.height,image.depth,0,_,v,image.data);else if(c.isFramebufferTexture){if(P)if(R)n.texStorage2D(t.TEXTURE_2D,L,y,image.width,image.height);else{let e=image.width,r=image.height;for(let i=0;i<L;i++)n.texImage2D(t.TEXTURE_2D,i,y,e,r,0,_,v,null),e>>=1,r>>=1}}else if(w.length>0){if(R&&P){const e=Z(w[0]);n.texStorage2D(t.TEXTURE_2D,L,y,e.width,e.height)}for(let i=0,e=w.length;i<e;i++)x=w[i],R?I&&n.texSubImage2D(t.TEXTURE_2D,i,0,0,_,v,x):n.texImage2D(t.TEXTURE_2D,i,y,_,v,x);c.generateMipmaps=!1}else if(R){if(P){const e=Z(image);n.texStorage2D(t.TEXTURE_2D,L,y,e.width,e.height)}I&&n.texSubImage2D(t.TEXTURE_2D,0,0,0,_,v,image)}else n.texImage2D(t.TEXTURE_2D,0,y,_,v,image);S(c)&&T(h),f.__version=source.version,c.onUpdate&&c.onUpdate(c)}e.__version=c.version}function k(e,o,c,d,f,m){const _=l.convert(c.format,c.colorSpace),v=l.convert(c.type),x=E(c.internalFormat,_,v,c.colorSpace),y=r.get(o),M=r.get(c);if(M.__renderTarget=o,!y.__hasExternalTextures){const e=Math.max(1,o.width>>m),r=Math.max(1,o.height>>m);f===t.TEXTURE_3D||f===t.TEXTURE_2D_ARRAY?n.texImage3D(f,m,x,e,r,o.depth,0,_,v,null):n.texImage2D(f,m,x,e,r,0,_,v,null)}n.bindFramebuffer(t.FRAMEBUFFER,e),j(o)?h.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,d,f,M.__webglTexture,0,X(o)):(f===t.TEXTURE_2D||f>=t.TEXTURE_CUBE_MAP_POSITIVE_X&&f<=t.TEXTURE_CUBE_MAP_NEGATIVE_Z)&&t.framebufferTexture2D(t.FRAMEBUFFER,d,f,M.__webglTexture,m),n.bindFramebuffer(t.FRAMEBUFFER,null)}function V(e,n,r){if(t.bindRenderbuffer(t.RENDERBUFFER,e),n.depthBuffer){const o=n.depthTexture,l=o&&o.isDepthTexture?o.type:null,c=A(n.stencilBuffer,l),d=n.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,f=X(n);j(n)?h.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,f,c,n.width,n.height):r?t.renderbufferStorageMultisample(t.RENDERBUFFER,f,c,n.width,n.height):t.renderbufferStorage(t.RENDERBUFFER,c,n.width,n.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,d,t.RENDERBUFFER,e)}else{const e=n.textures;for(let i=0;i<e.length;i++){const o=e[i],c=l.convert(o.format,o.colorSpace),d=l.convert(o.type),f=E(o.internalFormat,c,d,o.colorSpace),m=X(n);r&&!1===j(n)?t.renderbufferStorageMultisample(t.RENDERBUFFER,m,f,n.width,n.height):j(n)?h.renderbufferStorageMultisampleEXT(t.RENDERBUFFER,m,f,n.width,n.height):t.renderbufferStorage(t.RENDERBUFFER,f,n.width,n.height)}}t.bindRenderbuffer(t.RENDERBUFFER,null)}function H(e){const o=r.get(e),l=!0===e.isWebGLCubeRenderTarget;if(o.__boundDepthTexture!==e.depthTexture){const t=e.depthTexture;if(o.__depthDisposeCallback&&o.__depthDisposeCallback(),t){const e=()=>{delete o.__boundDepthTexture,delete o.__depthDisposeCallback,t.removeEventListener("dispose",e)};t.addEventListener("dispose",e),o.__depthDisposeCallback=e}o.__boundDepthTexture=t}if(e.depthTexture&&!o.__autoAllocateDepthBuffer){if(l)throw new Error("target.depthTexture not supported in Cube render targets");!function(e,o){if(o&&o.isWebGLCubeRenderTarget)throw new Error("Depth Texture with cube render targets is not supported");if(n.bindFramebuffer(t.FRAMEBUFFER,e),!o.depthTexture||!o.depthTexture.isDepthTexture)throw new Error("renderTarget.depthTexture must be an instance of THREE.DepthTexture");const l=r.get(o.depthTexture);l.__renderTarget=o,l.__webglTexture&&o.depthTexture.image.width===o.width&&o.depthTexture.image.height===o.height||(o.depthTexture.image.width=o.width,o.depthTexture.image.height=o.height,o.depthTexture.needsUpdate=!0),U(o.depthTexture,0);const c=l.__webglTexture,d=X(o);if(o.depthTexture.format===ne)j(o)?h.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,c,0,d):t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_ATTACHMENT,t.TEXTURE_2D,c,0);else{if(o.depthTexture.format!==ie)throw new Error("Unknown depthTexture format");j(o)?h.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,c,0,d):t.framebufferTexture2D(t.FRAMEBUFFER,t.DEPTH_STENCIL_ATTACHMENT,t.TEXTURE_2D,c,0)}}(o.__webglFramebuffer,e)}else if(l){o.__webglDepthbuffer=[];for(let i=0;i<6;i++)if(n.bindFramebuffer(t.FRAMEBUFFER,o.__webglFramebuffer[i]),void 0===o.__webglDepthbuffer[i])o.__webglDepthbuffer[i]=t.createRenderbuffer(),V(o.__webglDepthbuffer[i],e,!1);else{const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,r=o.__webglDepthbuffer[i];t.bindRenderbuffer(t.RENDERBUFFER,r),t.framebufferRenderbuffer(t.FRAMEBUFFER,n,t.RENDERBUFFER,r)}}else if(n.bindFramebuffer(t.FRAMEBUFFER,o.__webglFramebuffer),void 0===o.__webglDepthbuffer)o.__webglDepthbuffer=t.createRenderbuffer(),V(o.__webglDepthbuffer,e,!1);else{const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,r=o.__webglDepthbuffer;t.bindRenderbuffer(t.RENDERBUFFER,r),t.framebufferRenderbuffer(t.FRAMEBUFFER,n,t.RENDERBUFFER,r)}n.bindFramebuffer(t.FRAMEBUFFER,null)}const G=[],W=[];function X(t){return Math.min(o.maxSamples,t.samples)}function j(t){const n=r.get(t);return t.samples>0&&!0===e.has("WEBGL_multisampled_render_to_texture")&&!1!==n.__useRenderToTexture}function Y(t,image){const e=t.colorSpace,n=t.format,r=t.type;return!0===t.isCompressedTexture||!0===t.isVideoTexture||e!==un&&e!==cn&&(yi.getTransfer(e)===pn?n===Qt&&r===zt||console.warn("THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType."):console.error("THREE.WebGLTextures: Unsupported texture color space:",e)),image}function Z(image){return"undefined"!=typeof HTMLImageElement&&image instanceof HTMLImageElement?(f.width=image.naturalWidth||image.width,f.height=image.naturalHeight||image.height):"undefined"!=typeof VideoFrame&&image instanceof VideoFrame?(f.width=image.displayWidth,f.height=image.displayHeight):(f.width=image.width,f.height=image.height),f}this.allocateTextureUnit=function(){const t=L;return t>=o.maxTextures&&console.warn("THREE.WebGLTextures: Trying to use "+t+" texture units while this GPU supports only "+o.maxTextures),L+=1,t},this.resetTextureUnits=function(){L=0},this.setTexture2D=U,this.setTexture2DArray=function(e,slot){const o=r.get(e);e.version>0&&o.__version!==e.version?z(o,e,slot):n.bindTexture(t.TEXTURE_2D_ARRAY,o.__webglTexture,t.TEXTURE0+slot)},this.setTexture3D=function(e,slot){const o=r.get(e);e.version>0&&o.__version!==e.version?z(o,e,slot):n.bindTexture(t.TEXTURE_3D,o.__webglTexture,t.TEXTURE0+slot)},this.setTextureCube=function(e,slot){const c=r.get(e);e.version>0&&c.__version!==e.version?function(e,c,slot){if(6!==c.image.length)return;const h=B(e,c),source=c.source;n.bindTexture(t.TEXTURE_CUBE_MAP,e.__webglTexture,t.TEXTURE0+slot);const d=r.get(source);if(source.version!==d.__version||!0===h){n.activeTexture(t.TEXTURE0+slot);const e=yi.getPrimaries(yi.workingColorSpace),r=c.colorSpace===cn?null:yi.getPrimaries(c.colorSpace),f=c.colorSpace===cn||e===r?t.NONE:t.BROWSER_DEFAULT_WEBGL;t.pixelStorei(t.UNPACK_FLIP_Y_WEBGL,c.flipY),t.pixelStorei(t.UNPACK_PREMULTIPLY_ALPHA_WEBGL,c.premultiplyAlpha),t.pixelStorei(t.UNPACK_ALIGNMENT,c.unpackAlignment),t.pixelStorei(t.UNPACK_COLORSPACE_CONVERSION_WEBGL,f);const m=c.isCompressedTexture||c.image[0].isCompressedTexture,_=c.image[0]&&c.image[0].isDataTexture,v=[];for(let i=0;i<6;i++)v[i]=m||_?_?c.image[i].image:c.image[i]:M(c.image[i],!0,o.maxCubemapSize),v[i]=Y(c,v[i]);const image=v[0],x=l.convert(c.format,c.colorSpace),y=l.convert(c.type),w=E(c.internalFormat,x,y,c.colorSpace),A=!0!==c.isVideoTexture,R=void 0===d.__version||!0===h,P=source.dataReady;let I,L=C(c,image);if(F(t.TEXTURE_CUBE_MAP,c),m){A&&R&&n.texStorage2D(t.TEXTURE_CUBE_MAP,L,w,image.width,image.height);for(let i=0;i<6;i++){I=v[i].mipmaps;for(let e=0;e<I.length;e++){const r=I[e];c.format!==Qt?null!==x?A?P&&n.compressedTexSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,e,0,0,r.width,r.height,x,r.data):n.compressedTexImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,e,w,r.width,r.height,0,r.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()"):A?P&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,e,0,0,r.width,r.height,x,y,r.data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,e,w,r.width,r.height,0,x,y,r.data)}}}else{if(I=c.mipmaps,A&&R){I.length>0&&L++;const e=Z(v[0]);n.texStorage2D(t.TEXTURE_CUBE_MAP,L,w,e.width,e.height)}for(let i=0;i<6;i++)if(_){A?P&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,0,0,v[i].width,v[i].height,x,y,v[i].data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,w,v[i].width,v[i].height,0,x,y,v[i].data);for(let e=0;e<I.length;e++){const r=I[e].image[i].image;A?P&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,e+1,0,0,r.width,r.height,x,y,r.data):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,e+1,w,r.width,r.height,0,x,y,r.data)}}else{A?P&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,0,0,x,y,v[i]):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,0,w,x,y,v[i]);for(let e=0;e<I.length;e++){const r=I[e];A?P&&n.texSubImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,e+1,0,0,x,y,r.image[i]):n.texImage2D(t.TEXTURE_CUBE_MAP_POSITIVE_X+i,e+1,w,x,y,r.image[i])}}}S(c)&&T(t.TEXTURE_CUBE_MAP),d.__version=source.version,c.onUpdate&&c.onUpdate(c)}e.__version=c.version}(c,e,slot):n.bindTexture(t.TEXTURE_CUBE_MAP,c.__webglTexture,t.TEXTURE0+slot)},this.rebindTextures=function(e,n,o){const l=r.get(e);void 0!==n&&k(l.__webglFramebuffer,e,e.texture,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,0),void 0!==o&&H(e)},this.setupRenderTarget=function(e){const o=e.texture,h=r.get(e),d=r.get(o);e.addEventListener("dispose",P);const f=e.textures,m=!0===e.isWebGLCubeRenderTarget,_=f.length>1;if(_||(void 0===d.__webglTexture&&(d.__webglTexture=t.createTexture()),d.__version=o.version,c.memory.textures++),m){h.__webglFramebuffer=[];for(let i=0;i<6;i++)if(o.mipmaps&&o.mipmaps.length>0){h.__webglFramebuffer[i]=[];for(let e=0;e<o.mipmaps.length;e++)h.__webglFramebuffer[i][e]=t.createFramebuffer()}else h.__webglFramebuffer[i]=t.createFramebuffer()}else{if(o.mipmaps&&o.mipmaps.length>0){h.__webglFramebuffer=[];for(let e=0;e<o.mipmaps.length;e++)h.__webglFramebuffer[e]=t.createFramebuffer()}else h.__webglFramebuffer=t.createFramebuffer();if(_)for(let i=0,e=f.length;i<e;i++){const e=r.get(f[i]);void 0===e.__webglTexture&&(e.__webglTexture=t.createTexture(),c.memory.textures++)}if(e.samples>0&&!1===j(e)){h.__webglMultisampledFramebuffer=t.createFramebuffer(),h.__webglColorRenderbuffer=[],n.bindFramebuffer(t.FRAMEBUFFER,h.__webglMultisampledFramebuffer);for(let i=0;i<f.length;i++){const n=f[i];h.__webglColorRenderbuffer[i]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,h.__webglColorRenderbuffer[i]);const r=l.convert(n.format,n.colorSpace),o=l.convert(n.type),c=E(n.internalFormat,r,o,n.colorSpace,!0===e.isXRRenderTarget),d=X(e);t.renderbufferStorageMultisample(t.RENDERBUFFER,d,c,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+i,t.RENDERBUFFER,h.__webglColorRenderbuffer[i])}t.bindRenderbuffer(t.RENDERBUFFER,null),e.depthBuffer&&(h.__webglDepthRenderbuffer=t.createRenderbuffer(),V(h.__webglDepthRenderbuffer,e,!0)),n.bindFramebuffer(t.FRAMEBUFFER,null)}}if(m){n.bindTexture(t.TEXTURE_CUBE_MAP,d.__webglTexture),F(t.TEXTURE_CUBE_MAP,o);for(let i=0;i<6;i++)if(o.mipmaps&&o.mipmaps.length>0)for(let n=0;n<o.mipmaps.length;n++)k(h.__webglFramebuffer[i][n],e,o,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+i,n);else k(h.__webglFramebuffer[i],e,o,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+i,0);S(o)&&T(t.TEXTURE_CUBE_MAP),n.unbindTexture()}else if(_){for(let i=0,o=f.length;i<o;i++){const o=f[i],l=r.get(o);n.bindTexture(t.TEXTURE_2D,l.__webglTexture),F(t.TEXTURE_2D,o),k(h.__webglFramebuffer,e,o,t.COLOR_ATTACHMENT0+i,t.TEXTURE_2D,0),S(o)&&T(t.TEXTURE_2D)}n.unbindTexture()}else{let r=t.TEXTURE_2D;if((e.isWebGL3DRenderTarget||e.isWebGLArrayRenderTarget)&&(r=e.isWebGL3DRenderTarget?t.TEXTURE_3D:t.TEXTURE_2D_ARRAY),n.bindTexture(r,d.__webglTexture),F(r,o),o.mipmaps&&o.mipmaps.length>0)for(let n=0;n<o.mipmaps.length;n++)k(h.__webglFramebuffer[n],e,o,t.COLOR_ATTACHMENT0,r,n);else k(h.__webglFramebuffer,e,o,t.COLOR_ATTACHMENT0,r,0);S(o)&&T(r),n.unbindTexture()}e.depthBuffer&&H(e)},this.updateRenderTargetMipmap=function(t){const e=t.textures;for(let i=0,o=e.length;i<o;i++){const o=e[i];if(S(o)){const e=w(t),l=r.get(o).__webglTexture;n.bindTexture(e,l),T(e),n.unbindTexture()}}},this.updateMultisampleRenderTarget=function(e){if(e.samples>0)if(!1===j(e)){const o=e.textures,l=e.width,c=e.height;let mask=t.COLOR_BUFFER_BIT;const h=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT,f=r.get(e),m=o.length>1;if(m)for(let i=0;i<o.length;i++)n.bindFramebuffer(t.FRAMEBUFFER,f.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+i,t.RENDERBUFFER,null),n.bindFramebuffer(t.FRAMEBUFFER,f.__webglFramebuffer),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+i,t.TEXTURE_2D,null,0);n.bindFramebuffer(t.READ_FRAMEBUFFER,f.__webglMultisampledFramebuffer),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,f.__webglFramebuffer);for(let i=0;i<o.length;i++){if(e.resolveDepthBuffer&&(e.depthBuffer&&(mask|=t.DEPTH_BUFFER_BIT),e.stencilBuffer&&e.resolveStencilBuffer&&(mask|=t.STENCIL_BUFFER_BIT)),m){t.framebufferRenderbuffer(t.READ_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.RENDERBUFFER,f.__webglColorRenderbuffer[i]);const e=r.get(o[i]).__webglTexture;t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,e,0)}t.blitFramebuffer(0,0,l,c,0,0,l,c,mask,t.NEAREST),!0===d&&(G.length=0,W.length=0,G.push(t.COLOR_ATTACHMENT0+i),e.depthBuffer&&!1===e.resolveDepthBuffer&&(G.push(h),W.push(h),t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,W)),t.invalidateFramebuffer(t.READ_FRAMEBUFFER,G))}if(n.bindFramebuffer(t.READ_FRAMEBUFFER,null),n.bindFramebuffer(t.DRAW_FRAMEBUFFER,null),m)for(let i=0;i<o.length;i++){n.bindFramebuffer(t.FRAMEBUFFER,f.__webglMultisampledFramebuffer),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+i,t.RENDERBUFFER,f.__webglColorRenderbuffer[i]);const e=r.get(o[i]).__webglTexture;n.bindFramebuffer(t.FRAMEBUFFER,f.__webglFramebuffer),t.framebufferTexture2D(t.DRAW_FRAMEBUFFER,t.COLOR_ATTACHMENT0+i,t.TEXTURE_2D,e,0)}n.bindFramebuffer(t.DRAW_FRAMEBUFFER,f.__webglMultisampledFramebuffer)}else if(e.depthBuffer&&!1===e.resolveDepthBuffer&&d){const n=e.stencilBuffer?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;t.invalidateFramebuffer(t.DRAW_FRAMEBUFFER,[n])}},this.setupDepthRenderbuffer=H,this.setupFrameBufferTexture=k,this.useMultisampledRTT=j}function hc(t,e){return{convert:function(p,n=cn){let r;const o=yi.getTransfer(n);if(p===zt)return t.UNSIGNED_BYTE;if(p===qt)return t.UNSIGNED_SHORT_4_4_4_4;if(p===Yt)return t.UNSIGNED_SHORT_5_5_5_1;if(p===Jt)return t.UNSIGNED_INT_5_9_9_9_REV;if(p===kt)return t.BYTE;if(p===Vt)return t.SHORT;if(p===Ht)return t.UNSIGNED_SHORT;if(p===Gt)return t.INT;if(p===Wt)return t.UNSIGNED_INT;if(p===Xt)return t.FLOAT;if(p===jt)return t.HALF_FLOAT;if(p===Kt)return t.ALPHA;if(p===$t)return t.RGB;if(p===Qt)return t.RGBA;if(p===te)return t.LUMINANCE;if(p===ee)return t.LUMINANCE_ALPHA;if(p===ne)return t.DEPTH_COMPONENT;if(p===ie)return t.DEPTH_STENCIL;if(p===re)return t.RED;if(p===se)return t.RED_INTEGER;if(p===ae)return t.RG;if(p===oe)return t.RG_INTEGER;if(p===ce)return t.RGBA_INTEGER;if(p===he||p===ue||p===de||p===pe)if(o===pn){if(r=e.get("WEBGL_compressed_texture_s3tc_srgb"),null===r)return null;if(p===he)return r.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(p===ue)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(p===de)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(p===pe)return r.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(r=e.get("WEBGL_compressed_texture_s3tc"),null===r)return null;if(p===he)return r.COMPRESSED_RGB_S3TC_DXT1_EXT;if(p===ue)return r.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(p===de)return r.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(p===pe)return r.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(p===fe||p===me||p===ge||p===_e){if(r=e.get("WEBGL_compressed_texture_pvrtc"),null===r)return null;if(p===fe)return r.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(p===me)return r.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(p===ge)return r.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(p===_e)return r.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(p===ve||p===xe||p===ye){if(r=e.get("WEBGL_compressed_texture_etc"),null===r)return null;if(p===ve||p===xe)return o===pn?r.COMPRESSED_SRGB8_ETC2:r.COMPRESSED_RGB8_ETC2;if(p===ye)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:r.COMPRESSED_RGBA8_ETC2_EAC}if(p===Me||p===Se||p===be||p===Te||p===we||p===Ee||p===Ae||p===Ce||p===Re||p===Pe||p===Ie||p===Le||p===Ue||p===De){if(r=e.get("WEBGL_compressed_texture_astc"),null===r)return null;if(p===Me)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:r.COMPRESSED_RGBA_ASTC_4x4_KHR;if(p===Se)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:r.COMPRESSED_RGBA_ASTC_5x4_KHR;if(p===be)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:r.COMPRESSED_RGBA_ASTC_5x5_KHR;if(p===Te)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:r.COMPRESSED_RGBA_ASTC_6x5_KHR;if(p===we)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:r.COMPRESSED_RGBA_ASTC_6x6_KHR;if(p===Ee)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:r.COMPRESSED_RGBA_ASTC_8x5_KHR;if(p===Ae)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:r.COMPRESSED_RGBA_ASTC_8x6_KHR;if(p===Ce)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:r.COMPRESSED_RGBA_ASTC_8x8_KHR;if(p===Re)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:r.COMPRESSED_RGBA_ASTC_10x5_KHR;if(p===Pe)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:r.COMPRESSED_RGBA_ASTC_10x6_KHR;if(p===Ie)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:r.COMPRESSED_RGBA_ASTC_10x8_KHR;if(p===Le)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:r.COMPRESSED_RGBA_ASTC_10x10_KHR;if(p===Ue)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:r.COMPRESSED_RGBA_ASTC_12x10_KHR;if(p===De)return o===pn?r.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:r.COMPRESSED_RGBA_ASTC_12x12_KHR}if(p===Ne||p===Oe||p===Fe){if(r=e.get("EXT_texture_compression_bptc"),null===r)return null;if(p===Ne)return o===pn?r.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:r.COMPRESSED_RGBA_BPTC_UNORM_EXT;if(p===Oe)return r.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;if(p===Fe)return r.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT}if(p===Be||p===ze||p===ke||p===Ve){if(r=e.get("EXT_texture_compression_rgtc"),null===r)return null;if(p===Ne)return r.COMPRESSED_RED_RGTC1_EXT;if(p===ze)return r.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(p===ke)return r.COMPRESSED_RED_GREEN_RGTC2_EXT;if(p===Ve)return r.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return p===Zt?t.UNSIGNED_INT_24_8:void 0!==t[p]?t[p]:null}}}class uc extends pa{constructor(t=[]){super(),this.isArrayCamera=!0,this.cameras=t}}class dc extends Zr{constructor(){super(),this.isGroup=!0,this.type="Group"}}const pc={type:"move"};class fc{constructor(){this._targetRay=null,this._grip=null,this._hand=null}getHandSpace(){return null===this._hand&&(this._hand=new dc,this._hand.matrixAutoUpdate=!1,this._hand.visible=!1,this._hand.joints={},this._hand.inputState={pinching:!1}),this._hand}getTargetRaySpace(){return null===this._targetRay&&(this._targetRay=new dc,this._targetRay.matrixAutoUpdate=!1,this._targetRay.visible=!1,this._targetRay.hasLinearVelocity=!1,this._targetRay.linearVelocity=new Gi,this._targetRay.hasAngularVelocity=!1,this._targetRay.angularVelocity=new Gi),this._targetRay}getGripSpace(){return null===this._grip&&(this._grip=new dc,this._grip.matrixAutoUpdate=!1,this._grip.visible=!1,this._grip.hasLinearVelocity=!1,this._grip.linearVelocity=new Gi,this._grip.hasAngularVelocity=!1,this._grip.angularVelocity=new Gi),this._grip}dispatchEvent(t){return null!==this._targetRay&&this._targetRay.dispatchEvent(t),null!==this._grip&&this._grip.dispatchEvent(t),null!==this._hand&&this._hand.dispatchEvent(t),this}connect(t){if(t&&t.hand){const e=this._hand;if(e)for(const n of t.hand.values())this._getHandJoint(e,n)}return this.dispatchEvent({type:"connected",data:t}),this}disconnect(t){return this.dispatchEvent({type:"disconnected",data:t}),null!==this._targetRay&&(this._targetRay.visible=!1),null!==this._grip&&(this._grip.visible=!1),null!==this._hand&&(this._hand.visible=!1),this}update(t,e,n){let r=null,o=null,l=null;const c=this._targetRay,h=this._grip,d=this._hand;if(t&&"visible-blurred"!==e.session.visibilityState){if(d&&t.hand){l=!0;for(const r of t.hand.values()){const t=e.getJointPose(r,n),o=this._getHandJoint(d,r);null!==t&&(o.matrix.fromArray(t.transform.matrix),o.matrix.decompose(o.position,o.rotation,o.scale),o.matrixWorldNeedsUpdate=!0,o.jointRadius=t.radius),o.visible=null!==t}const r=d.joints["index-finger-tip"],o=d.joints["thumb-tip"],c=r.position.distanceTo(o.position),h=.02,f=.005;d.inputState.pinching&&c>h+f?(d.inputState.pinching=!1,this.dispatchEvent({type:"pinchend",handedness:t.handedness,target:this})):!d.inputState.pinching&&c<=h-f&&(d.inputState.pinching=!0,this.dispatchEvent({type:"pinchstart",handedness:t.handedness,target:this}))}else null!==h&&t.gripSpace&&(o=e.getPose(t.gripSpace,n),null!==o&&(h.matrix.fromArray(o.transform.matrix),h.matrix.decompose(h.position,h.rotation,h.scale),h.matrixWorldNeedsUpdate=!0,o.linearVelocity?(h.hasLinearVelocity=!0,h.linearVelocity.copy(o.linearVelocity)):h.hasLinearVelocity=!1,o.angularVelocity?(h.hasAngularVelocity=!0,h.angularVelocity.copy(o.angularVelocity)):h.hasAngularVelocity=!1));null!==c&&(r=e.getPose(t.targetRaySpace,n),null===r&&null!==o&&(r=o),null!==r&&(c.matrix.fromArray(r.transform.matrix),c.matrix.decompose(c.position,c.rotation,c.scale),c.matrixWorldNeedsUpdate=!0,r.linearVelocity?(c.hasLinearVelocity=!0,c.linearVelocity.copy(r.linearVelocity)):c.hasLinearVelocity=!1,r.angularVelocity?(c.hasAngularVelocity=!0,c.angularVelocity.copy(r.angularVelocity)):c.hasAngularVelocity=!1,this.dispatchEvent(pc)))}return null!==c&&(c.visible=null!==r),null!==h&&(h.visible=null!==o),null!==d&&(d.visible=null!==l),this}_getHandJoint(t,e){if(void 0===t.joints[e.jointName]){const n=new dc;n.matrixAutoUpdate=!1,n.visible=!1,t.joints[e.jointName]=n,t.add(n)}return t.joints[e.jointName]}}class mc{constructor(){this.texture=null,this.mesh=null,this.depthNear=0,this.depthFar=0}init(t,e,n){if(null===this.texture){const r=new Di;t.properties.get(r).__webglTexture=e.texture,e.depthNear==n.depthNear&&e.depthFar==n.depthFar||(this.depthNear=e.depthNear,this.depthFar=e.depthFar),this.texture=r}}getMesh(t){if(null!==this.texture&&null===this.mesh){const e=t.cameras[0].viewport,n=new la({vertexShader:"\nvoid main() {\n\n\tgl_Position = vec4( position, 1.0 );\n\n}",fragmentShader:"\nuniform sampler2DArray depthColor;\nuniform float depthWidth;\nuniform float depthHeight;\n\nvoid main() {\n\n\tvec2 coord = vec2( gl_FragCoord.x / depthWidth, gl_FragCoord.y / depthHeight );\n\n\tif ( coord.x >= 1.0 ) {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x - 1.0, coord.y, 1 ) ).r;\n\n\t} else {\n\n\t\tgl_FragDepth = texture( depthColor, vec3( coord.x, coord.y, 0 ) ).r;\n\n\t}\n\n}",uniforms:{depthColor:{value:this.texture},depthWidth:{value:e.z},depthHeight:{value:e.w}}});this.mesh=new ea(new Aa(20,20),n)}return this.mesh}reset(){this.texture=null,this.mesh=null}getDepthTexture(){return this.texture}}class gc extends Kn{constructor(t,e){super();const n=this;let r=null,o=1,l=null,c="local-floor",h=1,d=null,f=null,m=null,_=null,v=null,x=null;const y=new mc,M=e.getContextAttributes();let S=null,T=null;const w=[],E=[],A=new hi;let C=null;const R=new pa;R.viewport=new Ni;const P=new pa;P.viewport=new Ni;const I=[R,P],L=new uc;let U=null,D=null;function N(t){const e=E.indexOf(t.inputSource);if(-1===e)return;const n=w[e];void 0!==n&&(n.update(t.inputSource,t.frame,d||l),n.dispatchEvent({type:t.type,data:t.inputSource}))}function O(){r.removeEventListener("select",N),r.removeEventListener("selectstart",N),r.removeEventListener("selectend",N),r.removeEventListener("squeeze",N),r.removeEventListener("squeezestart",N),r.removeEventListener("squeezeend",N),r.removeEventListener("end",O),r.removeEventListener("inputsourceschange",F);for(let i=0;i<w.length;i++){const t=E[i];null!==t&&(E[i]=null,w[i].disconnect(t))}U=null,D=null,y.reset(),t.setRenderTarget(S),v=null,_=null,m=null,r=null,T=null,H.stop(),n.isPresenting=!1,t.setPixelRatio(C),t.setSize(A.width,A.height,!1),n.dispatchEvent({type:"sessionend"})}function F(t){for(let i=0;i<t.removed.length;i++){const e=t.removed[i],n=E.indexOf(e);n>=0&&(E[n]=null,w[n].disconnect(e))}for(let i=0;i<t.added.length;i++){const e=t.added[i];let n=E.indexOf(e);if(-1===n){for(let i=0;i<w.length;i++){if(i>=E.length){E.push(e),n=i;break}if(null===E[i]){E[i]=e,n=i;break}}if(-1===n)break}const r=w[n];r&&r.connect(e)}}this.cameraAutoUpdate=!0,this.enabled=!1,this.isPresenting=!1,this.getController=function(t){let e=w[t];return void 0===e&&(e=new fc,w[t]=e),e.getTargetRaySpace()},this.getControllerGrip=function(t){let e=w[t];return void 0===e&&(e=new fc,w[t]=e),e.getGripSpace()},this.getHand=function(t){let e=w[t];return void 0===e&&(e=new fc,w[t]=e),e.getHandSpace()},this.setFramebufferScaleFactor=function(t){o=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change framebuffer scale while presenting.")},this.setReferenceSpaceType=function(t){c=t,!0===n.isPresenting&&console.warn("THREE.WebXRManager: Cannot change reference space type while presenting.")},this.getReferenceSpace=function(){return d||l},this.setReferenceSpace=function(t){d=t},this.getBaseLayer=function(){return null!==_?_:v},this.getBinding=function(){return m},this.getFrame=function(){return x},this.getSession=function(){return r},this.setSession=async function(f){if(r=f,null!==r){if(S=t.getRenderTarget(),r.addEventListener("select",N),r.addEventListener("selectstart",N),r.addEventListener("selectend",N),r.addEventListener("squeeze",N),r.addEventListener("squeezestart",N),r.addEventListener("squeezeend",N),r.addEventListener("end",O),r.addEventListener("inputsourceschange",F),!0!==M.xrCompatible&&await e.makeXRCompatible(),C=t.getPixelRatio(),t.getSize(A),void 0===r.renderState.layers){const n={antialias:M.antialias,alpha:!0,depth:M.depth,stencil:M.stencil,framebufferScaleFactor:o};v=new XRWebGLLayer(r,e,n),r.updateRenderState({baseLayer:v}),t.setPixelRatio(1),t.setSize(v.framebufferWidth,v.framebufferHeight,!1),T=new Fi(v.framebufferWidth,v.framebufferHeight,{format:Qt,type:zt,colorSpace:t.outputColorSpace,stencilBuffer:M.stencil})}else{let n=null,l=null,c=null;M.depth&&(c=M.stencil?e.DEPTH24_STENCIL8:e.DEPTH_COMPONENT24,n=M.stencil?ie:ne,l=M.stencil?Zt:Wt);const h={colorFormat:e.RGBA8,depthFormat:c,scaleFactor:o};m=new XRWebGLBinding(r,e),_=m.createProjectionLayer(h),r.updateRenderState({layers:[_]}),t.setPixelRatio(1),t.setSize(_.textureWidth,_.textureHeight,!1),T=new Fi(_.textureWidth,_.textureHeight,{format:Qt,type:zt,depthTexture:new uo(_.textureWidth,_.textureHeight,l,void 0,void 0,void 0,void 0,void 0,void 0,n),stencilBuffer:M.stencil,colorSpace:t.outputColorSpace,samples:M.antialias?4:0,resolveDepthBuffer:!1===_.ignoreDepthValues})}T.isXRRenderTarget=!0,this.setFoveation(h),d=null,l=await r.requestReferenceSpace(c),H.setContext(r),H.start(),n.isPresenting=!0,n.dispatchEvent({type:"sessionstart"})}},this.getEnvironmentBlendMode=function(){if(null!==r)return r.environmentBlendMode},this.getDepthTexture=function(){return y.getDepthTexture()};const B=new Gi,z=new Gi;function k(t,e){null===e?t.matrixWorld.copy(t.matrix):t.matrixWorld.multiplyMatrices(e.matrixWorld,t.matrix),t.matrixWorldInverse.copy(t.matrixWorld).invert()}this.updateCamera=function(t){if(null===r)return;let e=t.near,n=t.far;null!==y.texture&&(y.depthNear>0&&(e=y.depthNear),y.depthFar>0&&(n=y.depthFar)),L.near=P.near=R.near=e,L.far=P.far=R.far=n,U===L.near&&D===L.far||(r.updateRenderState({depthNear:L.near,depthFar:L.far}),U=L.near,D=L.far),R.layers.mask=2|t.layers.mask,P.layers.mask=4|t.layers.mask,L.layers.mask=R.layers.mask|P.layers.mask;const o=t.parent,l=L.cameras;k(L,o);for(let i=0;i<l.length;i++)k(l[i],o);2===l.length?function(t,e,n){B.setFromMatrixPosition(e.matrixWorld),z.setFromMatrixPosition(n.matrixWorld);const r=B.distanceTo(z),o=e.projectionMatrix.elements,l=n.projectionMatrix.elements,c=o[14]/(o[10]-1),h=o[14]/(o[10]+1),d=(o[9]+1)/o[5],f=(o[9]-1)/o[5],m=(o[8]-1)/o[0],_=(l[8]+1)/l[0],v=c*m,x=c*_,y=r/(-m+_),M=y*-m;if(e.matrixWorld.decompose(t.position,t.quaternion,t.scale),t.translateX(M),t.translateZ(y),t.matrixWorld.compose(t.position,t.quaternion,t.scale),t.matrixWorldInverse.copy(t.matrixWorld).invert(),-1===o[10])t.projectionMatrix.copy(e.projectionMatrix),t.projectionMatrixInverse.copy(e.projectionMatrixInverse);else{const e=c+y,n=h+y,o=v-M,l=x+(r-M),m=d*h/n*e,_=f*h/n*e;t.projectionMatrix.makePerspective(o,l,m,_,e,n),t.projectionMatrixInverse.copy(t.projectionMatrix).invert()}}(L,R,P):L.projectionMatrix.copy(R.projectionMatrix),function(t,e,n){null===n?t.matrix.copy(e.matrixWorld):(t.matrix.copy(n.matrixWorld),t.matrix.invert(),t.matrix.multiply(e.matrixWorld));t.matrix.decompose(t.position,t.quaternion,t.scale),t.updateMatrixWorld(!0),t.projectionMatrix.copy(e.projectionMatrix),t.projectionMatrixInverse.copy(e.projectionMatrixInverse),t.isPerspectiveCamera&&(t.fov=2*ei*Math.atan(1/t.projectionMatrix.elements[5]),t.zoom=1)}(t,L,o)},this.getCamera=function(){return L},this.getFoveation=function(){if(null!==_||null!==v)return h},this.setFoveation=function(t){h=t,null!==_&&(_.fixedFoveation=t),null!==v&&void 0!==v.fixedFoveation&&(v.fixedFoveation=t)},this.hasDepthSensing=function(){return null!==y.texture},this.getDepthSensingMesh=function(){return y.getMesh(L)};let V=null;const H=new wa;H.setAnimationLoop((function(time,e){if(f=e.getViewerPose(d||l),x=e,null!==f){const e=f.views;null!==v&&(t.setRenderTargetFramebuffer(T,v.framebuffer),t.setRenderTarget(T));let n=!1;e.length!==L.cameras.length&&(L.cameras.length=0,n=!0);for(let i=0;i<e.length;i++){const view=e[i];let r=null;if(null!==v)r=v.getViewport(view);else{const e=m.getViewSubImage(_,view);r=e.viewport,0===i&&(t.setRenderTargetTextures(T,e.colorTexture,_.ignoreDepthValues?void 0:e.depthStencilTexture),t.setRenderTarget(T))}let o=I[i];void 0===o&&(o=new pa,o.layers.enable(i),o.viewport=new Ni,I[i]=o),o.matrix.fromArray(view.transform.matrix),o.matrix.decompose(o.position,o.quaternion,o.scale),o.projectionMatrix.fromArray(view.projectionMatrix),o.projectionMatrixInverse.copy(o.projectionMatrix).invert(),o.viewport.set(r.x,r.y,r.width,r.height),0===i&&(L.matrix.copy(o.matrix),L.matrix.decompose(L.position,L.quaternion,L.scale)),!0===n&&L.cameras.push(o)}const o=r.enabledFeatures;if(o&&o.includes("depth-sensing")){const n=m.getDepthInformation(e[0]);n&&n.isValid&&n.texture&&y.init(t,n,r.renderState)}}for(let i=0;i<w.length;i++){const t=E[i],n=w[i];null!==t&&void 0!==n&&n.update(t,e,d||l)}V&&V(time,e),e.detectedPlanes&&n.dispatchEvent({type:"planesdetected",data:e}),x=null})),this.setAnimationLoop=function(t){V=t},this.dispose=function(){}}}const _c=new Lr,vc=new Mr;function xc(t,e){function n(map,t){!0===map.matrixAutoUpdate&&map.updateMatrix(),t.value.copy(map.matrix)}function r(t,r){t.opacity.value=r.opacity,r.color&&t.diffuse.value.copy(r.color),r.emissive&&t.emissive.value.copy(r.emissive).multiplyScalar(r.emissiveIntensity),r.map&&(t.map.value=r.map,n(r.map,t.mapTransform)),r.alphaMap&&(t.alphaMap.value=r.alphaMap,n(r.alphaMap,t.alphaMapTransform)),r.bumpMap&&(t.bumpMap.value=r.bumpMap,n(r.bumpMap,t.bumpMapTransform),t.bumpScale.value=r.bumpScale,r.side===M&&(t.bumpScale.value*=-1)),r.normalMap&&(t.normalMap.value=r.normalMap,n(r.normalMap,t.normalMapTransform),t.normalScale.value.copy(r.normalScale),r.side===M&&t.normalScale.value.negate()),r.displacementMap&&(t.displacementMap.value=r.displacementMap,n(r.displacementMap,t.displacementMapTransform),t.displacementScale.value=r.displacementScale,t.displacementBias.value=r.displacementBias),r.emissiveMap&&(t.emissiveMap.value=r.emissiveMap,n(r.emissiveMap,t.emissiveMapTransform)),r.specularMap&&(t.specularMap.value=r.specularMap,n(r.specularMap,t.specularMapTransform)),r.alphaTest>0&&(t.alphaTest.value=r.alphaTest);const o=e.get(r),l=o.envMap,c=o.envMapRotation;l&&(t.envMap.value=l,_c.copy(c),_c.x*=-1,_c.y*=-1,_c.z*=-1,l.isCubeTexture&&!1===l.isRenderTargetTexture&&(_c.y*=-1,_c.z*=-1),t.envMapRotation.value.setFromMatrix4(vc.makeRotationFromEuler(_c)),t.flipEnvMap.value=l.isCubeTexture&&!1===l.isRenderTargetTexture?-1:1,t.reflectivity.value=r.reflectivity,t.ior.value=r.ior,t.refractionRatio.value=r.refractionRatio),r.lightMap&&(t.lightMap.value=r.lightMap,t.lightMapIntensity.value=r.lightMapIntensity,n(r.lightMap,t.lightMapTransform)),r.aoMap&&(t.aoMap.value=r.aoMap,t.aoMapIntensity.value=r.aoMapIntensity,n(r.aoMap,t.aoMapTransform))}return{refreshFogUniforms:function(e,n){n.color.getRGB(e.fogColor.value,aa(t)),n.isFog?(e.fogNear.value=n.near,e.fogFar.value=n.far):n.isFogExp2&&(e.fogDensity.value=n.density)},refreshMaterialUniforms:function(t,o,l,c,h){o.isMeshBasicMaterial||o.isMeshLambertMaterial?r(t,o):o.isMeshToonMaterial?(r(t,o),function(t,e){e.gradientMap&&(t.gradientMap.value=e.gradientMap)}(t,o)):o.isMeshPhongMaterial?(r(t,o),function(t,e){t.specular.value.copy(e.specular),t.shininess.value=Math.max(e.shininess,1e-4)}(t,o)):o.isMeshStandardMaterial?(r(t,o),function(t,e){t.metalness.value=e.metalness,e.metalnessMap&&(t.metalnessMap.value=e.metalnessMap,n(e.metalnessMap,t.metalnessMapTransform));t.roughness.value=e.roughness,e.roughnessMap&&(t.roughnessMap.value=e.roughnessMap,n(e.roughnessMap,t.roughnessMapTransform));e.envMap&&(t.envMapIntensity.value=e.envMapIntensity)}(t,o),o.isMeshPhysicalMaterial&&function(t,e,r){t.ior.value=e.ior,e.sheen>0&&(t.sheenColor.value.copy(e.sheenColor).multiplyScalar(e.sheen),t.sheenRoughness.value=e.sheenRoughness,e.sheenColorMap&&(t.sheenColorMap.value=e.sheenColorMap,n(e.sheenColorMap,t.sheenColorMapTransform)),e.sheenRoughnessMap&&(t.sheenRoughnessMap.value=e.sheenRoughnessMap,n(e.sheenRoughnessMap,t.sheenRoughnessMapTransform)));e.clearcoat>0&&(t.clearcoat.value=e.clearcoat,t.clearcoatRoughness.value=e.clearcoatRoughness,e.clearcoatMap&&(t.clearcoatMap.value=e.clearcoatMap,n(e.clearcoatMap,t.clearcoatMapTransform)),e.clearcoatRoughnessMap&&(t.clearcoatRoughnessMap.value=e.clearcoatRoughnessMap,n(e.clearcoatRoughnessMap,t.clearcoatRoughnessMapTransform)),e.clearcoatNormalMap&&(t.clearcoatNormalMap.value=e.clearcoatNormalMap,n(e.clearcoatNormalMap,t.clearcoatNormalMapTransform),t.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),e.side===M&&t.clearcoatNormalScale.value.negate()));e.dispersion>0&&(t.dispersion.value=e.dispersion);e.iridescence>0&&(t.iridescence.value=e.iridescence,t.iridescenceIOR.value=e.iridescenceIOR,t.iridescenceThicknessMinimum.value=e.iridescenceThicknessRange[0],t.iridescenceThicknessMaximum.value=e.iridescenceThicknessRange[1],e.iridescenceMap&&(t.iridescenceMap.value=e.iridescenceMap,n(e.iridescenceMap,t.iridescenceMapTransform)),e.iridescenceThicknessMap&&(t.iridescenceThicknessMap.value=e.iridescenceThicknessMap,n(e.iridescenceThicknessMap,t.iridescenceThicknessMapTransform)));e.transmission>0&&(t.transmission.value=e.transmission,t.transmissionSamplerMap.value=r.texture,t.transmissionSamplerSize.value.set(r.width,r.height),e.transmissionMap&&(t.transmissionMap.value=e.transmissionMap,n(e.transmissionMap,t.transmissionMapTransform)),t.thickness.value=e.thickness,e.thicknessMap&&(t.thicknessMap.value=e.thicknessMap,n(e.thicknessMap,t.thicknessMapTransform)),t.attenuationDistance.value=e.attenuationDistance,t.attenuationColor.value.copy(e.attenuationColor));e.anisotropy>0&&(t.anisotropyVector.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation)),e.anisotropyMap&&(t.anisotropyMap.value=e.anisotropyMap,n(e.anisotropyMap,t.anisotropyMapTransform)));t.specularIntensity.value=e.specularIntensity,t.specularColor.value.copy(e.specularColor),e.specularColorMap&&(t.specularColorMap.value=e.specularColorMap,n(e.specularColorMap,t.specularColorMapTransform));e.specularIntensityMap&&(t.specularIntensityMap.value=e.specularIntensityMap,n(e.specularIntensityMap,t.specularIntensityMapTransform))}(t,o,h)):o.isMeshMatcapMaterial?(r(t,o),function(t,e){e.matcap&&(t.matcap.value=e.matcap)}(t,o)):o.isMeshDepthMaterial?r(t,o):o.isMeshDistanceMaterial?(r(t,o),function(t,n){const r=e.get(n).light;t.referencePosition.value.setFromMatrixPosition(r.matrixWorld),t.nearDistance.value=r.shadow.camera.near,t.farDistance.value=r.shadow.camera.far}(t,o)):o.isMeshNormalMaterial?r(t,o):o.isLineBasicMaterial?(function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,e.map&&(t.map.value=e.map,n(e.map,t.mapTransform))}(t,o),o.isLineDashedMaterial&&function(t,e){t.dashSize.value=e.dashSize,t.totalSize.value=e.dashSize+e.gapSize,t.scale.value=e.scale}(t,o)):o.isPointsMaterial?function(t,e,r,o){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.size.value=e.size*r,t.scale.value=.5*o,e.map&&(t.map.value=e.map,n(e.map,t.uvTransform));e.alphaMap&&(t.alphaMap.value=e.alphaMap,n(e.alphaMap,t.alphaMapTransform));e.alphaTest>0&&(t.alphaTest.value=e.alphaTest)}(t,o,l,c):o.isSpriteMaterial?function(t,e){t.diffuse.value.copy(e.color),t.opacity.value=e.opacity,t.rotation.value=e.rotation,e.map&&(t.map.value=e.map,n(e.map,t.mapTransform));e.alphaMap&&(t.alphaMap.value=e.alphaMap,n(e.alphaMap,t.alphaMapTransform));e.alphaTest>0&&(t.alphaTest.value=e.alphaTest)}(t,o):o.isShadowMaterial?(t.color.value.copy(o.color),t.opacity.value=o.opacity):o.isShaderMaterial&&(o.uniformsNeedUpdate=!1)}}}function yc(t,e,n,r){let o={},l={},c=[];const h=t.getParameter(t.MAX_UNIFORM_BUFFER_BINDINGS);function d(t,e,n,r){const o=t.value,l=e+"_"+n;if(void 0===r[l])return r[l]="number"==typeof o||"boolean"==typeof o?o:o.clone(),!0;{const t=r[l];if("number"==typeof o||"boolean"==typeof o){if(t!==o)return r[l]=o,!0}else if(!1===t.equals(o))return t.copy(o),!0}return!1}function f(t){const e={boundary:0,storage:0};return"number"==typeof t||"boolean"==typeof t?(e.boundary=4,e.storage=4):t.isVector2?(e.boundary=8,e.storage=8):t.isVector3||t.isColor?(e.boundary=16,e.storage=12):t.isVector4?(e.boundary=16,e.storage=16):t.isMatrix3?(e.boundary=48,e.storage=48):t.isMatrix4?(e.boundary=64,e.storage=64):t.isTexture?console.warn("THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group."):console.warn("THREE.WebGLRenderer: Unsupported uniform value type.",t),e}function m(e){const n=e.target;n.removeEventListener("dispose",m);const r=c.indexOf(n.__bindingPointIndex);c.splice(r,1),t.deleteBuffer(o[n.id]),delete o[n.id],delete l[n.id]}return{bind:function(t,e){const n=e.program;r.uniformBlockBinding(t,n)},update:function(n,_){let v=o[n.id];void 0===v&&(!function(t){const e=t.uniforms;let n=0;const r=16;for(let i=0,t=e.length;i<t;i++){const t=Array.isArray(e[i])?e[i]:[e[i]];for(let e=0,o=t.length;e<o;e++){const o=t[e],l=Array.isArray(o.value)?o.value:[o.value];for(let t=0,e=l.length;t<e;t++){const e=f(l[t]),c=n%r,h=c%e.boundary,d=c+h;n+=h,0!==d&&r-d<e.storage&&(n+=r-d),o.__data=new Float32Array(e.storage/Float32Array.BYTES_PER_ELEMENT),o.__offset=n,n+=e.storage}}}const o=n%r;o>0&&(n+=r-o);t.__size=n,t.__cache={}}(n),v=function(e){const n=function(){for(let i=0;i<h;i++)if(-1===c.indexOf(i))return c.push(i),i;return console.error("THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached."),0}();e.__bindingPointIndex=n;const r=t.createBuffer(),o=e.__size,l=e.usage;return t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,o,l),t.bindBuffer(t.UNIFORM_BUFFER,null),t.bindBufferBase(t.UNIFORM_BUFFER,n,r),r}(n),o[n.id]=v,n.addEventListener("dispose",m));const x=_.program;r.updateUBOMapping(n,x);const y=e.render.frame;l[n.id]!==y&&(!function(e){const n=o[e.id],r=e.uniforms,l=e.__cache;t.bindBuffer(t.UNIFORM_BUFFER,n);for(let i=0,e=r.length;i<e;i++){const e=Array.isArray(r[i])?r[i]:[r[i]];for(let n=0,r=e.length;n<r;n++){const r=e[n];if(!0===d(r,i,n,l)){const e=r.__offset,n=Array.isArray(r.value)?r.value:[r.value];let o=0;for(let l=0;l<n.length;l++){const c=n[l],h=f(c);"number"==typeof c||"boolean"==typeof c?(r.__data[0]=c,t.bufferSubData(t.UNIFORM_BUFFER,e+o,r.__data)):c.isMatrix3?(r.__data[0]=c.elements[0],r.__data[1]=c.elements[1],r.__data[2]=c.elements[2],r.__data[3]=0,r.__data[4]=c.elements[3],r.__data[5]=c.elements[4],r.__data[6]=c.elements[5],r.__data[7]=0,r.__data[8]=c.elements[6],r.__data[9]=c.elements[7],r.__data[10]=c.elements[8],r.__data[11]=0):(c.toArray(r.__data,o),o+=h.storage/Float32Array.BYTES_PER_ELEMENT)}t.bufferSubData(t.UNIFORM_BUFFER,e,r.__data)}}}t.bindBuffer(t.UNIFORM_BUFFER,null)}(n),l[n.id]=y)},dispose:function(){for(const e in o)t.deleteBuffer(o[e]);c=[],o={},l={}}}}class Mc{constructor(t={}){const{canvas:canvas=_i(),context:e=null,depth:n=!0,stencil:o=!1,alpha:l=!1,antialias:c=!1,premultipliedAlpha:h=!0,preserveDrawingBuffer:d=!1,powerPreference:f="default",failIfMajorPerformanceCaveat:m=!1,reverseDepthBuffer:_=!1}=t;let v;if(this.isWebGLRenderer=!0,null!==e){if("undefined"!=typeof WebGLRenderingContext&&e instanceof WebGLRenderingContext)throw new Error("THREE.WebGLRenderer: WebGL 1 is not supported since r163.");v=e.getContextAttributes().alpha}else v=l;const x=new Uint32Array(4),T=new Int32Array(4);let w=null,E=null;const A=[],C=[];this.domElement=canvas,this.debug={checkShaderErrors:!0,onShaderError:null},this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.sortObjects=!0,this.clippingPlanes=[],this.localClippingEnabled=!1,this._outputColorSpace=hn,this.toneMapping=ct,this.toneMappingExposure=1;const R=this;let P=!1,I=0,L=0,U=null,D=-1,N=null;const O=new Ni,F=new Ni;let B=null;const z=new fs(0);let k=0,V=canvas.width,H=canvas.height,G=1,W=null,X=null;const j=new Ni(0,0,V,H),Y=new Ni(0,0,V,H);let Z=!1;const J=new Ta;let K=!1,$=!1;const Q=new Mr,tt=new Mr,et=new Gi,nt=new Ni,it={background:null,fog:null,environment:null,overrideMaterial:null,isScene:!0};let st=!1;function at(){return null===U?G:1}let ot,lt,ht,ut,pt,ft,mt,gt,_t,vt,xt,yt,Mt,St,bt,Tt,wt,Et,At,Ct,Rt,Pt,It,Lt,Ut=e;function Dt(t,e){return canvas.getContext(t,e)}try{const t={alpha:!0,depth:n,stencil:o,antialias:c,premultipliedAlpha:h,preserveDrawingBuffer:d,powerPreference:f,failIfMajorPerformanceCaveat:m};if("setAttribute"in canvas&&canvas.setAttribute("data-engine",`three.js r${r}`),canvas.addEventListener("webglcontextlost",Bt,!1),canvas.addEventListener("webglcontextrestored",kt,!1),canvas.addEventListener("webglcontextcreationerror",Vt,!1),null===Ut){const e="webgl2";if(Ut=Dt(e,t),null===Ut)throw Dt(e)?new Error("Error creating WebGL context with your selected attributes."):new Error("Error creating WebGL context.")}}catch(t){throw console.error("THREE.WebGLRenderer: "+t.message),t}function Nt(){ot=new so(Ut),ot.init(),Pt=new hc(Ut,ot),lt=new Fa(Ut,ot,t,Pt),ht=new ac(Ut,ot),lt.reverseDepthBuffer&&_&&ht.buffers.depth.setReversed(!0),ut=new lo(Ut),pt=new Xl,ft=new cc(Ut,ot,ht,pt,lt,Pt,ut),mt=new za(R),gt=new ro(R),_t=new Ea(Ut),It=new Na(Ut,_t),vt=new ao(Ut,_t,ut,It),xt=new ho(Ut,vt,_t,ut),At=new co(Ut,lt,ft),Tt=new Ba(pt),yt=new Wl(R,mt,gt,ot,lt,It,Tt),Mt=new xc(R,pt),St=new Zl,bt=new ec(ot),Et=new Da(R,mt,gt,ht,xt,v,h),wt=new rc(R,xt,lt),Lt=new yc(Ut,ut,lt,ht),Ct=new Oa(Ut,ot,ut),Rt=new oo(Ut,ot,ut),ut.programs=yt.programs,R.capabilities=lt,R.extensions=ot,R.properties=pt,R.renderLists=St,R.shadowMap=wt,R.state=ht,R.info=ut}Nt();const Ot=new gc(R,Ut);function Bt(t){t.preventDefault(),console.log("THREE.WebGLRenderer: Context Lost."),P=!0}function kt(){console.log("THREE.WebGLRenderer: Context Restored."),P=!1;const t=ut.autoReset,e=wt.enabled,n=wt.autoUpdate,r=wt.needsUpdate,o=wt.type;Nt(),ut.autoReset=t,wt.enabled=e,wt.autoUpdate=n,wt.needsUpdate=r,wt.type=o}function Vt(t){console.error("THREE.WebGLRenderer: A WebGL context could not be created. Reason: ",t.statusMessage)}function Gt(t){const e=t.target;e.removeEventListener("dispose",Gt),function(t){(function(t){const e=pt.get(t).programs;void 0!==e&&(e.forEach((function(t){yt.releaseProgram(t)})),t.isShaderMaterial&&yt.releaseShaderCache(t))})(t),pt.remove(t)}(e)}function Xt(t,e,object){!0===t.transparent&&t.side===S&&!1===t.forceSinglePass?(t.side=M,t.needsUpdate=!0,ae(t,e,object),t.side=y,t.needsUpdate=!0,ae(t,e,object),t.side=S):ae(t,e,object)}this.xr=Ot,this.getContext=function(){return Ut},this.getContextAttributes=function(){return Ut.getContextAttributes()},this.forceContextLoss=function(){const t=ot.get("WEBGL_lose_context");t&&t.loseContext()},this.forceContextRestore=function(){const t=ot.get("WEBGL_lose_context");t&&t.restoreContext()},this.getPixelRatio=function(){return G},this.setPixelRatio=function(t){void 0!==t&&(G=t,this.setSize(V,H,!1))},this.getSize=function(t){return t.set(V,H)},this.setSize=function(t,e,n=!0){Ot.isPresenting?console.warn("THREE.WebGLRenderer: Can't change size while VR device is presenting."):(V=t,H=e,canvas.width=Math.floor(t*G),canvas.height=Math.floor(e*G),!0===n&&(canvas.style.width=t+"px",canvas.style.height=e+"px"),this.setViewport(0,0,t,e))},this.getDrawingBufferSize=function(t){return t.set(V*G,H*G).floor()},this.setDrawingBufferSize=function(t,e,n){V=t,H=e,G=n,canvas.width=Math.floor(t*n),canvas.height=Math.floor(e*n),this.setViewport(0,0,t,e)},this.getCurrentViewport=function(t){return t.copy(O)},this.getViewport=function(t){return t.copy(j)},this.setViewport=function(t,e,n,r){t.isVector4?j.set(t.x,t.y,t.z,t.w):j.set(t,e,n,r),ht.viewport(O.copy(j).multiplyScalar(G).round())},this.getScissor=function(t){return t.copy(Y)},this.setScissor=function(t,e,n,r){t.isVector4?Y.set(t.x,t.y,t.z,t.w):Y.set(t,e,n,r),ht.scissor(F.copy(Y).multiplyScalar(G).round())},this.getScissorTest=function(){return Z},this.setScissorTest=function(t){ht.setScissorTest(Z=t)},this.setOpaqueSort=function(t){W=t},this.setTransparentSort=function(t){X=t},this.getClearColor=function(t){return t.copy(Et.getClearColor())},this.setClearColor=function(){Et.setClearColor.apply(Et,arguments)},this.getClearAlpha=function(){return Et.getClearAlpha()},this.setClearAlpha=function(){Et.setClearAlpha.apply(Et,arguments)},this.clear=function(t=!0,e=!0,n=!0){let r=0;if(t){let t=!1;if(null!==U){const e=U.texture.format;t=e===ce||e===oe||e===se}if(t){const t=U.texture.type,e=t===zt||t===Wt||t===Ht||t===Zt||t===qt||t===Yt,n=Et.getClearColor(),a=Et.getClearAlpha(),r=n.r,g=n.g,b=n.b;e?(x[0]=r,x[1]=g,x[2]=b,x[3]=a,Ut.clearBufferuiv(Ut.COLOR,0,x)):(T[0]=r,T[1]=g,T[2]=b,T[3]=a,Ut.clearBufferiv(Ut.COLOR,0,T))}else r|=Ut.COLOR_BUFFER_BIT}e&&(r|=Ut.DEPTH_BUFFER_BIT),n&&(r|=Ut.STENCIL_BUFFER_BIT,this.state.buffers.stencil.setMask(4294967295)),Ut.clear(r)},this.clearColor=function(){this.clear(!0,!1,!1)},this.clearDepth=function(){this.clear(!1,!0,!1)},this.clearStencil=function(){this.clear(!1,!1,!0)},this.dispose=function(){canvas.removeEventListener("webglcontextlost",Bt,!1),canvas.removeEventListener("webglcontextrestored",kt,!1),canvas.removeEventListener("webglcontextcreationerror",Vt,!1),St.dispose(),bt.dispose(),pt.dispose(),mt.dispose(),gt.dispose(),xt.dispose(),It.dispose(),Lt.dispose(),yt.dispose(),Ot.dispose(),Ot.removeEventListener("sessionstart",Kt),Ot.removeEventListener("sessionend",$t),Qt.stop()},this.renderBufferDirect=function(t,e,n,r,object,o){null===e&&(e=it);const l=object.isMesh&&object.matrixWorld.determinant()<0,c=function(t,e,n,r,object){!0!==e.isScene&&(e=it);ft.resetTextureUnits();const o=e.fog,l=r.isMeshStandardMaterial?e.environment:null,c=null===U?R.outputColorSpace:!0===U.isXRRenderTarget?U.texture.colorSpace:un,h=(r.isMeshStandardMaterial?gt:mt).get(r.envMap||l),d=!0===r.vertexColors&&!!n.attributes.color&&4===n.attributes.color.itemSize,f=!!n.attributes.tangent&&(!!r.normalMap||r.anisotropy>0),m=!!n.morphAttributes.position,_=!!n.morphAttributes.normal,v=!!n.morphAttributes.color;let x=ct;r.toneMapped&&(null!==U&&!0!==U.isXRRenderTarget||(x=R.toneMapping));const y=n.morphAttributes.position||n.morphAttributes.normal||n.morphAttributes.color,M=void 0!==y?y.length:0,S=pt.get(r),T=E.state.lights;if(!0===K&&(!0===$||t!==N)){const e=t===N&&r.id===D;Tt.setState(r,t,e)}let w=!1;r.version===S.__version?S.needsLights&&S.lightsStateVersion!==T.state.version||S.outputColorSpace!==c||object.isBatchedMesh&&!1===S.batching?w=!0:object.isBatchedMesh||!0!==S.batching?object.isBatchedMesh&&!0===S.batchingColor&&null===object.colorTexture||object.isBatchedMesh&&!1===S.batchingColor&&null!==object.colorTexture||object.isInstancedMesh&&!1===S.instancing?w=!0:object.isInstancedMesh||!0!==S.instancing?object.isSkinnedMesh&&!1===S.skinning?w=!0:object.isSkinnedMesh||!0!==S.skinning?object.isInstancedMesh&&!0===S.instancingColor&&null===object.instanceColor||object.isInstancedMesh&&!1===S.instancingColor&&null!==object.instanceColor||object.isInstancedMesh&&!0===S.instancingMorph&&null===object.morphTexture||object.isInstancedMesh&&!1===S.instancingMorph&&null!==object.morphTexture||S.envMap!==h||!0===r.fog&&S.fog!==o?w=!0:void 0===S.numClippingPlanes||S.numClippingPlanes===Tt.numPlanes&&S.numIntersection===Tt.numIntersection?(S.vertexAlphas!==d||S.vertexTangents!==f||S.morphTargets!==m||S.morphNormals!==_||S.morphColors!==v||S.toneMapping!==x||S.morphTargetsCount!==M)&&(w=!0):w=!0:w=!0:w=!0:w=!0:(w=!0,S.__version=r.version);let A=S.currentProgram;!0===w&&(A=ae(r,e,object));let C=!1,P=!1,I=!1;const L=A.getUniforms(),O=S.uniforms;ht.useProgram(A.program)&&(C=!0,P=!0,I=!0);r.id!==D&&(D=r.id,P=!0);if(C||N!==t){ht.buffers.depth.getReversed()?(Q.copy(t.projectionMatrix),function(t){const e=t.elements;e[2]=.5*e[2]+.5*e[3],e[6]=.5*e[6]+.5*e[7],e[10]=.5*e[10]+.5*e[11],e[14]=.5*e[14]+.5*e[15]}(Q),function(t){const e=t.elements;-1===e[11]?(e[10]=-e[10]-1,e[14]=-e[14]):(e[10]=-e[10],e[14]=1-e[14])}(Q),L.setValue(Ut,"projectionMatrix",Q)):L.setValue(Ut,"projectionMatrix",t.projectionMatrix),L.setValue(Ut,"viewMatrix",t.matrixWorldInverse);const e=L.map.cameraPosition;void 0!==e&&e.setValue(Ut,et.setFromMatrixPosition(t.matrixWorld)),lt.logarithmicDepthBuffer&&L.setValue(Ut,"logDepthBufFC",2/(Math.log(t.far+1)/Math.LN2)),(r.isMeshPhongMaterial||r.isMeshToonMaterial||r.isMeshLambertMaterial||r.isMeshBasicMaterial||r.isMeshStandardMaterial||r.isShaderMaterial)&&L.setValue(Ut,"isOrthographic",!0===t.isOrthographicCamera),N!==t&&(N=t,P=!0,I=!0)}if(object.isSkinnedMesh){L.setOptional(Ut,object,"bindMatrix"),L.setOptional(Ut,object,"bindMatrixInverse");const t=object.skeleton;t&&(null===t.boneTexture&&t.computeBoneTexture(),L.setValue(Ut,"boneTexture",t.boneTexture,ft))}object.isBatchedMesh&&(L.setOptional(Ut,object,"batchingTexture"),L.setValue(Ut,"batchingTexture",object._matricesTexture,ft),L.setOptional(Ut,object,"batchingIdTexture"),L.setValue(Ut,"batchingIdTexture",object._indirectTexture,ft),L.setOptional(Ut,object,"batchingColorTexture"),null!==object._colorsTexture&&L.setValue(Ut,"batchingColorTexture",object._colorsTexture,ft));const F=n.morphAttributes;void 0===F.position&&void 0===F.normal&&void 0===F.color||At.update(object,n,A);(P||S.receiveShadow!==object.receiveShadow)&&(S.receiveShadow=object.receiveShadow,L.setValue(Ut,"receiveShadow",object.receiveShadow));r.isMeshGouraudMaterial&&null!==r.envMap&&(O.envMap.value=h,O.flipEnvMap.value=h.isCubeTexture&&!1===h.isRenderTargetTexture?-1:1);r.isMeshStandardMaterial&&null===r.envMap&&null!==e.environment&&(O.envMapIntensity.value=e.environmentIntensity);P&&(L.setValue(Ut,"toneMappingExposure",R.toneMappingExposure),S.needsLights&&(z=I,(B=O).ambientLightColor.needsUpdate=z,B.lightProbe.needsUpdate=z,B.directionalLights.needsUpdate=z,B.directionalLightShadows.needsUpdate=z,B.pointLights.needsUpdate=z,B.pointLightShadows.needsUpdate=z,B.spotLights.needsUpdate=z,B.spotLightShadows.needsUpdate=z,B.rectAreaLights.needsUpdate=z,B.hemisphereLights.needsUpdate=z),o&&!0===r.fog&&Mt.refreshFogUniforms(O,o),Mt.refreshMaterialUniforms(O,r,G,H,E.state.transmissionRenderTarget[t.id]),yl.upload(Ut,le(S),O,ft));var B,z;r.isShaderMaterial&&!0===r.uniformsNeedUpdate&&(yl.upload(Ut,le(S),O,ft),r.uniformsNeedUpdate=!1);r.isSpriteMaterial&&L.setValue(Ut,"center",object.center);if(L.setValue(Ut,"modelViewMatrix",object.modelViewMatrix),L.setValue(Ut,"normalMatrix",object.normalMatrix),L.setValue(Ut,"modelMatrix",object.matrixWorld),r.isShaderMaterial||r.isRawShaderMaterial){const t=r.uniformsGroups;for(let i=0,e=t.length;i<e;i++){const e=t[i];Lt.update(e,A),Lt.bind(e,A)}}return A}(t,e,n,r,object);ht.setMaterial(r,l);let h=n.index,d=1;if(!0===r.wireframe){if(h=vt.getWireframeAttribute(n),void 0===h)return;d=2}const f=n.drawRange,m=n.attributes.position;let _=f.start*d,v=(f.start+f.count)*d;null!==o&&(_=Math.max(_,o.start*d),v=Math.min(v,(o.start+o.count)*d)),null!==h?(_=Math.max(_,0),v=Math.min(v,h.count)):null!=m&&(_=Math.max(_,0),v=Math.min(v,m.count));const x=v-_;if(x<0||x===1/0)return;let y;It.setup(object,r,c,n,h);let M=Ct;if(null!==h&&(y=_t.get(h),M=Rt,M.setIndex(y)),object.isMesh)!0===r.wireframe?(ht.setLineWidth(r.wireframeLinewidth*at()),M.setMode(Ut.LINES)):M.setMode(Ut.TRIANGLES);else if(object.isLine){let t=r.linewidth;void 0===t&&(t=1),ht.setLineWidth(t*at()),object.isLineSegments?M.setMode(Ut.LINES):object.isLineLoop?M.setMode(Ut.LINE_LOOP):M.setMode(Ut.LINE_STRIP)}else object.isPoints?M.setMode(Ut.POINTS):object.isSprite&&M.setMode(Ut.TRIANGLES);if(object.isBatchedMesh)if(null!==object._multiDrawInstances)M.renderMultiDrawInstances(object._multiDrawStarts,object._multiDrawCounts,object._multiDrawCount,object._multiDrawInstances);else if(ot.get("WEBGL_multi_draw"))M.renderMultiDraw(object._multiDrawStarts,object._multiDrawCounts,object._multiDrawCount);else{const t=object._multiDrawStarts,e=object._multiDrawCounts,n=object._multiDrawCount,o=h?_t.get(h).bytesPerElement:1,l=pt.get(r).currentProgram.getUniforms();for(let i=0;i<n;i++)l.setValue(Ut,"_gl_DrawID",i),M.render(t[i]/o,e[i])}else if(object.isInstancedMesh)M.renderInstances(_,x,object.count);else if(n.isInstancedBufferGeometry){const t=void 0!==n._maxInstanceCount?n._maxInstanceCount:1/0,e=Math.min(n.instanceCount,t);M.renderInstances(_,x,e)}else M.render(_,x)},this.compile=function(t,e,n=null){null===n&&(n=t),E=bt.get(n),E.init(e),C.push(E),n.traverseVisible((function(object){object.isLight&&object.layers.test(e.layers)&&(E.pushLight(object),object.castShadow&&E.pushShadow(object))})),t!==n&&t.traverseVisible((function(object){object.isLight&&object.layers.test(e.layers)&&(E.pushLight(object),object.castShadow&&E.pushShadow(object))})),E.setupLights();const r=new Set;return t.traverse((function(object){if(!(object.isMesh||object.isPoints||object.isLine||object.isSprite))return;const t=object.material;if(t)if(Array.isArray(t))for(let i=0;i<t.length;i++){const e=t[i];Xt(e,n,object),r.add(e)}else Xt(t,n,object),r.add(t)})),C.pop(),E=null,r},this.compileAsync=function(t,e,n=null){const r=this.compile(t,e,n);return new Promise((e=>{function n(){r.forEach((function(t){pt.get(t).currentProgram.isReady()&&r.delete(t)})),0!==r.size?setTimeout(n,10):e(t)}null!==ot.get("KHR_parallel_shader_compile")?n():setTimeout(n,10)}))};let Jt=null;function Kt(){Qt.stop()}function $t(){Qt.start()}const Qt=new wa;function te(object,t,e,n){if(!1===object.visible)return;if(object.layers.test(t.layers))if(object.isGroup)e=object.renderOrder;else if(object.isLOD)!0===object.autoUpdate&&object.update(t);else if(object.isLight)E.pushLight(object),object.castShadow&&E.pushShadow(object);else if(object.isSprite){if(!object.frustumCulled||J.intersectsSprite(object)){n&&nt.setFromMatrixPosition(object.matrixWorld).applyMatrix4(tt);const t=xt.update(object),r=object.material;r.visible&&w.push(object,t,r,e,nt.z,null)}}else if((object.isMesh||object.isLine||object.isPoints)&&(!object.frustumCulled||J.intersectsObject(object))){const t=xt.update(object),r=object.material;if(n&&(void 0!==object.boundingSphere?(null===object.boundingSphere&&object.computeBoundingSphere(),nt.copy(object.boundingSphere.center)):(null===t.boundingSphere&&t.computeBoundingSphere(),nt.copy(t.boundingSphere.center)),nt.applyMatrix4(object.matrixWorld).applyMatrix4(tt)),Array.isArray(r)){const n=t.groups;for(let i=0,o=n.length;i<o;i++){const o=n[i],l=r[o.materialIndex];l&&l.visible&&w.push(object,t,l,e,nt.z,o)}}else r.visible&&w.push(object,t,r,e,nt.z,null)}const r=object.children;for(let i=0,o=r.length;i<o;i++)te(r[i],t,e,n)}function ee(t,e,n,r){const o=t.opaque,l=t.transmissive,c=t.transparent;E.setupLightsView(n),!0===K&&Tt.setGlobalState(R.clippingPlanes,n),r&&ht.viewport(O.copy(r)),o.length>0&&ie(o,e,n),l.length>0&&ie(l,e,n),c.length>0&&ie(c,e,n),ht.buffers.depth.setTest(!0),ht.buffers.depth.setMask(!0),ht.buffers.color.setMask(!0),ht.setPolygonOffset(!1)}function ne(t,e,n,r){if(null!==(!0===n.isScene?n.overrideMaterial:null))return;void 0===E.state.transmissionRenderTarget[r.id]&&(E.state.transmissionRenderTarget[r.id]=new Fi(1,1,{generateMipmaps:!0,type:ot.has("EXT_color_buffer_half_float")||ot.has("EXT_color_buffer_float")?jt:zt,minFilter:Ft,samples:4,stencilBuffer:o,resolveDepthBuffer:!1,resolveStencilBuffer:!1,colorSpace:yi.workingColorSpace}));const l=E.state.transmissionRenderTarget[r.id],c=r.viewport||O;l.setSize(c.z,c.w);const h=R.getRenderTarget();R.setRenderTarget(l),R.getClearColor(z),k=R.getClearAlpha(),k<1&&R.setClearColor(16777215,.5),R.clear(),st&&Et.render(n);const d=R.toneMapping;R.toneMapping=ct;const f=r.viewport;if(void 0!==r.viewport&&(r.viewport=void 0),E.setupLightsView(r),!0===K&&Tt.setGlobalState(R.clippingPlanes,r),ie(t,n,r),ft.updateMultisampleRenderTarget(l),ft.updateRenderTargetMipmap(l),!1===ot.has("WEBGL_multisampled_render_to_texture")){let t=!1;for(let i=0,o=e.length;i<o;i++){const o=e[i],object=o.object,l=o.geometry,c=o.material,h=o.group;if(c.side===S&&object.layers.test(r.layers)){const e=c.side;c.side=M,c.needsUpdate=!0,re(object,n,r,l,c,h),c.side=e,c.needsUpdate=!0,t=!0}}!0===t&&(ft.updateMultisampleRenderTarget(l),ft.updateRenderTargetMipmap(l))}R.setRenderTarget(h),R.setClearColor(z,k),void 0!==f&&(r.viewport=f),R.toneMapping=d}function ie(t,e,n){const r=!0===e.isScene?e.overrideMaterial:null;for(let i=0,o=t.length;i<o;i++){const o=t[i],object=o.object,l=o.geometry,c=null===r?o.material:r,h=o.group;object.layers.test(n.layers)&&re(object,e,n,l,c,h)}}function re(object,t,e,n,r,o){object.onBeforeRender(R,t,e,n,r,o),object.modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,object.matrixWorld),object.normalMatrix.getNormalMatrix(object.modelViewMatrix),r.onBeforeRender(R,t,e,n,object,o),!0===r.transparent&&r.side===S&&!1===r.forceSinglePass?(r.side=M,r.needsUpdate=!0,R.renderBufferDirect(e,t,n,r,object,o),r.side=y,r.needsUpdate=!0,R.renderBufferDirect(e,t,n,r,object,o),r.side=S):R.renderBufferDirect(e,t,n,r,object,o),object.onAfterRender(R,t,e,n,r,o)}function ae(t,e,object){!0!==e.isScene&&(e=it);const n=pt.get(t),r=E.state.lights,o=E.state.shadowsArray,l=r.state.version,c=yt.getParameters(t,r.state,o,e,object),h=yt.getProgramCacheKey(c);let d=n.programs;n.environment=t.isMeshStandardMaterial?e.environment:null,n.fog=e.fog,n.envMap=(t.isMeshStandardMaterial?gt:mt).get(t.envMap||n.environment),n.envMapRotation=null!==n.environment&&null===t.envMap?e.environmentRotation:t.envMapRotation,void 0===d&&(t.addEventListener("dispose",Gt),d=new Map,n.programs=d);let f=d.get(h);if(void 0!==f){if(n.currentProgram===f&&n.lightsStateVersion===l)return he(t,c),f}else c.uniforms=yt.getUniforms(t),t.onBeforeCompile(c,R),f=yt.acquireProgram(c,h),d.set(h,f),n.uniforms=c.uniforms;const m=n.uniforms;return(t.isShaderMaterial||t.isRawShaderMaterial)&&!0!==t.clipping||(m.clippingPlanes=Tt.uniform),he(t,c),n.needsLights=function(t){return t.isMeshLambertMaterial||t.isMeshToonMaterial||t.isMeshPhongMaterial||t.isMeshStandardMaterial||t.isShadowMaterial||t.isShaderMaterial&&!0===t.lights}(t),n.lightsStateVersion=l,n.needsLights&&(m.ambientLightColor.value=r.state.ambient,m.lightProbe.value=r.state.probe,m.directionalLights.value=r.state.directional,m.directionalLightShadows.value=r.state.directionalShadow,m.spotLights.value=r.state.spot,m.spotLightShadows.value=r.state.spotShadow,m.rectAreaLights.value=r.state.rectArea,m.ltc_1.value=r.state.rectAreaLTC1,m.ltc_2.value=r.state.rectAreaLTC2,m.pointLights.value=r.state.point,m.pointLightShadows.value=r.state.pointShadow,m.hemisphereLights.value=r.state.hemi,m.directionalShadowMap.value=r.state.directionalShadowMap,m.directionalShadowMatrix.value=r.state.directionalShadowMatrix,m.spotShadowMap.value=r.state.spotShadowMap,m.spotLightMatrix.value=r.state.spotLightMatrix,m.spotLightMap.value=r.state.spotLightMap,m.pointShadowMap.value=r.state.pointShadowMap,m.pointShadowMatrix.value=r.state.pointShadowMatrix),n.currentProgram=f,n.uniformsList=null,f}function le(t){if(null===t.uniformsList){const e=t.currentProgram.getUniforms();t.uniformsList=yl.seqWithValue(e.seq,t.uniforms)}return t.uniformsList}function he(t,e){const n=pt.get(t);n.outputColorSpace=e.outputColorSpace,n.batching=e.batching,n.batchingColor=e.batchingColor,n.instancing=e.instancing,n.instancingColor=e.instancingColor,n.instancingMorph=e.instancingMorph,n.skinning=e.skinning,n.morphTargets=e.morphTargets,n.morphNormals=e.morphNormals,n.morphColors=e.morphColors,n.morphTargetsCount=e.morphTargetsCount,n.numClippingPlanes=e.numClippingPlanes,n.numIntersection=e.numClipIntersection,n.vertexAlphas=e.vertexAlphas,n.vertexTangents=e.vertexTangents,n.toneMapping=e.toneMapping}Qt.setAnimationLoop((function(time){Jt&&Jt(time)})),"undefined"!=typeof self&&Qt.setContext(self),this.setAnimationLoop=function(t){Jt=t,Ot.setAnimationLoop(t),null===t?Qt.stop():Qt.start()},Ot.addEventListener("sessionstart",Kt),Ot.addEventListener("sessionend",$t),this.render=function(t,e){if(void 0!==e&&!0!==e.isCamera)return void console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");if(!0===P)return;if(!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),null===e.parent&&!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),!0===Ot.enabled&&!0===Ot.isPresenting&&(!0===Ot.cameraAutoUpdate&&Ot.updateCamera(e),e=Ot.getCamera()),!0===t.isScene&&t.onBeforeRender(R,t,e,U),E=bt.get(t,C.length),E.init(e),C.push(E),tt.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),J.setFromProjectionMatrix(tt),$=this.localClippingEnabled,K=Tt.init(this.clippingPlanes,$),w=St.get(t,A.length),w.init(),A.push(w),!0===Ot.enabled&&!0===Ot.isPresenting){const t=R.xr.getDepthSensingMesh();null!==t&&te(t,e,-1/0,R.sortObjects)}te(t,e,0,R.sortObjects),w.finish(),!0===R.sortObjects&&w.sort(W,X),st=!1===Ot.enabled||!1===Ot.isPresenting||!1===Ot.hasDepthSensing(),st&&Et.addToRenderList(w,t),this.info.render.frame++,!0===K&&Tt.beginShadows();const n=E.state.shadowsArray;wt.render(n,t,e),!0===K&&Tt.endShadows(),!0===this.info.autoReset&&this.info.reset();const r=w.opaque,o=w.transmissive;if(E.setupLights(),e.isArrayCamera){const n=e.cameras;if(o.length>0)for(let i=0,e=n.length;i<e;i++){ne(r,o,t,n[i])}st&&Et.render(t);for(let i=0,e=n.length;i<e;i++){const e=n[i];ee(w,t,e,e.viewport)}}else o.length>0&&ne(r,o,t,e),st&&Et.render(t),ee(w,t,e);null!==U&&(ft.updateMultisampleRenderTarget(U),ft.updateRenderTargetMipmap(U)),!0===t.isScene&&t.onAfterRender(R,t,e),It.resetDefaultState(),D=-1,N=null,C.pop(),C.length>0?(E=C[C.length-1],!0===K&&Tt.setGlobalState(R.clippingPlanes,E.state.camera)):E=null,A.pop(),w=A.length>0?A[A.length-1]:null},this.getActiveCubeFace=function(){return I},this.getActiveMipmapLevel=function(){return L},this.getRenderTarget=function(){return U},this.setRenderTargetTextures=function(t,e,n){pt.get(t.texture).__webglTexture=e,pt.get(t.depthTexture).__webglTexture=n;const r=pt.get(t);r.__hasExternalTextures=!0,r.__autoAllocateDepthBuffer=void 0===n,r.__autoAllocateDepthBuffer||!0===ot.has("WEBGL_multisampled_render_to_texture")&&(console.warn("THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided"),r.__useRenderToTexture=!1)},this.setRenderTargetFramebuffer=function(t,e){const n=pt.get(t);n.__webglFramebuffer=e,n.__useDefaultFramebuffer=void 0===e},this.setRenderTarget=function(t,e=0,n=0){U=t,I=e,L=n;let r=!0,o=null,l=!1,c=!1;if(t){const h=pt.get(t);if(void 0!==h.__useDefaultFramebuffer)ht.bindFramebuffer(Ut.FRAMEBUFFER,null),r=!1;else if(void 0===h.__webglFramebuffer)ft.setupRenderTarget(t);else if(h.__hasExternalTextures)ft.rebindTextures(t,pt.get(t.texture).__webglTexture,pt.get(t.depthTexture).__webglTexture);else if(t.depthBuffer){const e=t.depthTexture;if(h.__boundDepthTexture!==e){if(null!==e&&pt.has(e)&&(t.width!==e.image.width||t.height!==e.image.height))throw new Error("WebGLRenderTarget: Attached DepthTexture is initialized to the incorrect size.");ft.setupDepthRenderbuffer(t)}}const d=t.texture;(d.isData3DTexture||d.isDataArrayTexture||d.isCompressedArrayTexture)&&(c=!0);const f=pt.get(t).__webglFramebuffer;t.isWebGLCubeRenderTarget?(o=Array.isArray(f[e])?f[e][n]:f[e],l=!0):o=t.samples>0&&!1===ft.useMultisampledRTT(t)?pt.get(t).__webglMultisampledFramebuffer:Array.isArray(f)?f[n]:f,O.copy(t.viewport),F.copy(t.scissor),B=t.scissorTest}else O.copy(j).multiplyScalar(G).floor(),F.copy(Y).multiplyScalar(G).floor(),B=Z;if(ht.bindFramebuffer(Ut.FRAMEBUFFER,o)&&r&&ht.drawBuffers(t,o),ht.viewport(O),ht.scissor(F),ht.setScissorTest(B),l){const r=pt.get(t.texture);Ut.framebufferTexture2D(Ut.FRAMEBUFFER,Ut.COLOR_ATTACHMENT0,Ut.TEXTURE_CUBE_MAP_POSITIVE_X+e,r.__webglTexture,n)}else if(c){const r=pt.get(t.texture),o=e||0;Ut.framebufferTextureLayer(Ut.FRAMEBUFFER,Ut.COLOR_ATTACHMENT0,r.__webglTexture,n||0,o)}D=-1},this.readRenderTargetPixels=function(t,e,n,r,o,l,c){if(!t||!t.isWebGLRenderTarget)return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let h=pt.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==c&&(h=h[c]),h){ht.bindFramebuffer(Ut.FRAMEBUFFER,h);try{const c=t.texture,h=c.format,d=c.type;if(!lt.textureFormatReadable(h))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.");if(!lt.textureTypeReadable(d))return void console.error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.");e>=0&&e<=t.width-r&&n>=0&&n<=t.height-o&&Ut.readPixels(e,n,r,o,Pt.convert(h),Pt.convert(d),l)}finally{const t=null!==U?pt.get(U).__webglFramebuffer:null;ht.bindFramebuffer(Ut.FRAMEBUFFER,t)}}},this.readRenderTargetPixelsAsync=async function(t,e,n,r,o,l,c){if(!t||!t.isWebGLRenderTarget)throw new Error("THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.");let h=pt.get(t).__webglFramebuffer;if(t.isWebGLCubeRenderTarget&&void 0!==c&&(h=h[c]),h){const c=t.texture,d=c.format,f=c.type;if(!lt.textureFormatReadable(d))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in RGBA or implementation defined format.");if(!lt.textureTypeReadable(f))throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: renderTarget is not in UnsignedByteType or implementation defined type.");if(e>=0&&e<=t.width-r&&n>=0&&n<=t.height-o){ht.bindFramebuffer(Ut.FRAMEBUFFER,h);const t=Ut.createBuffer();Ut.bindBuffer(Ut.PIXEL_PACK_BUFFER,t),Ut.bufferData(Ut.PIXEL_PACK_BUFFER,l.byteLength,Ut.STREAM_READ),Ut.readPixels(e,n,r,o,Pt.convert(d),Pt.convert(f),0);const c=null!==U?pt.get(U).__webglFramebuffer:null;ht.bindFramebuffer(Ut.FRAMEBUFFER,c);const m=Ut.fenceSync(Ut.SYNC_GPU_COMMANDS_COMPLETE,0);return Ut.flush(),await function(t,e,n){return new Promise((function(r,o){setTimeout((function l(){switch(t.clientWaitSync(e,t.SYNC_FLUSH_COMMANDS_BIT,0)){case t.WAIT_FAILED:o();break;case t.TIMEOUT_EXPIRED:setTimeout(l,n);break;default:r()}}),n)}))}(Ut,m,4),Ut.bindBuffer(Ut.PIXEL_PACK_BUFFER,t),Ut.getBufferSubData(Ut.PIXEL_PACK_BUFFER,0,l),Ut.deleteBuffer(t),Ut.deleteSync(m),l}throw new Error("THREE.WebGLRenderer.readRenderTargetPixelsAsync: requested read bounds are out of range.")}},this.copyFramebufferToTexture=function(t,e=null,n=0){!0!==t.isTexture&&(xi("WebGLRenderer: copyFramebufferToTexture function signature has changed."),e=arguments[0]||null,t=arguments[1]);const r=Math.pow(2,-n),o=Math.floor(t.image.width*r),l=Math.floor(t.image.height*r),c=null!==e?e.x:0,h=null!==e?e.y:0;ft.setTexture2D(t,0),Ut.copyTexSubImage2D(Ut.TEXTURE_2D,n,0,0,c,h,o,l),ht.unbindTexture()},this.copyTextureToTexture=function(t,e,n=null,r=null,o=0){let l,c,h,d,f,m,_,v,x;!0!==t.isTexture&&(xi("WebGLRenderer: copyTextureToTexture function signature has changed."),r=arguments[0]||null,t=arguments[1],e=arguments[2],o=arguments[3]||0,n=null);const image=t.isCompressedTexture?t.mipmaps[o]:t.image;null!==n?(l=n.max.x-n.min.x,c=n.max.y-n.min.y,h=n.isBox3?n.max.z-n.min.z:1,d=n.min.x,f=n.min.y,m=n.isBox3?n.min.z:0):(l=image.width,c=image.height,h=image.depth||1,d=0,f=0,m=0),null!==r?(_=r.x,v=r.y,x=r.z):(_=0,v=0,x=0);const y=Pt.convert(e.format),M=Pt.convert(e.type);let S;e.isData3DTexture?(ft.setTexture3D(e,0),S=Ut.TEXTURE_3D):e.isDataArrayTexture||e.isCompressedArrayTexture?(ft.setTexture2DArray(e,0),S=Ut.TEXTURE_2D_ARRAY):(ft.setTexture2D(e,0),S=Ut.TEXTURE_2D),Ut.pixelStorei(Ut.UNPACK_FLIP_Y_WEBGL,e.flipY),Ut.pixelStorei(Ut.UNPACK_PREMULTIPLY_ALPHA_WEBGL,e.premultiplyAlpha),Ut.pixelStorei(Ut.UNPACK_ALIGNMENT,e.unpackAlignment);const T=Ut.getParameter(Ut.UNPACK_ROW_LENGTH),w=Ut.getParameter(Ut.UNPACK_IMAGE_HEIGHT),E=Ut.getParameter(Ut.UNPACK_SKIP_PIXELS),A=Ut.getParameter(Ut.UNPACK_SKIP_ROWS),C=Ut.getParameter(Ut.UNPACK_SKIP_IMAGES);Ut.pixelStorei(Ut.UNPACK_ROW_LENGTH,image.width),Ut.pixelStorei(Ut.UNPACK_IMAGE_HEIGHT,image.height),Ut.pixelStorei(Ut.UNPACK_SKIP_PIXELS,d),Ut.pixelStorei(Ut.UNPACK_SKIP_ROWS,f),Ut.pixelStorei(Ut.UNPACK_SKIP_IMAGES,m);const R=t.isDataArrayTexture||t.isData3DTexture,P=e.isDataArrayTexture||e.isData3DTexture;if(t.isRenderTargetTexture||t.isDepthTexture){const n=pt.get(t),r=pt.get(e),y=pt.get(n.__renderTarget),M=pt.get(r.__renderTarget);ht.bindFramebuffer(Ut.READ_FRAMEBUFFER,y.__webglFramebuffer),ht.bindFramebuffer(Ut.DRAW_FRAMEBUFFER,M.__webglFramebuffer);for(let i=0;i<h;i++)R&&Ut.framebufferTextureLayer(Ut.READ_FRAMEBUFFER,Ut.COLOR_ATTACHMENT0,pt.get(t).__webglTexture,o,m+i),t.isDepthTexture?(P&&Ut.framebufferTextureLayer(Ut.DRAW_FRAMEBUFFER,Ut.COLOR_ATTACHMENT0,pt.get(e).__webglTexture,o,x+i),Ut.blitFramebuffer(d,f,l,c,_,v,l,c,Ut.DEPTH_BUFFER_BIT,Ut.NEAREST)):P?Ut.copyTexSubImage3D(S,o,_,v,x+i,d,f,l,c):Ut.copyTexSubImage2D(S,o,_,v,x+i,d,f,l,c);ht.bindFramebuffer(Ut.READ_FRAMEBUFFER,null),ht.bindFramebuffer(Ut.DRAW_FRAMEBUFFER,null)}else P?t.isDataTexture||t.isData3DTexture?Ut.texSubImage3D(S,o,_,v,x,l,c,h,y,M,image.data):e.isCompressedArrayTexture?Ut.compressedTexSubImage3D(S,o,_,v,x,l,c,h,y,image.data):Ut.texSubImage3D(S,o,_,v,x,l,c,h,y,M,image):t.isDataTexture?Ut.texSubImage2D(Ut.TEXTURE_2D,o,_,v,l,c,y,M,image.data):t.isCompressedTexture?Ut.compressedTexSubImage2D(Ut.TEXTURE_2D,o,_,v,image.width,image.height,y,image.data):Ut.texSubImage2D(Ut.TEXTURE_2D,o,_,v,l,c,y,M,image);Ut.pixelStorei(Ut.UNPACK_ROW_LENGTH,T),Ut.pixelStorei(Ut.UNPACK_IMAGE_HEIGHT,w),Ut.pixelStorei(Ut.UNPACK_SKIP_PIXELS,E),Ut.pixelStorei(Ut.UNPACK_SKIP_ROWS,A),Ut.pixelStorei(Ut.UNPACK_SKIP_IMAGES,C),0===o&&e.generateMipmaps&&Ut.generateMipmap(S),ht.unbindTexture()},this.copyTextureToTexture3D=function(t,e,n=null,r=null,o=0){return!0!==t.isTexture&&(xi("WebGLRenderer: copyTextureToTexture3D function signature has changed."),n=arguments[0]||null,r=arguments[1]||null,t=arguments[2],e=arguments[3],o=arguments[4]||0),xi('WebGLRenderer: copyTextureToTexture3D function has been deprecated. Use "copyTextureToTexture" instead.'),this.copyTextureToTexture(t,e,n,r,o)},this.initRenderTarget=function(t){void 0===pt.get(t).__webglFramebuffer&&ft.setupRenderTarget(t)},this.initTexture=function(t){t.isCubeTexture?ft.setTextureCube(t,0):t.isData3DTexture?ft.setTexture3D(t,0):t.isDataArrayTexture||t.isCompressedArrayTexture?ft.setTexture2DArray(t,0):ft.setTexture2D(t,0),ht.unbindTexture()},this.resetState=function(){I=0,L=0,U=null,ht.reset(),It.reset()},"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}get coordinateSystem(){return Zn}get outputColorSpace(){return this._outputColorSpace}set outputColorSpace(t){this._outputColorSpace=t;const e=this.getContext();e.drawingBufferColorspace=yi._getDrawingBufferColorSpace(t),e.unpackColorSpace=yi._getUnpackColorSpace()}}class Sc{constructor(t,e=25e-5){this.isFogExp2=!0,this.name="",this.color=new fs(t),this.density=e}clone(){return new Sc(this.color,this.density)}toJSON(){return{type:"FogExp2",name:this.name,color:this.color.getHex(),density:this.density}}}class bc{constructor(t,e=1,n=1e3){this.isFog=!0,this.name="",this.color=new fs(t),this.near=e,this.far=n}clone(){return new bc(this.color,this.near,this.far)}toJSON(){return{type:"Fog",name:this.name,color:this.color.getHex(),near:this.near,far:this.far}}}class Tc extends Zr{constructor(){super(),this.isScene=!0,this.type="Scene",this.background=null,this.environment=null,this.fog=null,this.backgroundBlurriness=0,this.backgroundIntensity=1,this.backgroundRotation=new Lr,this.environmentIntensity=1,this.environmentRotation=new Lr,this.overrideMaterial=null,"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("observe",{detail:this}))}copy(source,t){return super.copy(source,t),null!==source.background&&(this.background=source.background.clone()),null!==source.environment&&(this.environment=source.environment.clone()),null!==source.fog&&(this.fog=source.fog.clone()),this.backgroundBlurriness=source.backgroundBlurriness,this.backgroundIntensity=source.backgroundIntensity,this.backgroundRotation.copy(source.backgroundRotation),this.environmentIntensity=source.environmentIntensity,this.environmentRotation.copy(source.environmentRotation),null!==source.overrideMaterial&&(this.overrideMaterial=source.overrideMaterial.clone()),this.matrixAutoUpdate=source.matrixAutoUpdate,this}toJSON(meta){const data=super.toJSON(meta);return null!==this.fog&&(data.object.fog=this.fog.toJSON()),this.backgroundBlurriness>0&&(data.object.backgroundBlurriness=this.backgroundBlurriness),1!==this.backgroundIntensity&&(data.object.backgroundIntensity=this.backgroundIntensity),data.object.backgroundRotation=this.backgroundRotation.toArray(),1!==this.environmentIntensity&&(data.object.environmentIntensity=this.environmentIntensity),data.object.environmentRotation=this.environmentRotation.toArray(),data}}class wc{constructor(t,e){this.isInterleavedBuffer=!0,this.array=t,this.stride=e,this.count=void 0!==t?t.length/e:0,this.usage=Bn,this.updateRanges=[],this.version=0,this.uuid=ni()}onUploadCallback(){}set needsUpdate(t){!0===t&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,e){this.updateRanges.push({start:t,count:e})}clearUpdateRanges(){this.updateRanges.length=0}copy(source){return this.array=new source.array.constructor(source.array),this.count=source.count,this.stride=source.stride,this.usage=source.usage,this}copyAt(t,e,n){t*=this.stride,n*=e.stride;for(let i=0,r=this.stride;i<r;i++)this.array[t+i]=e.array[n+i];return this}set(t,e=0){return this.array.set(t,e),this}clone(data){void 0===data.arrayBuffers&&(data.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=ni()),void 0===data.arrayBuffers[this.array.buffer._uuid]&&(data.arrayBuffers[this.array.buffer._uuid]=this.array.slice(0).buffer);const t=new this.array.constructor(data.arrayBuffers[this.array.buffer._uuid]),e=new this.constructor(t,this.stride);return e.setUsage(this.usage),e}onUpload(t){return this.onUploadCallback=t,this}toJSON(data){return void 0===data.arrayBuffers&&(data.arrayBuffers={}),void 0===this.array.buffer._uuid&&(this.array.buffer._uuid=ni()),void 0===data.arrayBuffers[this.array.buffer._uuid]&&(data.arrayBuffers[this.array.buffer._uuid]=Array.from(new Uint32Array(this.array.buffer))),{uuid:this.uuid,buffer:this.array.buffer._uuid,type:this.array.constructor.name,stride:this.stride}}}const Ec=new Gi;class Ac{constructor(t,e,n,r=!1){this.isInterleavedBufferAttribute=!0,this.name="",this.data=t,this.itemSize=e,this.offset=n,this.normalized=r}get count(){return this.data.count}get array(){return this.data.array}set needsUpdate(t){this.data.needsUpdate=t}applyMatrix4(t){for(let i=0,e=this.data.count;i<e;i++)Ec.fromBufferAttribute(this,i),Ec.applyMatrix4(t),this.setXYZ(i,Ec.x,Ec.y,Ec.z);return this}applyNormalMatrix(t){for(let i=0,e=this.count;i<e;i++)Ec.fromBufferAttribute(this,i),Ec.applyNormalMatrix(t),this.setXYZ(i,Ec.x,Ec.y,Ec.z);return this}transformDirection(t){for(let i=0,e=this.count;i<e;i++)Ec.fromBufferAttribute(this,i),Ec.transformDirection(t),this.setXYZ(i,Ec.x,Ec.y,Ec.z);return this}getComponent(t,component){let e=this.array[t*this.data.stride+this.offset+component];return this.normalized&&(e=ai(e,this.array)),e}setComponent(t,component,e){return this.normalized&&(e=oi(e,this.array)),this.data.array[t*this.data.stride+this.offset+component]=e,this}setX(t,e){return this.normalized&&(e=oi(e,this.array)),this.data.array[t*this.data.stride+this.offset]=e,this}setY(t,e){return this.normalized&&(e=oi(e,this.array)),this.data.array[t*this.data.stride+this.offset+1]=e,this}setZ(t,e){return this.normalized&&(e=oi(e,this.array)),this.data.array[t*this.data.stride+this.offset+2]=e,this}setW(t,e){return this.normalized&&(e=oi(e,this.array)),this.data.array[t*this.data.stride+this.offset+3]=e,this}getX(t){let e=this.data.array[t*this.data.stride+this.offset];return this.normalized&&(e=ai(e,this.array)),e}getY(t){let e=this.data.array[t*this.data.stride+this.offset+1];return this.normalized&&(e=ai(e,this.array)),e}getZ(t){let e=this.data.array[t*this.data.stride+this.offset+2];return this.normalized&&(e=ai(e,this.array)),e}getW(t){let e=this.data.array[t*this.data.stride+this.offset+3];return this.normalized&&(e=ai(e,this.array)),e}setXY(t,e,n){return t=t*this.data.stride+this.offset,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this}setXYZ(t,e,n,r){return t=t*this.data.stride+this.offset,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array),r=oi(r,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this}setXYZW(t,e,n,r,o){return t=t*this.data.stride+this.offset,this.normalized&&(e=oi(e,this.array),n=oi(n,this.array),r=oi(r,this.array),o=oi(o,this.array)),this.data.array[t+0]=e,this.data.array[t+1]=n,this.data.array[t+2]=r,this.data.array[t+3]=o,this}clone(data){if(void 0===data){console.log("THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let i=0;i<this.count;i++){const e=i*this.data.stride+this.offset;for(let n=0;n<this.itemSize;n++)t.push(this.data.array[e+n])}return new Es(new this.array.constructor(t),this.itemSize,this.normalized)}return void 0===data.interleavedBuffers&&(data.interleavedBuffers={}),void 0===data.interleavedBuffers[this.data.uuid]&&(data.interleavedBuffers[this.data.uuid]=this.data.clone(data)),new Ac(data.interleavedBuffers[this.data.uuid],this.itemSize,this.offset,this.normalized)}toJSON(data){if(void 0===data){console.log("THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.");const t=[];for(let i=0;i<this.count;i++){const e=i*this.data.stride+this.offset;for(let n=0;n<this.itemSize;n++)t.push(this.data.array[e+n])}return{itemSize:this.itemSize,type:this.array.constructor.name,array:t,normalized:this.normalized}}return void 0===data.interleavedBuffers&&(data.interleavedBuffers={}),void 0===data.interleavedBuffers[this.data.uuid]&&(data.interleavedBuffers[this.data.uuid]=this.data.toJSON(data)),{isInterleavedBufferAttribute:!0,itemSize:this.itemSize,data:this.data.uuid,offset:this.offset,normalized:this.normalized}}}class Cc extends _s{static get type(){return"SpriteMaterial"}constructor(t){super(),this.isSpriteMaterial=!0,this.color=new fs(16777215),this.map=null,this.alphaMap=null,this.rotation=0,this.sizeAttenuation=!0,this.transparent=!0,this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.alphaMap=source.alphaMap,this.rotation=source.rotation,this.sizeAttenuation=source.sizeAttenuation,this.fog=source.fog,this}}let Rc;const Pc=new Gi,Ic=new Gi,Lc=new Gi,Uc=new hi,Dc=new hi,Nc=new Mr,Oc=new Gi,Fc=new Gi,Bc=new Gi,zc=new hi,kc=new hi,Vc=new hi;class Hc extends Zr{constructor(t=new Cc){if(super(),this.isSprite=!0,this.type="Sprite",void 0===Rc){Rc=new Gs;const t=new Float32Array([-.5,-.5,0,0,0,.5,-.5,0,1,0,.5,.5,0,1,1,-.5,.5,0,0,1]),e=new wc(t,5);Rc.setIndex([0,1,2,0,2,3]),Rc.setAttribute("position",new Ac(e,3,0,!1)),Rc.setAttribute("uv",new Ac(e,2,3,!1))}this.geometry=Rc,this.material=t,this.center=new hi(.5,.5)}raycast(t,e){null===t.camera&&console.error('THREE.Sprite: "Raycaster.camera" needs to be set in order to raycast against sprites.'),Ic.setFromMatrixScale(this.matrixWorld),Nc.copy(t.camera.matrixWorld),this.modelViewMatrix.multiplyMatrices(t.camera.matrixWorldInverse,this.matrixWorld),Lc.setFromMatrixPosition(this.modelViewMatrix),t.camera.isPerspectiveCamera&&!1===this.material.sizeAttenuation&&Ic.multiplyScalar(-Lc.z);const n=this.material.rotation;let r,o;0!==n&&(o=Math.cos(n),r=Math.sin(n));const l=this.center;Gc(Oc.set(-.5,-.5,0),Lc,l,Ic,r,o),Gc(Fc.set(.5,-.5,0),Lc,l,Ic,r,o),Gc(Bc.set(.5,.5,0),Lc,l,Ic,r,o),zc.set(0,0),kc.set(1,0),Vc.set(1,1);let c=t.ray.intersectTriangle(Oc,Fc,Bc,!1,Pc);if(null===c&&(Gc(Fc.set(-.5,.5,0),Lc,l,Ic,r,o),kc.set(0,1),c=t.ray.intersectTriangle(Oc,Bc,Fc,!1,Pc),null===c))return;const h=t.ray.origin.distanceTo(Pc);h<t.near||h>t.far||e.push({distance:h,point:Pc.clone(),uv:cs.getInterpolation(Pc,Oc,Fc,Bc,zc,kc,Vc,new hi),face:null,object:this})}copy(source,t){return super.copy(source,t),void 0!==source.center&&this.center.copy(source.center),this.material=source.material,this}}function Gc(t,e,n,r,o,l){Uc.subVectors(t,n).addScalar(.5).multiply(r),void 0!==o?(Dc.x=l*Uc.x-o*Uc.y,Dc.y=o*Uc.x+l*Uc.y):Dc.copy(Uc),t.copy(e),t.x+=Dc.x,t.y+=Dc.y,t.applyMatrix4(Nc)}const Wc=new Gi,Xc=new Gi;class jc extends Zr{constructor(){super(),this._currentLevel=0,this.type="LOD",Object.defineProperties(this,{levels:{enumerable:!0,value:[]},isLOD:{value:!0}}),this.autoUpdate=!0}copy(source){super.copy(source,!1);const t=source.levels;for(let i=0,e=t.length;i<e;i++){const e=t[i];this.addLevel(e.object.clone(),e.distance,e.hysteresis)}return this.autoUpdate=source.autoUpdate,this}addLevel(object,t=0,e=0){t=Math.abs(t);const n=this.levels;let r;for(r=0;r<n.length&&!(t<n[r].distance);r++);return n.splice(r,0,{distance:t,hysteresis:e,object:object}),this.add(object),this}removeLevel(t){const e=this.levels;for(let i=0;i<e.length;i++)if(e[i].distance===t){const t=e.splice(i,1);return this.remove(t[0].object),!0}return!1}getCurrentLevel(){return this._currentLevel}getObjectForDistance(t){const e=this.levels;if(e.length>0){let i,n;for(i=1,n=e.length;i<n;i++){let n=e[i].distance;if(e[i].object.visible&&(n-=n*e[i].hysteresis),t<n)break}return e[i-1].object}return null}raycast(t,e){if(this.levels.length>0){Wc.setFromMatrixPosition(this.matrixWorld);const n=t.ray.origin.distanceTo(Wc);this.getObjectForDistance(n).raycast(t,e)}}update(t){const e=this.levels;if(e.length>1){Wc.setFromMatrixPosition(t.matrixWorld),Xc.setFromMatrixPosition(this.matrixWorld);const n=Wc.distanceTo(Xc)/t.zoom;let i,r;for(e[0].object.visible=!0,i=1,r=e.length;i<r;i++){let t=e[i].distance;if(e[i].object.visible&&(t-=t*e[i].hysteresis),!(n>=t))break;e[i-1].object.visible=!1,e[i].object.visible=!0}for(this._currentLevel=i-1;i<r;i++)e[i].object.visible=!1}}toJSON(meta){const data=super.toJSON(meta);!1===this.autoUpdate&&(data.object.autoUpdate=!1),data.object.levels=[];const t=this.levels;for(let i=0,e=t.length;i<e;i++){const e=t[i];data.object.levels.push({object:e.object.uuid,distance:e.distance,hysteresis:e.hysteresis})}return data}}const qc=new Gi,Yc=new Ni,Zc=new Ni,Jc=new Gi,Kc=new Mr,$c=new Gi,Qc=new dr,eh=new Mr,nh=new yr;class ih extends ea{constructor(t,e){super(t,e),this.isSkinnedMesh=!0,this.type="SkinnedMesh",this.bindMode=vt,this.bindMatrix=new Mr,this.bindMatrixInverse=new Mr,this.boundingBox=null,this.boundingSphere=null}computeBoundingBox(){const t=this.geometry;null===this.boundingBox&&(this.boundingBox=new ji),this.boundingBox.makeEmpty();const e=t.getAttribute("position");for(let i=0;i<e.count;i++)this.getVertexPosition(i,$c),this.boundingBox.expandByPoint($c)}computeBoundingSphere(){const t=this.geometry;null===this.boundingSphere&&(this.boundingSphere=new dr),this.boundingSphere.makeEmpty();const e=t.getAttribute("position");for(let i=0;i<e.count;i++)this.getVertexPosition(i,$c),this.boundingSphere.expandByPoint($c)}copy(source,t){return super.copy(source,t),this.bindMode=source.bindMode,this.bindMatrix.copy(source.bindMatrix),this.bindMatrixInverse.copy(source.bindMatrixInverse),this.skeleton=source.skeleton,null!==source.boundingBox&&(this.boundingBox=source.boundingBox.clone()),null!==source.boundingSphere&&(this.boundingSphere=source.boundingSphere.clone()),this}raycast(t,e){const n=this.material,r=this.matrixWorld;void 0!==n&&(null===this.boundingSphere&&this.computeBoundingSphere(),Qc.copy(this.boundingSphere),Qc.applyMatrix4(r),!1!==t.ray.intersectsSphere(Qc)&&(eh.copy(r).invert(),nh.copy(t.ray).applyMatrix4(eh),null!==this.boundingBox&&!1===nh.intersectsBox(this.boundingBox)||this._computeIntersections(t,e,nh)))}getVertexPosition(t,e){return super.getVertexPosition(t,e),this.applyBoneTransform(t,e),e}bind(t,e){this.skeleton=t,void 0===e&&(this.updateMatrixWorld(!0),this.skeleton.calculateInverses(),e=this.matrixWorld),this.bindMatrix.copy(e),this.bindMatrixInverse.copy(e).invert()}pose(){this.skeleton.pose()}normalizeSkinWeights(){const t=new Ni,e=this.geometry.attributes.skinWeight;for(let i=0,n=e.count;i<n;i++){t.fromBufferAttribute(e,i);const n=1/t.manhattanLength();n!==1/0?t.multiplyScalar(n):t.set(1,0,0,0),e.setXYZW(i,t.x,t.y,t.z,t.w)}}updateMatrixWorld(t){super.updateMatrixWorld(t),this.bindMode===vt?this.bindMatrixInverse.copy(this.matrixWorld).invert():this.bindMode===xt?this.bindMatrixInverse.copy(this.bindMatrix).invert():console.warn("THREE.SkinnedMesh: Unrecognized bindMode: "+this.bindMode)}applyBoneTransform(t,e){const n=this.skeleton,r=this.geometry;Yc.fromBufferAttribute(r.attributes.skinIndex,t),Zc.fromBufferAttribute(r.attributes.skinWeight,t),qc.copy(e).applyMatrix4(this.bindMatrix),e.set(0,0,0);for(let i=0;i<4;i++){const t=Zc.getComponent(i);if(0!==t){const r=Yc.getComponent(i);Kc.multiplyMatrices(n.bones[r].matrixWorld,n.boneInverses[r]),e.addScaledVector(Jc.copy(qc).applyMatrix4(Kc),t)}}return e.applyMatrix4(this.bindMatrixInverse)}}class rh extends Zr{constructor(){super(),this.isBone=!0,this.type="Bone"}}class sh extends Di{constructor(data=null,t=1,e=1,n,r,o,l,c,h=Rt,d=Rt,f,m){super(null,o,l,c,h,d,n,r,f,m),this.isDataTexture=!0,this.image={data:data,width:t,height:e},this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}const ah=new Mr,oh=new Mr;class lh{constructor(t=[],e=[]){this.uuid=ni(),this.bones=t.slice(0),this.boneInverses=e,this.boneMatrices=null,this.boneTexture=null,this.init()}init(){const t=this.bones,e=this.boneInverses;if(this.boneMatrices=new Float32Array(16*t.length),0===e.length)this.calculateInverses();else if(t.length!==e.length){console.warn("THREE.Skeleton: Number of inverse bone matrices does not match amount of bones."),this.boneInverses=[];for(let i=0,t=this.bones.length;i<t;i++)this.boneInverses.push(new Mr)}}calculateInverses(){this.boneInverses.length=0;for(let i=0,t=this.bones.length;i<t;i++){const t=new Mr;this.bones[i]&&t.copy(this.bones[i].matrixWorld).invert(),this.boneInverses.push(t)}}pose(){for(let i=0,t=this.bones.length;i<t;i++){const t=this.bones[i];t&&t.matrixWorld.copy(this.boneInverses[i]).invert()}for(let i=0,t=this.bones.length;i<t;i++){const t=this.bones[i];t&&(t.parent&&t.parent.isBone?(t.matrix.copy(t.parent.matrixWorld).invert(),t.matrix.multiply(t.matrixWorld)):t.matrix.copy(t.matrixWorld),t.matrix.decompose(t.position,t.quaternion,t.scale))}}update(){const t=this.bones,e=this.boneInverses,n=this.boneMatrices,r=this.boneTexture;for(let i=0,r=t.length;i<r;i++){const r=t[i]?t[i].matrixWorld:oh;ah.multiplyMatrices(r,e[i]),ah.toArray(n,16*i)}null!==r&&(r.needsUpdate=!0)}clone(){return new lh(this.bones,this.boneInverses)}computeBoneTexture(){let t=Math.sqrt(4*this.bones.length);t=4*Math.ceil(t/4),t=Math.max(t,4);const e=new Float32Array(t*t*4);e.set(this.boneMatrices);const n=new sh(e,t,t,Qt,Xt);return n.needsUpdate=!0,this.boneMatrices=e,this.boneTexture=n,this}getBoneByName(t){for(let i=0,e=this.bones.length;i<e;i++){const e=this.bones[i];if(e.name===t)return e}}dispose(){null!==this.boneTexture&&(this.boneTexture.dispose(),this.boneTexture=null)}fromJSON(t,e){this.uuid=t.uuid;for(let i=0,n=t.bones.length;i<n;i++){const n=t.bones[i];let r=e[n];void 0===r&&(console.warn("THREE.Skeleton: No bone found with UUID:",n),r=new rh),this.bones.push(r),this.boneInverses.push((new Mr).fromArray(t.boneInverses[i]))}return this.init(),this}toJSON(){const data={metadata:{version:4.6,type:"Skeleton",generator:"Skeleton.toJSON"},bones:[],boneInverses:[]};data.uuid=this.uuid;const t=this.bones,e=this.boneInverses;for(let i=0,n=t.length;i<n;i++){const n=t[i];data.bones.push(n.uuid);const r=e[i];data.boneInverses.push(r.toArray())}return data}}class ch extends Es{constructor(t,e,n,r=1){super(t,e,n),this.isInstancedBufferAttribute=!0,this.meshPerAttribute=r}copy(source){return super.copy(source),this.meshPerAttribute=source.meshPerAttribute,this}toJSON(){const data=super.toJSON();return data.meshPerAttribute=this.meshPerAttribute,data.isInstancedBufferAttribute=!0,data}}const hh=new Mr,uh=new Mr,dh=[],ph=new ji,fh=new Mr,mh=new ea,gh=new dr;class _h extends ea{constructor(t,e,n){super(t,e),this.isInstancedMesh=!0,this.instanceMatrix=new ch(new Float32Array(16*n),16),this.instanceColor=null,this.morphTexture=null,this.count=n,this.boundingBox=null,this.boundingSphere=null;for(let i=0;i<n;i++)this.setMatrixAt(i,fh)}computeBoundingBox(){const t=this.geometry,e=this.count;null===this.boundingBox&&(this.boundingBox=new ji),null===t.boundingBox&&t.computeBoundingBox(),this.boundingBox.makeEmpty();for(let i=0;i<e;i++)this.getMatrixAt(i,hh),ph.copy(t.boundingBox).applyMatrix4(hh),this.boundingBox.union(ph)}computeBoundingSphere(){const t=this.geometry,e=this.count;null===this.boundingSphere&&(this.boundingSphere=new dr),null===t.boundingSphere&&t.computeBoundingSphere(),this.boundingSphere.makeEmpty();for(let i=0;i<e;i++)this.getMatrixAt(i,hh),gh.copy(t.boundingSphere).applyMatrix4(hh),this.boundingSphere.union(gh)}copy(source,t){return super.copy(source,t),this.instanceMatrix.copy(source.instanceMatrix),null!==source.morphTexture&&(this.morphTexture=source.morphTexture.clone()),null!==source.instanceColor&&(this.instanceColor=source.instanceColor.clone()),this.count=source.count,null!==source.boundingBox&&(this.boundingBox=source.boundingBox.clone()),null!==source.boundingSphere&&(this.boundingSphere=source.boundingSphere.clone()),this}getColorAt(t,e){e.fromArray(this.instanceColor.array,3*t)}getMatrixAt(t,e){e.fromArray(this.instanceMatrix.array,16*t)}getMorphAt(t,object){const e=object.morphTargetInfluences,n=this.morphTexture.source.data.data,r=t*(e.length+1)+1;for(let i=0;i<e.length;i++)e[i]=n[r+i]}raycast(t,e){const n=this.matrixWorld,r=this.count;if(mh.geometry=this.geometry,mh.material=this.material,void 0!==mh.material&&(null===this.boundingSphere&&this.computeBoundingSphere(),gh.copy(this.boundingSphere),gh.applyMatrix4(n),!1!==t.ray.intersectsSphere(gh)))for(let o=0;o<r;o++){this.getMatrixAt(o,hh),uh.multiplyMatrices(n,hh),mh.matrixWorld=uh,mh.raycast(t,dh);for(let i=0,t=dh.length;i<t;i++){const t=dh[i];t.instanceId=o,t.object=this,e.push(t)}dh.length=0}}setColorAt(t,e){null===this.instanceColor&&(this.instanceColor=new ch(new Float32Array(3*this.instanceMatrix.count).fill(1),3)),e.toArray(this.instanceColor.array,3*t)}setMatrixAt(t,e){e.toArray(this.instanceMatrix.array,16*t)}setMorphAt(t,object){const e=object.morphTargetInfluences,n=e.length+1;null===this.morphTexture&&(this.morphTexture=new sh(new Float32Array(n*this.count),n,this.count,re,Xt));const r=this.morphTexture.source.data.data;let o=0;for(let i=0;i<e.length;i++)o+=e[i];const l=this.geometry.morphTargetsRelative?1:1-o,c=n*t;r[c]=l,r.set(e,c+1)}updateMorphTargets(){}dispose(){return this.dispatchEvent({type:"dispose"}),null!==this.morphTexture&&(this.morphTexture.dispose(),this.morphTexture=null),this}}function vh(a,b){return a-b}function xh(a,b){return a.z-b.z}function yh(a,b){return b.z-a.z}class Mh{constructor(){this.index=0,this.pool=[],this.list=[]}push(t,e,n,r){const o=this.pool,l=this.list;this.index>=o.length&&o.push({start:-1,count:-1,z:-1,index:-1});const c=o[this.index];l.push(c),this.index++,c.start=t,c.count=e,c.z=n,c.index=r}reset(){this.list.length=0,this.index=0}}const Sh=new Mr,bh=new fs(1,1,1),Th=new Ta,wh=new ji,Eh=new dr,Ah=new Gi,Ch=new Gi,Rh=new Gi,Ph=new Mh,Ih=new ea,Lh=[];function Uh(t,e,n=0){const r=e.itemSize;if(t.isInterleavedBufferAttribute||t.array.constructor!==e.array.constructor){const o=t.count;for(let i=0;i<o;i++)for(let o=0;o<r;o++)e.setComponent(i+n,o,t.getComponent(i,o))}else e.array.set(t.array,n*r);e.needsUpdate=!0}function Dh(t,e){if(t.constructor!==e.constructor){const n=Math.min(t.length,e.length);for(let i=0;i<n;i++)e[i]=t[i]}else{const n=Math.min(t.length,e.length);e.set(new t.constructor(t.buffer,0,n))}}class Nh extends ea{get maxInstanceCount(){return this._maxInstanceCount}get instanceCount(){return this._instanceInfo.length-this._availableInstanceIds.length}get unusedVertexCount(){return this._maxVertexCount-this._nextVertexStart}get unusedIndexCount(){return this._maxIndexCount-this._nextIndexStart}constructor(t,e,n=2*e,r){super(new Gs,r),this.isBatchedMesh=!0,this.perObjectFrustumCulled=!0,this.sortObjects=!0,this.boundingBox=null,this.boundingSphere=null,this.customSort=null,this._instanceInfo=[],this._geometryInfo=[],this._availableInstanceIds=[],this._availableGeometryIds=[],this._nextIndexStart=0,this._nextVertexStart=0,this._geometryCount=0,this._visibilityChanged=!0,this._geometryInitialized=!1,this._maxInstanceCount=t,this._maxVertexCount=e,this._maxIndexCount=n,this._multiDrawCounts=new Int32Array(t),this._multiDrawStarts=new Int32Array(t),this._multiDrawCount=0,this._multiDrawInstances=null,this._matricesTexture=null,this._indirectTexture=null,this._colorsTexture=null,this._initMatricesTexture(),this._initIndirectTexture()}_initMatricesTexture(){let t=Math.sqrt(4*this._maxInstanceCount);t=4*Math.ceil(t/4),t=Math.max(t,4);const e=new Float32Array(t*t*4),n=new sh(e,t,t,Qt,Xt);this._matricesTexture=n}_initIndirectTexture(){let t=Math.sqrt(this._maxInstanceCount);t=Math.ceil(t);const e=new Uint32Array(t*t),n=new sh(e,t,t,se,Wt);this._indirectTexture=n}_initColorsTexture(){let t=Math.sqrt(this._maxInstanceCount);t=Math.ceil(t);const e=new Float32Array(t*t*4).fill(1),n=new sh(e,t,t,Qt,Xt);n.colorSpace=yi.workingColorSpace,this._colorsTexture=n}_initializeGeometry(t){const e=this.geometry,n=this._maxVertexCount,r=this._maxIndexCount;if(!1===this._geometryInitialized){for(const r in t.attributes){const o=t.getAttribute(r),{array:l,itemSize:c,normalized:h}=o,d=new l.constructor(n*c),f=new Es(d,c,h);e.setAttribute(r,f)}if(null!==t.getIndex()){const t=n>65535?new Uint32Array(r):new Uint16Array(r);e.setIndex(new Es(t,1))}this._geometryInitialized=!0}}_validateGeometry(t){const e=this.geometry;if(Boolean(t.getIndex())!==Boolean(e.getIndex()))throw new Error('BatchedMesh: All geometries must consistently have "index".');for(const n in e.attributes){if(!t.hasAttribute(n))throw new Error(`BatchedMesh: Added geometry missing "${n}". All geometries must have consistent attributes.`);const r=t.getAttribute(n),o=e.getAttribute(n);if(r.itemSize!==o.itemSize||r.normalized!==o.normalized)throw new Error("BatchedMesh: All attributes must have a consistent itemSize and normalized value.")}}setCustomSort(t){return this.customSort=t,this}computeBoundingBox(){null===this.boundingBox&&(this.boundingBox=new ji);const t=this.boundingBox,e=this._instanceInfo;t.makeEmpty();for(let i=0,n=e.length;i<n;i++){if(!1===e[i].active)continue;const n=e[i].geometryIndex;this.getMatrixAt(i,Sh),this.getBoundingBoxAt(n,wh).applyMatrix4(Sh),t.union(wh)}}computeBoundingSphere(){null===this.boundingSphere&&(this.boundingSphere=new dr);const t=this.boundingSphere,e=this._instanceInfo;t.makeEmpty();for(let i=0,n=e.length;i<n;i++){if(!1===e[i].active)continue;const n=e[i].geometryIndex;this.getMatrixAt(i,Sh),this.getBoundingSphereAt(n,Eh).applyMatrix4(Sh),t.union(Eh)}}addInstance(t){if(this._instanceInfo.length>=this.maxInstanceCount&&0===this._availableInstanceIds.length)throw new Error("BatchedMesh: Maximum item count reached.");const e={visible:!0,active:!0,geometryIndex:t};let n=null;this._availableInstanceIds.length>0?(this._availableInstanceIds.sort(vh),n=this._availableInstanceIds.shift(),this._instanceInfo[n]=e):(n=this._instanceInfo.length,this._instanceInfo.push(e));const r=this._matricesTexture;Sh.identity().toArray(r.image.data,16*n),r.needsUpdate=!0;const o=this._colorsTexture;return o&&(bh.toArray(o.image.data,4*n),o.needsUpdate=!0),this._visibilityChanged=!0,n}addGeometry(t,e=-1,n=-1){this._initializeGeometry(t),this._validateGeometry(t);const r={vertexStart:-1,vertexCount:-1,reservedVertexCount:-1,indexStart:-1,indexCount:-1,reservedIndexCount:-1,start:-1,count:-1,boundingBox:null,boundingSphere:null,active:!0},o=this._geometryInfo;r.vertexStart=this._nextVertexStart,r.reservedVertexCount=-1===e?t.getAttribute("position").count:e;const l=t.getIndex();if(null!==l&&(r.indexStart=this._nextIndexStart,r.reservedIndexCount=-1===n?l.count:n),-1!==r.indexStart&&r.indexStart+r.reservedIndexCount>this._maxIndexCount||r.vertexStart+r.reservedVertexCount>this._maxVertexCount)throw new Error("BatchedMesh: Reserved space request exceeds the maximum buffer size.");let c;return this._availableGeometryIds.length>0?(this._availableGeometryIds.sort(vh),c=this._availableGeometryIds.shift(),o[c]=r):(c=this._geometryCount,this._geometryCount++,o.push(r)),this.setGeometryAt(c,t),this._nextIndexStart=r.indexStart+r.reservedIndexCount,this._nextVertexStart=r.vertexStart+r.reservedVertexCount,c}setGeometryAt(t,e){if(t>=this._geometryCount)throw new Error("BatchedMesh: Maximum geometry count reached.");this._validateGeometry(e);const n=this.geometry,r=null!==n.getIndex(),o=n.getIndex(),l=e.getIndex(),c=this._geometryInfo[t];if(r&&l.count>c.reservedIndexCount||e.attributes.position.count>c.reservedVertexCount)throw new Error("BatchedMesh: Reserved space not large enough for provided geometry.");const h=c.vertexStart,d=c.reservedVertexCount;c.vertexCount=e.getAttribute("position").count;for(const t in n.attributes){const r=e.getAttribute(t),o=n.getAttribute(t);Uh(r,o,h);const l=r.itemSize;for(let i=r.count,t=d;i<t;i++){const t=h+i;for(let e=0;e<l;e++)o.setComponent(t,e,0)}o.needsUpdate=!0,o.addUpdateRange(h*l,d*l)}if(r){const t=c.indexStart,n=c.reservedIndexCount;c.indexCount=e.getIndex().count;for(let i=0;i<l.count;i++)o.setX(t+i,h+l.getX(i));for(let i=l.count,e=n;i<e;i++)o.setX(t+i,h);o.needsUpdate=!0,o.addUpdateRange(t,c.reservedIndexCount)}return c.start=r?c.indexStart:c.vertexStart,c.count=r?c.indexCount:c.vertexCount,c.boundingBox=null,null!==e.boundingBox&&(c.boundingBox=e.boundingBox.clone()),c.boundingSphere=null,null!==e.boundingSphere&&(c.boundingSphere=e.boundingSphere.clone()),this._visibilityChanged=!0,t}deleteGeometry(t){const e=this._geometryInfo;if(t>=e.length||!1===e[t].active)return this;const n=this._instanceInfo;for(let i=0,e=n.length;i<e;i++)n[i].geometryIndex===t&&this.deleteInstance(i);return e[t].active=!1,this._availableGeometryIds.push(t),this._visibilityChanged=!0,this}deleteInstance(t){const e=this._instanceInfo;return t>=e.length||!1===e[t].active||(e[t].active=!1,this._availableInstanceIds.push(t),this._visibilityChanged=!0),this}optimize(){let t=0,e=0;const n=this._geometryInfo,r=n.map(((t,i)=>i)).sort(((a,b)=>n[a].vertexStart-n[b].vertexStart)),o=this.geometry;for(let i=0,l=n.length;i<l;i++){const l=r[i],c=n[l];if(!1!==c.active){if(null!==o.index){if(c.indexStart!==e){const{indexStart:n,vertexStart:r,reservedIndexCount:l}=c,h=o.index,d=h.array,f=t-r;for(let t=n;t<n+l;t++)d[t]=d[t]+f;h.array.copyWithin(e,n,n+l),h.addUpdateRange(e,l),c.indexStart=e}e+=c.reservedIndexCount}if(c.vertexStart!==t){const{vertexStart:e,reservedVertexCount:n}=c,r=o.attributes;for(const o in r){const l=r[o],{array:c,itemSize:h}=l;c.copyWithin(t*h,e*h,(e+n)*h),l.addUpdateRange(t*h,n*h)}c.vertexStart=t}t+=c.reservedVertexCount,c.start=o.index?c.indexStart:c.vertexStart,this._nextIndexStart=o.index?c.indexStart+c.reservedIndexCount:0,this._nextVertexStart=c.vertexStart+c.reservedVertexCount}}return this}getBoundingBoxAt(t,e){if(t>=this._geometryCount)return null;const n=this.geometry,r=this._geometryInfo[t];if(null===r.boundingBox){const t=new ji,e=n.index,o=n.attributes.position;for(let i=r.start,n=r.start+r.count;i<n;i++){let n=i;e&&(n=e.getX(n)),t.expandByPoint(Ah.fromBufferAttribute(o,n))}r.boundingBox=t}return e.copy(r.boundingBox),e}getBoundingSphereAt(t,e){if(t>=this._geometryCount)return null;const n=this.geometry,r=this._geometryInfo[t];if(null===r.boundingSphere){const e=new dr;this.getBoundingBoxAt(t,wh),wh.getCenter(e.center);const o=n.index,l=n.attributes.position;let c=0;for(let i=r.start,t=r.start+r.count;i<t;i++){let t=i;o&&(t=o.getX(t)),Ah.fromBufferAttribute(l,t),c=Math.max(c,e.center.distanceToSquared(Ah))}e.radius=Math.sqrt(c),r.boundingSphere=e}return e.copy(r.boundingSphere),e}setMatrixAt(t,e){const n=this._instanceInfo,r=this._matricesTexture,o=this._matricesTexture.image.data;return t>=n.length||!1===n[t].active||(e.toArray(o,16*t),r.needsUpdate=!0),this}getMatrixAt(t,e){const n=this._instanceInfo,r=this._matricesTexture.image.data;return t>=n.length||!1===n[t].active?null:e.fromArray(r,16*t)}setColorAt(t,e){null===this._colorsTexture&&this._initColorsTexture();const n=this._colorsTexture,r=this._colorsTexture.image.data,o=this._instanceInfo;return t>=o.length||!1===o[t].active||(e.toArray(r,4*t),n.needsUpdate=!0),this}getColorAt(t,e){const n=this._colorsTexture.image.data,r=this._instanceInfo;return t>=r.length||!1===r[t].active?null:e.fromArray(n,4*t)}setVisibleAt(t,e){const n=this._instanceInfo;return t>=n.length||!1===n[t].active||n[t].visible===e||(n[t].visible=e,this._visibilityChanged=!0),this}getVisibleAt(t){const e=this._instanceInfo;return!(t>=e.length||!1===e[t].active)&&e[t].visible}setGeometryIdAt(t,e){const n=this._instanceInfo,r=this._geometryInfo;return t>=n.length||!1===n[t].active||e>=r.length||!1===r[e].active?null:(n[t].geometryIndex=e,this)}getGeometryIdAt(t){const e=this._instanceInfo;return t>=e.length||!1===e[t].active?-1:e[t].geometryIndex}getGeometryRangeAt(t,e={}){if(t<0||t>=this._geometryCount)return null;const n=this._geometryInfo[t];return e.vertexStart=n.vertexStart,e.vertexCount=n.vertexCount,e.reservedVertexCount=n.reservedVertexCount,e.indexStart=n.indexStart,e.indexCount=n.indexCount,e.reservedIndexCount=n.reservedIndexCount,e.start=n.start,e.count=n.count,e}setInstanceCount(t){const e=this._availableInstanceIds,n=this._instanceInfo;for(e.sort(vh);e[e.length-1]===n.length;)n.pop(),e.pop();if(t<n.length)throw new Error(`BatchedMesh: Instance ids outside the range ${t} are being used. Cannot shrink instance count.`);const r=new Int32Array(t),o=new Int32Array(t);Dh(this._multiDrawCounts,r),Dh(this._multiDrawStarts,o),this._multiDrawCounts=r,this._multiDrawStarts=o,this._maxInstanceCount=t;const l=this._indirectTexture,c=this._matricesTexture,h=this._colorsTexture;l.dispose(),this._initIndirectTexture(),Dh(l.image.data,this._indirectTexture.image.data),c.dispose(),this._initMatricesTexture(),Dh(c.image.data,this._matricesTexture.image.data),h&&(h.dispose(),this._initColorsTexture(),Dh(h.image.data,this._colorsTexture.image.data))}setGeometrySize(t,e){const n=[...this._geometryInfo].filter((t=>t.active));if(Math.max(...n.map((t=>t.vertexStart+t.reservedVertexCount)))>t)throw new Error(`BatchedMesh: Geometry vertex values are being used outside the range ${e}. Cannot shrink further.`);if(this.geometry.index){if(Math.max(...n.map((t=>t.indexStart+t.reservedIndexCount)))>e)throw new Error(`BatchedMesh: Geometry index values are being used outside the range ${e}. Cannot shrink further.`)}const r=this.geometry;r.dispose(),this._maxVertexCount=t,this._maxIndexCount=e,this._geometryInitialized&&(this._geometryInitialized=!1,this.geometry=new Gs,this._initializeGeometry(r));const o=this.geometry;r.index&&Dh(r.index.array,o.index.array);for(const t in r.attributes)Dh(r.attributes[t].array,o.attributes[t].array)}raycast(t,e){const n=this._instanceInfo,r=this._geometryInfo,o=this.matrixWorld,l=this.geometry;Ih.material=this.material,Ih.geometry.index=l.index,Ih.geometry.attributes=l.attributes,null===Ih.geometry.boundingBox&&(Ih.geometry.boundingBox=new ji),null===Ih.geometry.boundingSphere&&(Ih.geometry.boundingSphere=new dr);for(let i=0,l=n.length;i<l;i++){if(!n[i].visible||!n[i].active)continue;const l=n[i].geometryIndex,c=r[l];Ih.geometry.setDrawRange(c.start,c.count),this.getMatrixAt(i,Ih.matrixWorld).premultiply(o),this.getBoundingBoxAt(l,Ih.geometry.boundingBox),this.getBoundingSphereAt(l,Ih.geometry.boundingSphere),Ih.raycast(t,Lh);for(let t=0,n=Lh.length;t<n;t++){const n=Lh[t];n.object=this,n.batchId=i,e.push(n)}Lh.length=0}Ih.material=null,Ih.geometry.index=null,Ih.geometry.attributes={},Ih.geometry.setDrawRange(0,1/0)}copy(source){return super.copy(source),this.geometry=source.geometry.clone(),this.perObjectFrustumCulled=source.perObjectFrustumCulled,this.sortObjects=source.sortObjects,this.boundingBox=null!==source.boundingBox?source.boundingBox.clone():null,this.boundingSphere=null!==source.boundingSphere?source.boundingSphere.clone():null,this._geometryInfo=source._geometryInfo.map((t=>({...t,boundingBox:null!==t.boundingBox?t.boundingBox.clone():null,boundingSphere:null!==t.boundingSphere?t.boundingSphere.clone():null}))),this._instanceInfo=source._instanceInfo.map((t=>({...t}))),this._maxInstanceCount=source._maxInstanceCount,this._maxVertexCount=source._maxVertexCount,this._maxIndexCount=source._maxIndexCount,this._geometryInitialized=source._geometryInitialized,this._geometryCount=source._geometryCount,this._multiDrawCounts=source._multiDrawCounts.slice(),this._multiDrawStarts=source._multiDrawStarts.slice(),this._matricesTexture=source._matricesTexture.clone(),this._matricesTexture.image.data=this._matricesTexture.image.data.slice(),null!==this._colorsTexture&&(this._colorsTexture=source._colorsTexture.clone(),this._colorsTexture.image.data=this._colorsTexture.image.data.slice()),this}dispose(){return this.geometry.dispose(),this._matricesTexture.dispose(),this._matricesTexture=null,this._indirectTexture.dispose(),this._indirectTexture=null,null!==this._colorsTexture&&(this._colorsTexture.dispose(),this._colorsTexture=null),this}onBeforeRender(t,e,n,r,o){if(!this._visibilityChanged&&!this.perObjectFrustumCulled&&!this.sortObjects)return;const l=r.getIndex(),c=null===l?1:l.array.BYTES_PER_ELEMENT,h=this._instanceInfo,d=this._multiDrawStarts,f=this._multiDrawCounts,m=this._geometryInfo,_=this.perObjectFrustumCulled,v=this._indirectTexture,x=v.image.data;_&&(Sh.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse).multiply(this.matrixWorld),Th.setFromProjectionMatrix(Sh,t.coordinateSystem));let y=0;if(this.sortObjects){Sh.copy(this.matrixWorld).invert(),Ah.setFromMatrixPosition(n.matrixWorld).applyMatrix4(Sh),Ch.set(0,0,-1).transformDirection(n.matrixWorld).transformDirection(Sh);for(let i=0,t=h.length;i<t;i++)if(h[i].visible&&h[i].active){const t=h[i].geometryIndex;this.getMatrixAt(i,Sh),this.getBoundingSphereAt(t,Eh).applyMatrix4(Sh);let e=!1;if(_&&(e=!Th.intersectsSphere(Eh)),!e){const e=m[t],n=Rh.subVectors(Eh.center,Ah).dot(Ch);Ph.push(e.start,e.count,n,i)}}const t=Ph.list,e=this.customSort;null===e?t.sort(o.transparent?yh:xh):e.call(this,t,n);for(let i=0,e=t.length;i<e;i++){const e=t[i];d[y]=e.start*c,f[y]=e.count,x[y]=e.index,y++}Ph.reset()}else for(let i=0,t=h.length;i<t;i++)if(h[i].visible&&h[i].active){const t=h[i].geometryIndex;let e=!1;if(_&&(this.getMatrixAt(i,Sh),this.getBoundingSphereAt(t,Eh).applyMatrix4(Sh),e=!Th.intersectsSphere(Eh)),!e){const e=m[t];d[y]=e.start*c,f[y]=e.count,x[y]=i,y++}}v.needsUpdate=!0,this._multiDrawCount=y,this._visibilityChanged=!1}onBeforeShadow(t,object,e,n,r,o){this.onBeforeRender(t,null,n,r,o)}}class Oh extends _s{static get type(){return"LineBasicMaterial"}constructor(t){super(),this.isLineBasicMaterial=!0,this.color=new fs(16777215),this.map=null,this.linewidth=1,this.linecap="round",this.linejoin="round",this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.linewidth=source.linewidth,this.linecap=source.linecap,this.linejoin=source.linejoin,this.fog=source.fog,this}}const Fh=new Gi,Bh=new Gi,zh=new Mr,kh=new yr,Vh=new dr,Hh=new Gi,Gh=new Gi;class Wh extends Zr{constructor(t=new Gs,e=new Oh){super(),this.isLine=!0,this.type="Line",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(source,t){return super.copy(source,t),this.material=Array.isArray(source.material)?source.material.slice():source.material,this.geometry=source.geometry,this}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,n=[0];for(let i=1,t=e.count;i<t;i++)Fh.fromBufferAttribute(e,i-1),Bh.fromBufferAttribute(e,i),n[i]=n[i-1],n[i]+=Fh.distanceTo(Bh);t.setAttribute("lineDistance",new Ns(n,1))}else console.warn("THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}raycast(t,e){const n=this.geometry,r=this.matrixWorld,o=t.params.Line.threshold,l=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Vh.copy(n.boundingSphere),Vh.applyMatrix4(r),Vh.radius+=o,!1===t.ray.intersectsSphere(Vh))return;zh.copy(r).invert(),kh.copy(t.ray).applyMatrix4(zh);const c=o/((this.scale.x+this.scale.y+this.scale.z)/3),h=c*c,d=this.isLineSegments?2:1,f=n.index,m=n.attributes.position;if(null!==f){const n=Math.max(0,l.start),r=Math.min(f.count,l.start+l.count);for(let i=n,o=r-1;i<o;i+=d){const a=f.getX(i),b=f.getX(i+1),n=Xh(this,t,kh,h,a,b);n&&e.push(n)}if(this.isLineLoop){const a=f.getX(r-1),b=f.getX(n),o=Xh(this,t,kh,h,a,b);o&&e.push(o)}}else{const n=Math.max(0,l.start),r=Math.min(m.count,l.start+l.count);for(let i=n,o=r-1;i<o;i+=d){const n=Xh(this,t,kh,h,i,i+1);n&&e.push(n)}if(this.isLineLoop){const o=Xh(this,t,kh,h,r-1,n);o&&e.push(o)}}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}function Xh(object,t,e,n,a,b){const r=object.geometry.attributes.position;Fh.fromBufferAttribute(r,a),Bh.fromBufferAttribute(r,b);if(e.distanceSqToSegment(Fh,Bh,Hh,Gh)>n)return;Hh.applyMatrix4(object.matrixWorld);const o=t.ray.origin.distanceTo(Hh);return o<t.near||o>t.far?void 0:{distance:o,point:Gh.clone().applyMatrix4(object.matrixWorld),index:a,face:null,faceIndex:null,barycoord:null,object:object}}const jh=new Gi,qh=new Gi;class Yh extends Wh{constructor(t,e){super(t,e),this.isLineSegments=!0,this.type="LineSegments"}computeLineDistances(){const t=this.geometry;if(null===t.index){const e=t.attributes.position,n=[];for(let i=0,t=e.count;i<t;i+=2)jh.fromBufferAttribute(e,i),qh.fromBufferAttribute(e,i+1),n[i]=0===i?0:n[i-1],n[i+1]=n[i]+jh.distanceTo(qh);t.setAttribute("lineDistance",new Ns(n,1))}else console.warn("THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.");return this}}class Zh extends Wh{constructor(t,e){super(t,e),this.isLineLoop=!0,this.type="LineLoop"}}class Jh extends _s{static get type(){return"PointsMaterial"}constructor(t){super(),this.isPointsMaterial=!0,this.color=new fs(16777215),this.map=null,this.alphaMap=null,this.size=1,this.sizeAttenuation=!0,this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.alphaMap=source.alphaMap,this.size=source.size,this.sizeAttenuation=source.sizeAttenuation,this.fog=source.fog,this}}const Kh=new Mr,$h=new yr,Qh=new dr,tu=new Gi;class eu extends Zr{constructor(t=new Gs,e=new Jh){super(),this.isPoints=!0,this.type="Points",this.geometry=t,this.material=e,this.updateMorphTargets()}copy(source,t){return super.copy(source,t),this.material=Array.isArray(source.material)?source.material.slice():source.material,this.geometry=source.geometry,this}raycast(t,e){const n=this.geometry,r=this.matrixWorld,o=t.params.Points.threshold,l=n.drawRange;if(null===n.boundingSphere&&n.computeBoundingSphere(),Qh.copy(n.boundingSphere),Qh.applyMatrix4(r),Qh.radius+=o,!1===t.ray.intersectsSphere(Qh))return;Kh.copy(r).invert(),$h.copy(t.ray).applyMatrix4(Kh);const c=o/((this.scale.x+this.scale.y+this.scale.z)/3),h=c*c,d=n.index,f=n.attributes.position;if(null!==d){for(let i=Math.max(0,l.start),n=Math.min(d.count,l.start+l.count);i<n;i++){const a=d.getX(i);tu.fromBufferAttribute(f,a),nu(tu,a,h,r,t,e,this)}}else{for(let i=Math.max(0,l.start),n=Math.min(f.count,l.start+l.count);i<n;i++)tu.fromBufferAttribute(f,i),nu(tu,i,h,r,t,e,this)}}updateMorphTargets(){const t=this.geometry.morphAttributes,e=Object.keys(t);if(e.length>0){const n=t[e[0]];if(void 0!==n){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let t=0,e=n.length;t<e;t++){const e=n[t].name||String(t);this.morphTargetInfluences.push(0),this.morphTargetDictionary[e]=t}}}}}function nu(t,e,n,r,o,l,object){const c=$h.distanceSqToPoint(t);if(c<n){const n=new Gi;$h.closestPointToPoint(t,n),n.applyMatrix4(r);const h=o.ray.origin.distanceTo(n);if(h<o.near||h>o.far)return;l.push({distance:h,distanceToRay:Math.sqrt(c),point:n,index:e,face:null,faceIndex:null,barycoord:null,object:object})}}class iu extends Di{constructor(video,t,e,n,r,o,l,c,h){super(video,t,e,n,r,o,l,c,h),this.isVideoTexture=!0,this.minFilter=void 0!==o?o:Dt,this.magFilter=void 0!==r?r:Dt,this.generateMipmaps=!1;const d=this;"requestVideoFrameCallback"in video&&video.requestVideoFrameCallback((function t(){d.needsUpdate=!0,video.requestVideoFrameCallback(t)}))}clone(){return new this.constructor(this.image).copy(this)}update(){const video=this.image;!1==="requestVideoFrameCallback"in video&&video.readyState>=video.HAVE_CURRENT_DATA&&(this.needsUpdate=!0)}}class ru extends Di{constructor(t,e){super({width:t,height:e}),this.isFramebufferTexture=!0,this.magFilter=Rt,this.minFilter=Rt,this.generateMipmaps=!1,this.needsUpdate=!0}}class su extends Di{constructor(t,e,n,r,o,l,c,h,d,f,m,_){super(null,l,c,h,d,f,r,o,m,_),this.isCompressedTexture=!0,this.image={width:e,height:n},this.mipmaps=t,this.flipY=!1,this.generateMipmaps=!1}}class au extends su{constructor(t,e,n,r,o,l){super(t,e,n,o,l),this.isCompressedArrayTexture=!0,this.image.depth=r,this.wrapR=At,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class ou extends su{constructor(t,e,n){super(void 0,t[0].width,t[0].height,e,n,Mt),this.isCompressedCubeTexture=!0,this.isCubeTexture=!0,this.image=t}}class lu extends Di{constructor(canvas,t,e,n,r,o,l,c,h){super(canvas,t,e,n,r,o,l,c,h),this.isCanvasTexture=!0,this.needsUpdate=!0}}class cu{constructor(){this.type="Curve",this.arcLengthDivisions=200}getPoint(){return console.warn("THREE.Curve: .getPoint() not implemented."),null}getPointAt(u,t){const e=this.getUtoTmapping(u);return this.getPoint(e,t)}getPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPoint(n/t));return e}getSpacedPoints(t=5){const e=[];for(let n=0;n<=t;n++)e.push(this.getPointAt(n/t));return e}getLength(){const t=this.getLengths();return t[t.length-1]}getLengths(t=this.arcLengthDivisions){if(this.cacheArcLengths&&this.cacheArcLengths.length===t+1&&!this.needsUpdate)return this.cacheArcLengths;this.needsUpdate=!1;const e=[];let n,r=this.getPoint(0),o=0;e.push(0);for(let p=1;p<=t;p++)n=this.getPoint(p/t),o+=n.distanceTo(r),e.push(o),r=n;return this.cacheArcLengths=e,e}updateArcLengths(){this.needsUpdate=!0,this.getLengths()}getUtoTmapping(u,t){const e=this.getLengths();let i=0;const n=e.length;let r;r=t||u*e[n-1];let o,l=0,c=n-1;for(;l<=c;)if(i=Math.floor(l+(c-l)/2),o=e[i]-r,o<0)l=i+1;else{if(!(o>0)){c=i;break}c=i-1}if(i=c,e[i]===r)return i/(n-1);const h=e[i];return(i+(r-h)/(e[i+1]-h))/(n-1)}getTangent(t,e){const n=1e-4;let r=t-n,o=t+n;r<0&&(r=0),o>1&&(o=1);const l=this.getPoint(r),c=this.getPoint(o),h=e||(l.isVector2?new hi:new Gi);return h.copy(c).sub(l).normalize(),h}getTangentAt(u,t){const e=this.getUtoTmapping(u);return this.getTangent(e,t)}computeFrenetFrames(t,e){const n=new Gi,r=[],o=[],l=[],c=new Gi,h=new Mr;for(let i=0;i<=t;i++){const u=i/t;r[i]=this.getTangentAt(u,new Gi)}o[0]=new Gi,l[0]=new Gi;let d=Number.MAX_VALUE;const f=Math.abs(r[0].x),m=Math.abs(r[0].y),_=Math.abs(r[0].z);f<=d&&(d=f,n.set(1,0,0)),m<=d&&(d=m,n.set(0,1,0)),_<=d&&n.set(0,0,1),c.crossVectors(r[0],n).normalize(),o[0].crossVectors(r[0],c),l[0].crossVectors(r[0],o[0]);for(let i=1;i<=t;i++){if(o[i]=o[i-1].clone(),l[i]=l[i-1].clone(),c.crossVectors(r[i-1],r[i]),c.length()>Number.EPSILON){c.normalize();const t=Math.acos(ii(r[i-1].dot(r[i]),-1,1));o[i].applyMatrix4(h.makeRotationAxis(c,t))}l[i].crossVectors(r[i],o[i])}if(!0===e){let e=Math.acos(ii(o[0].dot(o[t]),-1,1));e/=t,r[0].dot(c.crossVectors(o[0],o[t]))>0&&(e=-e);for(let i=1;i<=t;i++)o[i].applyMatrix4(h.makeRotationAxis(r[i],e*i)),l[i].crossVectors(r[i],o[i])}return{tangents:r,normals:o,binormals:l}}clone(){return(new this.constructor).copy(this)}copy(source){return this.arcLengthDivisions=source.arcLengthDivisions,this}toJSON(){const data={metadata:{version:4.6,type:"Curve",generator:"Curve.toJSON"}};return data.arcLengthDivisions=this.arcLengthDivisions,data.type=this.type,data}fromJSON(t){return this.arcLengthDivisions=t.arcLengthDivisions,this}}class hu extends cu{constructor(t=0,e=0,n=1,r=1,o=0,l=2*Math.PI,c=!1,h=0){super(),this.isEllipseCurve=!0,this.type="EllipseCurve",this.aX=t,this.aY=e,this.xRadius=n,this.yRadius=r,this.aStartAngle=o,this.aEndAngle=l,this.aClockwise=c,this.aRotation=h}getPoint(t,e=new hi){const n=e,r=2*Math.PI;let o=this.aEndAngle-this.aStartAngle;const l=Math.abs(o)<Number.EPSILON;for(;o<0;)o+=r;for(;o>r;)o-=r;o<Number.EPSILON&&(o=l?0:r),!0!==this.aClockwise||l||(o===r?o=-r:o-=r);const c=this.aStartAngle+t*o;let h=this.aX+this.xRadius*Math.cos(c),d=this.aY+this.yRadius*Math.sin(c);if(0!==this.aRotation){const t=Math.cos(this.aRotation),e=Math.sin(this.aRotation),n=h-this.aX,r=d-this.aY;h=n*t-r*e+this.aX,d=n*e+r*t+this.aY}return n.set(h,d)}copy(source){return super.copy(source),this.aX=source.aX,this.aY=source.aY,this.xRadius=source.xRadius,this.yRadius=source.yRadius,this.aStartAngle=source.aStartAngle,this.aEndAngle=source.aEndAngle,this.aClockwise=source.aClockwise,this.aRotation=source.aRotation,this}toJSON(){const data=super.toJSON();return data.aX=this.aX,data.aY=this.aY,data.xRadius=this.xRadius,data.yRadius=this.yRadius,data.aStartAngle=this.aStartAngle,data.aEndAngle=this.aEndAngle,data.aClockwise=this.aClockwise,data.aRotation=this.aRotation,data}fromJSON(t){return super.fromJSON(t),this.aX=t.aX,this.aY=t.aY,this.xRadius=t.xRadius,this.yRadius=t.yRadius,this.aStartAngle=t.aStartAngle,this.aEndAngle=t.aEndAngle,this.aClockwise=t.aClockwise,this.aRotation=t.aRotation,this}}class uu extends hu{constructor(t,e,n,r,o,l){super(t,e,n,n,r,o,l),this.isArcCurve=!0,this.type="ArcCurve"}}function du(){let t=0,e=0,n=0,r=0;function o(o,l,c,h){t=o,e=c,n=-3*o+3*l-2*c-h,r=2*o-2*l+c+h}return{initCatmullRom:function(t,e,n,r,l){o(e,n,l*(n-t),l*(r-e))},initNonuniformCatmullRom:function(t,e,n,r,l,c,h){let d=(e-t)/l-(n-t)/(l+c)+(n-e)/c,f=(n-e)/c-(r-e)/(c+h)+(r-n)/h;d*=c,f*=c,o(e,n,d,f)},calc:function(o){const l=o*o;return t+e*o+n*l+r*(l*o)}}}const pu=new Gi,fu=new du,mu=new du,gu=new du;class _u extends cu{constructor(t=[],e=!1,n="centripetal",r=.5){super(),this.isCatmullRomCurve3=!0,this.type="CatmullRomCurve3",this.points=t,this.closed=e,this.curveType=n,this.tension=r}getPoint(t,e=new Gi){const n=e,r=this.points,o=r.length,p=(o-(this.closed?0:1))*t;let l,c,h=Math.floor(p),d=p-h;this.closed?h+=h>0?0:(Math.floor(Math.abs(h)/o)+1)*o:0===d&&h===o-1&&(h=o-2,d=1),this.closed||h>0?l=r[(h-1)%o]:(pu.subVectors(r[0],r[1]).add(r[0]),l=pu);const f=r[h%o],m=r[(h+1)%o];if(this.closed||h+2<o?c=r[(h+2)%o]:(pu.subVectors(r[o-1],r[o-2]).add(r[o-1]),c=pu),"centripetal"===this.curveType||"chordal"===this.curveType){const t="chordal"===this.curveType?.5:.25;let e=Math.pow(l.distanceToSquared(f),t),n=Math.pow(f.distanceToSquared(m),t),r=Math.pow(m.distanceToSquared(c),t);n<1e-4&&(n=1),e<1e-4&&(e=n),r<1e-4&&(r=n),fu.initNonuniformCatmullRom(l.x,f.x,m.x,c.x,e,n,r),mu.initNonuniformCatmullRom(l.y,f.y,m.y,c.y,e,n,r),gu.initNonuniformCatmullRom(l.z,f.z,m.z,c.z,e,n,r)}else"catmullrom"===this.curveType&&(fu.initCatmullRom(l.x,f.x,m.x,c.x,this.tension),mu.initCatmullRom(l.y,f.y,m.y,c.y,this.tension),gu.initCatmullRom(l.z,f.z,m.z,c.z,this.tension));return n.set(fu.calc(d),mu.calc(d),gu.calc(d)),n}copy(source){super.copy(source),this.points=[];for(let i=0,t=source.points.length;i<t;i++){const t=source.points[i];this.points.push(t.clone())}return this.closed=source.closed,this.curveType=source.curveType,this.tension=source.tension,this}toJSON(){const data=super.toJSON();data.points=[];for(let i=0,t=this.points.length;i<t;i++){const t=this.points[i];data.points.push(t.toArray())}return data.closed=this.closed,data.curveType=this.curveType,data.tension=this.tension,data}fromJSON(t){super.fromJSON(t),this.points=[];for(let i=0,e=t.points.length;i<e;i++){const e=t.points[i];this.points.push((new Gi).fromArray(e))}return this.closed=t.closed,this.curveType=t.curveType,this.tension=t.tension,this}}function vu(t,e,n,r,o){const l=.5*(r-e),c=.5*(o-n),h=t*t;return(2*n-2*r+l+c)*(t*h)+(-3*n+3*r-2*l-c)*h+l*t+n}function xu(t,e,n,r){return function(t,p){const e=1-t;return e*e*p}(t,e)+function(t,p){return 2*(1-t)*t*p}(t,n)+function(t,p){return t*t*p}(t,r)}function yu(t,e,n,r,o){return function(t,p){const e=1-t;return e*e*e*p}(t,e)+function(t,p){const e=1-t;return 3*e*e*t*p}(t,n)+function(t,p){return 3*(1-t)*t*t*p}(t,r)+function(t,p){return t*t*t*p}(t,o)}class Mu extends cu{constructor(t=new hi,e=new hi,n=new hi,r=new hi){super(),this.isCubicBezierCurve=!0,this.type="CubicBezierCurve",this.v0=t,this.v1=e,this.v2=n,this.v3=r}getPoint(t,e=new hi){const n=e,r=this.v0,o=this.v1,l=this.v2,c=this.v3;return n.set(yu(t,r.x,o.x,l.x,c.x),yu(t,r.y,o.y,l.y,c.y)),n}copy(source){return super.copy(source),this.v0.copy(source.v0),this.v1.copy(source.v1),this.v2.copy(source.v2),this.v3.copy(source.v3),this}toJSON(){const data=super.toJSON();return data.v0=this.v0.toArray(),data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data.v3=this.v3.toArray(),data}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class Su extends cu{constructor(t=new Gi,e=new Gi,n=new Gi,r=new Gi){super(),this.isCubicBezierCurve3=!0,this.type="CubicBezierCurve3",this.v0=t,this.v1=e,this.v2=n,this.v3=r}getPoint(t,e=new Gi){const n=e,r=this.v0,o=this.v1,l=this.v2,c=this.v3;return n.set(yu(t,r.x,o.x,l.x,c.x),yu(t,r.y,o.y,l.y,c.y),yu(t,r.z,o.z,l.z,c.z)),n}copy(source){return super.copy(source),this.v0.copy(source.v0),this.v1.copy(source.v1),this.v2.copy(source.v2),this.v3.copy(source.v3),this}toJSON(){const data=super.toJSON();return data.v0=this.v0.toArray(),data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data.v3=this.v3.toArray(),data}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this.v3.fromArray(t.v3),this}}class bu extends cu{constructor(t=new hi,e=new hi){super(),this.isLineCurve=!0,this.type="LineCurve",this.v1=t,this.v2=e}getPoint(t,e=new hi){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(u,t){return this.getPoint(u,t)}getTangent(t,e=new hi){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(u,t){return this.getTangent(u,t)}copy(source){return super.copy(source),this.v1.copy(source.v1),this.v2.copy(source.v2),this}toJSON(){const data=super.toJSON();return data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Tu extends cu{constructor(t=new Gi,e=new Gi){super(),this.isLineCurve3=!0,this.type="LineCurve3",this.v1=t,this.v2=e}getPoint(t,e=new Gi){const n=e;return 1===t?n.copy(this.v2):(n.copy(this.v2).sub(this.v1),n.multiplyScalar(t).add(this.v1)),n}getPointAt(u,t){return this.getPoint(u,t)}getTangent(t,e=new Gi){return e.subVectors(this.v2,this.v1).normalize()}getTangentAt(u,t){return this.getTangent(u,t)}copy(source){return super.copy(source),this.v1.copy(source.v1),this.v2.copy(source.v2),this}toJSON(){const data=super.toJSON();return data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data}fromJSON(t){return super.fromJSON(t),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class wu extends cu{constructor(t=new hi,e=new hi,n=new hi){super(),this.isQuadraticBezierCurve=!0,this.type="QuadraticBezierCurve",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new hi){const n=e,r=this.v0,o=this.v1,l=this.v2;return n.set(xu(t,r.x,o.x,l.x),xu(t,r.y,o.y,l.y)),n}copy(source){return super.copy(source),this.v0.copy(source.v0),this.v1.copy(source.v1),this.v2.copy(source.v2),this}toJSON(){const data=super.toJSON();return data.v0=this.v0.toArray(),data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Eu extends cu{constructor(t=new Gi,e=new Gi,n=new Gi){super(),this.isQuadraticBezierCurve3=!0,this.type="QuadraticBezierCurve3",this.v0=t,this.v1=e,this.v2=n}getPoint(t,e=new Gi){const n=e,r=this.v0,o=this.v1,l=this.v2;return n.set(xu(t,r.x,o.x,l.x),xu(t,r.y,o.y,l.y),xu(t,r.z,o.z,l.z)),n}copy(source){return super.copy(source),this.v0.copy(source.v0),this.v1.copy(source.v1),this.v2.copy(source.v2),this}toJSON(){const data=super.toJSON();return data.v0=this.v0.toArray(),data.v1=this.v1.toArray(),data.v2=this.v2.toArray(),data}fromJSON(t){return super.fromJSON(t),this.v0.fromArray(t.v0),this.v1.fromArray(t.v1),this.v2.fromArray(t.v2),this}}class Au extends cu{constructor(t=[]){super(),this.isSplineCurve=!0,this.type="SplineCurve",this.points=t}getPoint(t,e=new hi){const n=e,r=this.points,p=(r.length-1)*t,o=Math.floor(p),l=p-o,c=r[0===o?o:o-1],h=r[o],d=r[o>r.length-2?r.length-1:o+1],f=r[o>r.length-3?r.length-1:o+2];return n.set(vu(l,c.x,h.x,d.x,f.x),vu(l,c.y,h.y,d.y,f.y)),n}copy(source){super.copy(source),this.points=[];for(let i=0,t=source.points.length;i<t;i++){const t=source.points[i];this.points.push(t.clone())}return this}toJSON(){const data=super.toJSON();data.points=[];for(let i=0,t=this.points.length;i<t;i++){const t=this.points[i];data.points.push(t.toArray())}return data}fromJSON(t){super.fromJSON(t),this.points=[];for(let i=0,e=t.points.length;i<e;i++){const e=t.points[i];this.points.push((new hi).fromArray(e))}return this}}var Cu=Object.freeze({__proto__:null,ArcCurve:uu,CatmullRomCurve3:_u,CubicBezierCurve:Mu,CubicBezierCurve3:Su,EllipseCurve:hu,LineCurve:bu,LineCurve3:Tu,QuadraticBezierCurve:wu,QuadraticBezierCurve3:Eu,SplineCurve:Au});class Ru extends cu{constructor(){super(),this.type="CurvePath",this.curves=[],this.autoClose=!1}add(t){this.curves.push(t)}closePath(){const t=this.curves[0].getPoint(0),e=this.curves[this.curves.length-1].getPoint(1);if(!t.equals(e)){const n=!0===t.isVector2?"LineCurve":"LineCurve3";this.curves.push(new Cu[n](e,t))}return this}getPoint(t,e){const n=t*this.getLength(),r=this.getCurveLengths();let i=0;for(;i<r.length;){if(r[i]>=n){const t=r[i]-n,o=this.curves[i],l=o.getLength(),u=0===l?0:1-t/l;return o.getPointAt(u,e)}i++}return null}getLength(){const t=this.getCurveLengths();return t[t.length-1]}updateArcLengths(){this.needsUpdate=!0,this.cacheLengths=null,this.getCurveLengths()}getCurveLengths(){if(this.cacheLengths&&this.cacheLengths.length===this.curves.length)return this.cacheLengths;const t=[];let e=0;for(let i=0,n=this.curves.length;i<n;i++)e+=this.curves[i].getLength(),t.push(e);return this.cacheLengths=t,t}getSpacedPoints(t=40){const e=[];for(let i=0;i<=t;i++)e.push(this.getPoint(i/t));return this.autoClose&&e.push(e[0]),e}getPoints(t=12){const e=[];let n;for(let i=0,r=this.curves;i<r.length;i++){const o=r[i],l=o.isEllipseCurve?2*t:o.isLineCurve||o.isLineCurve3?1:o.isSplineCurve?t*o.points.length:t,c=o.getPoints(l);for(let t=0;t<c.length;t++){const r=c[t];n&&n.equals(r)||(e.push(r),n=r)}}return this.autoClose&&e.length>1&&!e[e.length-1].equals(e[0])&&e.push(e[0]),e}copy(source){super.copy(source),this.curves=[];for(let i=0,t=source.curves.length;i<t;i++){const t=source.curves[i];this.curves.push(t.clone())}return this.autoClose=source.autoClose,this}toJSON(){const data=super.toJSON();data.autoClose=this.autoClose,data.curves=[];for(let i=0,t=this.curves.length;i<t;i++){const t=this.curves[i];data.curves.push(t.toJSON())}return data}fromJSON(t){super.fromJSON(t),this.autoClose=t.autoClose,this.curves=[];for(let i=0,e=t.curves.length;i<e;i++){const e=t.curves[i];this.curves.push((new Cu[e.type]).fromJSON(e))}return this}}class Pu extends Ru{constructor(t){super(),this.type="Path",this.currentPoint=new hi,t&&this.setFromPoints(t)}setFromPoints(t){this.moveTo(t[0].x,t[0].y);for(let i=1,e=t.length;i<e;i++)this.lineTo(t[i].x,t[i].y);return this}moveTo(t,e){return this.currentPoint.set(t,e),this}lineTo(t,e){const n=new bu(this.currentPoint.clone(),new hi(t,e));return this.curves.push(n),this.currentPoint.set(t,e),this}quadraticCurveTo(t,e,n,r){const o=new wu(this.currentPoint.clone(),new hi(t,e),new hi(n,r));return this.curves.push(o),this.currentPoint.set(n,r),this}bezierCurveTo(t,e,n,r,o,l){const c=new Mu(this.currentPoint.clone(),new hi(t,e),new hi(n,r),new hi(o,l));return this.curves.push(c),this.currentPoint.set(o,l),this}splineThru(t){const e=[this.currentPoint.clone()].concat(t),n=new Au(e);return this.curves.push(n),this.currentPoint.copy(t[t.length-1]),this}arc(t,e,n,r,o,l){const c=this.currentPoint.x,h=this.currentPoint.y;return this.absarc(t+c,e+h,n,r,o,l),this}absarc(t,e,n,r,o,l){return this.absellipse(t,e,n,n,r,o,l),this}ellipse(t,e,n,r,o,l,c,h){const d=this.currentPoint.x,f=this.currentPoint.y;return this.absellipse(t+d,e+f,n,r,o,l,c,h),this}absellipse(t,e,n,r,o,l,c,h){const d=new hu(t,e,n,r,o,l,c,h);if(this.curves.length>0){const t=d.getPoint(0);t.equals(this.currentPoint)||this.lineTo(t.x,t.y)}this.curves.push(d);const f=d.getPoint(1);return this.currentPoint.copy(f),this}copy(source){return super.copy(source),this.currentPoint.copy(source.currentPoint),this}toJSON(){const data=super.toJSON();return data.currentPoint=this.currentPoint.toArray(),data}fromJSON(t){return super.fromJSON(t),this.currentPoint.fromArray(t.currentPoint),this}}class Iu extends Gs{constructor(t=[new hi(0,-.5),new hi(.5,0),new hi(0,.5)],e=12,n=0,r=2*Math.PI){super(),this.type="LatheGeometry",this.parameters={points:t,segments:e,phiStart:n,phiLength:r},e=Math.floor(e),r=ii(r,0,2*Math.PI);const o=[],l=[],c=[],h=[],d=[],f=1/e,m=new Gi,_=new hi,v=new Gi,x=new Gi,y=new Gi;let M=0,S=0;for(let e=0;e<=t.length-1;e++)switch(e){case 0:M=t[e+1].x-t[e].x,S=t[e+1].y-t[e].y,v.x=1*S,v.y=-M,v.z=0*S,y.copy(v),v.normalize(),h.push(v.x,v.y,v.z);break;case t.length-1:h.push(y.x,y.y,y.z);break;default:M=t[e+1].x-t[e].x,S=t[e+1].y-t[e].y,v.x=1*S,v.y=-M,v.z=0*S,x.copy(v),v.x+=y.x,v.y+=y.y,v.z+=y.z,v.normalize(),h.push(v.x,v.y,v.z),y.copy(x)}for(let i=0;i<=e;i++){const o=n+i*f*r,v=Math.sin(o),x=Math.cos(o);for(let n=0;n<=t.length-1;n++){m.x=t[n].x*v,m.y=t[n].y,m.z=t[n].x*x,l.push(m.x,m.y,m.z),_.x=i/e,_.y=n/(t.length-1),c.push(_.x,_.y);const r=h[3*n+0]*v,o=h[3*n+1],f=h[3*n+0]*x;d.push(r,o,f)}}for(let i=0;i<e;i++)for(let e=0;e<t.length-1;e++){const base=e+i*t.length,a=base,b=base+t.length,n=base+t.length+1,r=base+1;o.push(a,b,r),o.push(n,r,b)}this.setIndex(o),this.setAttribute("position",new Ns(l,3)),this.setAttribute("uv",new Ns(c,2)),this.setAttribute("normal",new Ns(d,3))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new Iu(data.points,data.segments,data.phiStart,data.phiLength)}}class Lu extends Iu{constructor(t=1,e=1,n=4,r=8){const path=new Pu;path.absarc(0,-e/2,t,1.5*Math.PI,0),path.absarc(0,e/2,t,0,.5*Math.PI),super(path.getPoints(n),r),this.type="CapsuleGeometry",this.parameters={radius:t,length:e,capSegments:n,radialSegments:r}}static fromJSON(data){return new Lu(data.radius,data.length,data.capSegments,data.radialSegments)}}class Uu extends Gs{constructor(t=1,e=32,n=0,r=2*Math.PI){super(),this.type="CircleGeometry",this.parameters={radius:t,segments:e,thetaStart:n,thetaLength:r},e=Math.max(3,e);const o=[],l=[],c=[],h=[],d=new Gi,f=new hi;l.push(0,0,0),c.push(0,0,1),h.push(.5,.5);for(let s=0,i=3;s<=e;s++,i+=3){const o=n+s/e*r;d.x=t*Math.cos(o),d.y=t*Math.sin(o),l.push(d.x,d.y,d.z),c.push(0,0,1),f.x=(l[i]/t+1)/2,f.y=(l[i+1]/t+1)/2,h.push(f.x,f.y)}for(let i=1;i<=e;i++)o.push(i,i+1,0);this.setIndex(o),this.setAttribute("position",new Ns(l,3)),this.setAttribute("normal",new Ns(c,3)),this.setAttribute("uv",new Ns(h,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new Uu(data.radius,data.segments,data.thetaStart,data.thetaLength)}}class Du extends Gs{constructor(t=1,e=1,n=1,r=32,o=1,l=!1,c=0,h=2*Math.PI){super(),this.type="CylinderGeometry",this.parameters={radiusTop:t,radiusBottom:e,height:n,radialSegments:r,heightSegments:o,openEnded:l,thetaStart:c,thetaLength:h};const d=this;r=Math.floor(r),o=Math.floor(o);const f=[],m=[],_=[],v=[];let x=0;const y=[],M=n/2;let S=0;function T(n){const o=x,l=new hi,y=new Gi;let T=0;const w=!0===n?t:e,E=!0===n?1:-1;for(let t=1;t<=r;t++)m.push(0,M*E,0),_.push(0,E,0),v.push(.5,.5),x++;const A=x;for(let t=0;t<=r;t++){const e=t/r*h+c,n=Math.cos(e),o=Math.sin(e);y.x=w*o,y.y=M*E,y.z=w*n,m.push(y.x,y.y,y.z),_.push(0,E,0),l.x=.5*n+.5,l.y=.5*o*E+.5,v.push(l.x,l.y),x++}for(let t=0;t<r;t++){const e=o+t,i=A+t;!0===n?f.push(i,i+1,e):f.push(i+1,i,e),T+=3}d.addGroup(S,T,!0===n?1:2),S+=T}!function(){const l=new Gi,T=new Gi;let w=0;const E=(e-t)/n;for(let d=0;d<=o;d++){const f=[],S=d/o,w=S*(e-t)+t;for(let t=0;t<=r;t++){const u=t/r,e=u*h+c,o=Math.sin(e),d=Math.cos(e);T.x=w*o,T.y=-S*n+M,T.z=w*d,m.push(T.x,T.y,T.z),l.set(o,E,d).normalize(),_.push(l.x,l.y,l.z),v.push(u,1-S),f.push(x++)}y.push(f)}for(let n=0;n<r;n++)for(let r=0;r<o;r++){const a=y[r][n],b=y[r+1][n],l=y[r+1][n+1],c=y[r][n+1];(t>0||0!==r)&&(f.push(a,b,c),w+=3),(e>0||r!==o-1)&&(f.push(b,l,c),w+=3)}d.addGroup(S,w,0),S+=w}(),!1===l&&(t>0&&T(!0),e>0&&T(!1)),this.setIndex(f),this.setAttribute("position",new Ns(m,3)),this.setAttribute("normal",new Ns(_,3)),this.setAttribute("uv",new Ns(v,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new Du(data.radiusTop,data.radiusBottom,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength)}}class Nu extends Du{constructor(t=1,e=1,n=32,r=1,o=!1,l=0,c=2*Math.PI){super(0,t,e,n,r,o,l,c),this.type="ConeGeometry",this.parameters={radius:t,height:e,radialSegments:n,heightSegments:r,openEnded:o,thetaStart:l,thetaLength:c}}static fromJSON(data){return new Nu(data.radius,data.height,data.radialSegments,data.heightSegments,data.openEnded,data.thetaStart,data.thetaLength)}}class Ou extends Gs{constructor(t=[],e=[],n=1,r=0){super(),this.type="PolyhedronGeometry",this.parameters={vertices:t,indices:e,radius:n,detail:r};const o=[],l=[];function c(a,b,t,e){const n=e+1,r=[];for(let i=0;i<=n;i++){r[i]=[];const e=a.clone().lerp(t,i/n),o=b.clone().lerp(t,i/n),l=n-i;for(let t=0;t<=l;t++)r[i][t]=0===t&&i===n?e:e.clone().lerp(o,t/l)}for(let i=0;i<n;i++)for(let t=0;t<2*(n-i)-1;t++){const e=Math.floor(t/2);t%2==0?(h(r[i][e+1]),h(r[i+1][e]),h(r[i][e])):(h(r[i][e+1]),h(r[i+1][e+1]),h(r[i+1][e]))}}function h(t){o.push(t.x,t.y,t.z)}function d(e,n){const r=3*e;n.x=t[r+0],n.y=t[r+1],n.z=t[r+2]}function f(t,e,n,r){r<0&&1===t.x&&(l[e]=t.x-1),0===n.x&&0===n.z&&(l[e]=r/2/Math.PI+.5)}function m(t){return Math.atan2(t.z,-t.x)}!function(t){const a=new Gi,b=new Gi,n=new Gi;for(let i=0;i<e.length;i+=3)d(e[i+0],a),d(e[i+1],b),d(e[i+2],n),c(a,b,n,t)}(r),function(t){const e=new Gi;for(let i=0;i<o.length;i+=3)e.x=o[i+0],e.y=o[i+1],e.z=o[i+2],e.normalize().multiplyScalar(t),o[i+0]=e.x,o[i+1]=e.y,o[i+2]=e.z}(n),function(){const t=new Gi;for(let i=0;i<o.length;i+=3){t.x=o[i+0],t.y=o[i+1],t.z=o[i+2];const u=m(t)/2/Math.PI+.5,n=(e=t,Math.atan2(-e.y,Math.sqrt(e.x*e.x+e.z*e.z))/Math.PI+.5);l.push(u,1-n)}var e;(function(){const a=new Gi,b=new Gi,t=new Gi,e=new Gi,n=new hi,r=new hi,c=new hi;for(let i=0,h=0;i<o.length;i+=9,h+=6){a.set(o[i+0],o[i+1],o[i+2]),b.set(o[i+3],o[i+4],o[i+5]),t.set(o[i+6],o[i+7],o[i+8]),n.set(l[h+0],l[h+1]),r.set(l[h+2],l[h+3]),c.set(l[h+4],l[h+5]),e.copy(a).add(b).add(t).divideScalar(3);const d=m(e);f(n,h+0,a,d),f(r,h+2,b,d),f(c,h+4,t,d)}})(),function(){for(let i=0;i<l.length;i+=6){const t=l[i+0],e=l[i+2],n=l[i+4],r=Math.max(t,e,n),o=Math.min(t,e,n);r>.9&&o<.1&&(t<.2&&(l[i+0]+=1),e<.2&&(l[i+2]+=1),n<.2&&(l[i+4]+=1))}}()}(),this.setAttribute("position",new Ns(o,3)),this.setAttribute("normal",new Ns(o.slice(),3)),this.setAttribute("uv",new Ns(l,2)),0===r?this.computeVertexNormals():this.normalizeNormals()}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new Ou(data.vertices,data.indices,data.radius,data.details)}}class Fu extends Ou{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2,r=1/n;super([-1,-1,-1,-1,-1,1,-1,1,-1,-1,1,1,1,-1,-1,1,-1,1,1,1,-1,1,1,1,0,-r,-n,0,-r,n,0,r,-n,0,r,n,-r,-n,0,-r,n,0,r,-n,0,r,n,0,-n,0,-r,n,0,-r,-n,0,r,n,0,r],[3,11,7,3,7,15,3,15,13,7,19,17,7,17,6,7,6,15,17,4,8,17,8,10,17,10,6,8,0,16,8,16,2,8,2,10,0,12,1,0,1,18,0,18,16,6,10,2,6,2,13,6,13,15,2,16,18,2,18,3,2,3,13,18,1,9,18,9,11,18,11,3,4,14,12,4,12,0,4,0,8,11,9,5,11,5,19,11,19,7,19,5,14,19,14,4,19,4,17,1,12,14,1,14,5,1,5,9],t,e),this.type="DodecahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(data){return new Fu(data.radius,data.detail)}}const Bu=new Gi,zu=new Gi,ku=new Gi,Vu=new cs;class Hu extends Gs{constructor(t=null,e=1){if(super(),this.type="EdgesGeometry",this.parameters={geometry:t,thresholdAngle:e},null!==t){const n=4,r=Math.pow(10,n),o=Math.cos(ti*e),l=t.getIndex(),c=t.getAttribute("position"),h=l?l.count:c.count,d=[0,0,0],f=["a","b","c"],m=new Array(3),_={},v=[];for(let i=0;i<h;i+=3){l?(d[0]=l.getX(i),d[1]=l.getX(i+1),d[2]=l.getX(i+2)):(d[0]=i,d[1]=i+1,d[2]=i+2);const{a:a,b:b,c:t}=Vu;if(a.fromBufferAttribute(c,d[0]),b.fromBufferAttribute(c,d[1]),t.fromBufferAttribute(c,d[2]),Vu.getNormal(ku),m[0]=`${Math.round(a.x*r)},${Math.round(a.y*r)},${Math.round(a.z*r)}`,m[1]=`${Math.round(b.x*r)},${Math.round(b.y*r)},${Math.round(b.z*r)}`,m[2]=`${Math.round(t.x*r)},${Math.round(t.y*r)},${Math.round(t.z*r)}`,m[0]!==m[1]&&m[1]!==m[2]&&m[2]!==m[0])for(let t=0;t<3;t++){const e=(t+1)%3,n=m[t],r=m[e],l=Vu[f[t]],c=Vu[f[e]],h=`${n}_${r}`,x=`${r}_${n}`;x in _&&_[x]?(ku.dot(_[x].normal)<=o&&(v.push(l.x,l.y,l.z),v.push(c.x,c.y,c.z)),_[x]=null):h in _||(_[h]={index0:d[t],index1:d[e],normal:ku.clone()})}}for(const t in _)if(_[t]){const{index0:e,index1:n}=_[t];Bu.fromBufferAttribute(c,e),zu.fromBufferAttribute(c,n),v.push(Bu.x,Bu.y,Bu.z),v.push(zu.x,zu.y,zu.z)}this.setAttribute("position",new Ns(v,3))}}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}}class Gu extends Pu{constructor(t){super(t),this.uuid=ni(),this.type="Shape",this.holes=[]}getPointsHoles(t){const e=[];for(let i=0,n=this.holes.length;i<n;i++)e[i]=this.holes[i].getPoints(t);return e}extractPoints(t){return{shape:this.getPoints(t),holes:this.getPointsHoles(t)}}copy(source){super.copy(source),this.holes=[];for(let i=0,t=source.holes.length;i<t;i++){const t=source.holes[i];this.holes.push(t.clone())}return this}toJSON(){const data=super.toJSON();data.uuid=this.uuid,data.holes=[];for(let i=0,t=this.holes.length;i<t;i++){const t=this.holes[i];data.holes.push(t.toJSON())}return data}fromJSON(t){super.fromJSON(t),this.uuid=t.uuid,this.holes=[];for(let i=0,e=t.holes.length;i<e;i++){const e=t.holes[i];this.holes.push((new Pu).fromJSON(e))}return this}}const Wu=function(data,t,e=2){const n=t&&t.length,r=n?t[0]*e:data.length;let o=Xu(data,0,r,e,!0);const l=[];if(!o||o.next===o.prev)return l;let c,h,d,f,m,_,v;if(n&&(o=function(data,t,e,n){const r=[];let i,o,l,c,h;for(i=0,o=t.length;i<o;i++)l=t[i]*n,c=i<o-1?t[i+1]*n:data.length,h=Xu(data,l,c,n,!1),h===h.next&&(h.steiner=!0),r.push(id(h));for(r.sort($u),i=0;i<r.length;i++)e=Qu(r[i],e);return e}(data,t,o,e)),data.length>80*e){c=d=data[0],h=f=data[1];for(let i=e;i<r;i+=e)m=data[i],_=data[i+1],m<c&&(c=m),_<h&&(h=_),m>d&&(d=m),_>f&&(f=_);v=Math.max(d-c,f-h),v=0!==v?32767/v:0}return qu(o,l,e,c,h,v,0),l};function Xu(data,t,e,n,r){let i,o;if(r===function(data,t,e,n){let r=0;for(let i=t,o=e-n;i<e;i+=n)r+=(data[o]-data[i])*(data[i+1]+data[o+1]),o=i;return r}(data,t,e,n)>0)for(i=t;i<e;i+=n)o=pd(i,data[i],data[i+1],o);else for(i=e-n;i>=t;i-=n)o=pd(i,data[i],data[i+1],o);return o&&ad(o,o.next)&&(fd(o),o=o.next),o}function ju(t,e){if(!t)return t;e||(e=t);let n,p=t;do{if(n=!1,p.steiner||!ad(p,p.next)&&0!==area(p.prev,p,p.next))p=p.next;else{if(fd(p),p=e=p.prev,p===p.next)break;n=!0}}while(n||p!==e);return e}function qu(t,e,n,r,o,l,c){if(!t)return;!c&&l&&function(t,e,n,r){let p=t;do{0===p.z&&(p.z=nd(p.x,p.y,e,n,r)),p.prevZ=p.prev,p.nextZ=p.next,p=p.next}while(p!==t);p.prevZ.nextZ=null,p.prevZ=null,function(t){let i,p,q,e,n,r,o,l,c=1;do{for(p=t,t=null,n=null,r=0;p;){for(r++,q=p,o=0,i=0;i<c&&(o++,q=q.nextZ,q);i++);for(l=c;o>0||l>0&&q;)0!==o&&(0===l||!q||p.z<=q.z)?(e=p,p=p.nextZ,o--):(e=q,q=q.nextZ,l--),n?n.nextZ=e:t=e,e.prevZ=n,n=e;p=q}n.nextZ=null,c*=2}while(r>1)}(p)}(t,r,o,l);let h,d,f=t;for(;t.prev!==t.next;)if(h=t.prev,d=t.next,l?Zu(t,r,o,l):Yu(t))e.push(h.i/n|0),e.push(t.i/n|0),e.push(d.i/n|0),fd(t),t=d.next,f=d.next;else if((t=d)===f){c?1===c?qu(t=Ju(ju(t),e,n),e,n,r,o,l,2):2===c&&Ku(t,e,n,r,o,l):qu(ju(t),e,n,r,o,l,1);break}}function Yu(t){const a=t.prev,b=t,e=t.next;if(area(a,b,e)>=0)return!1;const n=a.x,r=b.x,o=e.x,l=a.y,c=b.y,h=e.y,d=n<r?n<o?n:o:r<o?r:o,f=l<c?l<h?l:h:c<h?c:h,m=n>r?n>o?n:o:r>o?r:o,_=l>c?l>h?l:h:c>h?c:h;let p=e.next;for(;p!==a;){if(p.x>=d&&p.x<=m&&p.y>=f&&p.y<=_&&rd(n,l,r,c,o,h,p.x,p.y)&&area(p.prev,p,p.next)>=0)return!1;p=p.next}return!0}function Zu(t,e,n,r){const a=t.prev,b=t,o=t.next;if(area(a,b,o)>=0)return!1;const l=a.x,c=b.x,h=o.x,d=a.y,f=b.y,m=o.y,_=l<c?l<h?l:h:c<h?c:h,v=d<f?d<m?d:m:f<m?f:m,x=l>c?l>h?l:h:c>h?c:h,y=d>f?d>m?d:m:f>m?f:m,M=nd(_,v,e,n,r),S=nd(x,y,e,n,r);let p=t.prevZ,T=t.nextZ;for(;p&&p.z>=M&&T&&T.z<=S;){if(p.x>=_&&p.x<=x&&p.y>=v&&p.y<=y&&p!==a&&p!==o&&rd(l,d,c,f,h,m,p.x,p.y)&&area(p.prev,p,p.next)>=0)return!1;if(p=p.prevZ,T.x>=_&&T.x<=x&&T.y>=v&&T.y<=y&&T!==a&&T!==o&&rd(l,d,c,f,h,m,T.x,T.y)&&area(T.prev,T,T.next)>=0)return!1;T=T.nextZ}for(;p&&p.z>=M;){if(p.x>=_&&p.x<=x&&p.y>=v&&p.y<=y&&p!==a&&p!==o&&rd(l,d,c,f,h,m,p.x,p.y)&&area(p.prev,p,p.next)>=0)return!1;p=p.prevZ}for(;T&&T.z<=S;){if(T.x>=_&&T.x<=x&&T.y>=v&&T.y<=y&&T!==a&&T!==o&&rd(l,d,c,f,h,m,T.x,T.y)&&area(T.prev,T,T.next)>=0)return!1;T=T.nextZ}return!0}function Ju(t,e,n){let p=t;do{const a=p.prev,b=p.next.next;!ad(a,b)&&od(a,p,p.next,b)&&hd(a,b)&&hd(b,a)&&(e.push(a.i/n|0),e.push(p.i/n|0),e.push(b.i/n|0),fd(p),fd(p.next),p=t=b),p=p.next}while(p!==t);return ju(p)}function Ku(t,e,n,r,o,l){let a=t;do{let b=a.next.next;for(;b!==a.prev;){if(a.i!==b.i&&sd(a,b)){let t=ud(a,b);return a=ju(a,a.next),t=ju(t,t.next),qu(a,e,n,r,o,l,0),void qu(t,e,n,r,o,l,0)}b=b.next}a=a.next}while(a!==t)}function $u(a,b){return a.x-b.x}function Qu(t,e){const n=function(t,e){let n,p=e,r=-1/0;const o=t.x,l=t.y;do{if(l<=p.y&&l>=p.next.y&&p.next.y!==p.y){const t=p.x+(l-p.y)*(p.next.x-p.x)/(p.next.y-p.y);if(t<=o&&t>r&&(r=t,n=p.x<p.next.x?p:p.next,t===o))return n}p=p.next}while(p!==e);if(!n)return null;const c=n,h=n.x,d=n.y;let f,m=1/0;p=n;do{o>=p.x&&p.x>=h&&o!==p.x&&rd(l<d?o:r,l,h,d,l<d?r:o,l,p.x,p.y)&&(f=Math.abs(l-p.y)/(o-p.x),hd(p,t)&&(f<m||f===m&&(p.x>n.x||p.x===n.x&&ed(n,p)))&&(n=p,m=f)),p=p.next}while(p!==c);return n}(t,e);if(!n)return e;const r=ud(n,t);return ju(r,r.next),ju(n,n.next)}function ed(t,p){return area(t.prev,t,p.prev)<0&&area(p.next,t,t.next)<0}function nd(t,e,n,r,o){return(t=1431655765&((t=858993459&((t=252645135&((t=16711935&((t=(t-n)*o|0)|t<<8))|t<<4))|t<<2))|t<<1))|(e=1431655765&((e=858993459&((e=252645135&((e=16711935&((e=(e-r)*o|0)|e<<8))|e<<4))|e<<2))|e<<1))<<1}function id(t){let p=t,e=t;do{(p.x<e.x||p.x===e.x&&p.y<e.y)&&(e=p),p=p.next}while(p!==t);return e}function rd(t,e,n,r,o,l,c,h){return(o-c)*(e-h)>=(t-c)*(l-h)&&(t-c)*(r-h)>=(n-c)*(e-h)&&(n-c)*(l-h)>=(o-c)*(r-h)}function sd(a,b){return a.next.i!==b.i&&a.prev.i!==b.i&&!function(a,b){let p=a;do{if(p.i!==a.i&&p.next.i!==a.i&&p.i!==b.i&&p.next.i!==b.i&&od(p,p.next,a,b))return!0;p=p.next}while(p!==a);return!1}(a,b)&&(hd(a,b)&&hd(b,a)&&function(a,b){let p=a,t=!1;const e=(a.x+b.x)/2,n=(a.y+b.y)/2;do{p.y>n!=p.next.y>n&&p.next.y!==p.y&&e<(p.next.x-p.x)*(n-p.y)/(p.next.y-p.y)+p.x&&(t=!t),p=p.next}while(p!==a);return t}(a,b)&&(area(a.prev,a,b.prev)||area(a,b.prev,b))||ad(a,b)&&area(a.prev,a,a.next)>0&&area(b.prev,b,b.next)>0)}function area(p,q,t){return(q.y-p.y)*(t.x-q.x)-(q.x-p.x)*(t.y-q.y)}function ad(t,e){return t.x===e.x&&t.y===e.y}function od(t,e,n,r){const o=cd(area(t,e,n)),l=cd(area(t,e,r)),c=cd(area(n,r,t)),h=cd(area(n,r,e));return o!==l&&c!==h||(!(0!==o||!ld(t,n,e))||(!(0!==l||!ld(t,r,e))||(!(0!==c||!ld(n,t,r))||!(0!==h||!ld(n,e,r)))))}function ld(p,q,t){return q.x<=Math.max(p.x,t.x)&&q.x>=Math.min(p.x,t.x)&&q.y<=Math.max(p.y,t.y)&&q.y>=Math.min(p.y,t.y)}function cd(t){return t>0?1:t<0?-1:0}function hd(a,b){return area(a.prev,a,a.next)<0?area(a,b,a.next)>=0&&area(a,a.prev,b)>=0:area(a,b,a.prev)<0||area(a,a.next,b)<0}function ud(a,b){const t=new md(a.i,a.x,a.y),e=new md(b.i,b.x,b.y),n=a.next,r=b.prev;return a.next=b,b.prev=a,t.next=n,n.prev=t,e.next=t,t.prev=e,r.next=e,e.prev=r,e}function pd(i,t,e,n){const p=new md(i,t,e);return n?(p.next=n.next,p.prev=n,n.next.prev=p,n.next=p):(p.prev=p,p.next=p),p}function fd(p){p.next.prev=p.prev,p.prev.next=p.next,p.prevZ&&(p.prevZ.nextZ=p.nextZ),p.nextZ&&(p.nextZ.prevZ=p.prevZ)}function md(i,t,e){this.i=i,this.x=t,this.y=e,this.prev=null,this.next=null,this.z=0,this.prevZ=null,this.nextZ=null,this.steiner=!1}class gd{static area(t){const e=t.length;let a=0;for(let p=e-1,q=0;q<e;p=q++)a+=t[p].x*t[q].y-t[q].x*t[p].y;return.5*a}static isClockWise(t){return gd.area(t)<0}static triangulateShape(t,e){const n=[],r=[],o=[];_d(t),vd(n,t);let l=t.length;e.forEach(_d);for(let i=0;i<e.length;i++)r.push(l),l+=e[i].length,vd(n,e[i]);const c=Wu(n,r);for(let i=0;i<c.length;i+=3)o.push(c.slice(i,i+3));return o}}function _d(t){const e=t.length;e>2&&t[e-1].equals(t[0])&&t.pop()}function vd(t,e){for(let i=0;i<e.length;i++)t.push(e[i].x),t.push(e[i].y)}class xd extends Gs{constructor(t=new Gu([new hi(.5,.5),new hi(-.5,.5),new hi(-.5,-.5),new hi(.5,-.5)]),e={}){super(),this.type="ExtrudeGeometry",this.parameters={shapes:t,options:e},t=Array.isArray(t)?t:[t];const n=this,r=[],o=[];for(let i=0,e=t.length;i<e;i++){l(t[i])}function l(t){const l=[],c=void 0!==e.curveSegments?e.curveSegments:12,h=void 0!==e.steps?e.steps:1,d=void 0!==e.depth?e.depth:1;let f=void 0===e.bevelEnabled||e.bevelEnabled,m=void 0!==e.bevelThickness?e.bevelThickness:.2,_=void 0!==e.bevelSize?e.bevelSize:m-.1,v=void 0!==e.bevelOffset?e.bevelOffset:0,x=void 0!==e.bevelSegments?e.bevelSegments:3;const y=e.extrudePath,M=void 0!==e.UVGenerator?e.UVGenerator:yd;let S,T,w,E,A,C=!1;y&&(S=y.getSpacedPoints(h),C=!0,f=!1,T=y.computeFrenetFrames(h,!1),w=new Gi,E=new Gi,A=new Gi),f||(x=0,m=0,_=0,v=0);const R=t.extractPoints(c);let P=R.shape;const I=R.holes;if(!gd.isClockWise(P)){P=P.reverse();for(let t=0,e=I.length;t<e;t++){const e=I[t];gd.isClockWise(e)&&(I[t]=e.reverse())}}const L=gd.triangulateShape(P,I),U=P;for(let t=0,e=I.length;t<e;t++){const e=I[t];P=P.concat(e)}function D(t,e,n){return e||console.error("THREE.ExtrudeGeometry: vec does not exist"),t.clone().addScaledVector(e,n)}const N=P.length,O=L.length;function F(t,e,n){let r,o,l;const c=t.x-e.x,h=t.y-e.y,d=n.x-t.x,f=n.y-t.y,m=c*c+h*h,_=c*f-h*d;if(Math.abs(_)>Number.EPSILON){const _=Math.sqrt(m),v=Math.sqrt(d*d+f*f),x=e.x-h/_,y=e.y+c/_,M=((n.x-f/v-x)*f-(n.y+d/v-y)*d)/(c*f-h*d);r=x+c*M-t.x,o=y+h*M-t.y;const S=r*r+o*o;if(S<=2)return new hi(r,o);l=Math.sqrt(S/2)}else{let t=!1;c>Number.EPSILON?d>Number.EPSILON&&(t=!0):c<-Number.EPSILON?d<-Number.EPSILON&&(t=!0):Math.sign(h)===Math.sign(f)&&(t=!0),t?(r=-h,o=c,l=Math.sqrt(m)):(r=c,o=h,l=Math.sqrt(m/2))}return new hi(r/l,o/l)}const B=[];for(let i=0,t=U.length,e=t-1,n=i+1;i<t;i++,e++,n++)e===t&&(e=0),n===t&&(n=0),B[i]=F(U[i],U[e],U[n]);const z=[];let k,V=B.concat();for(let t=0,e=I.length;t<e;t++){const e=I[t];k=[];for(let i=0,t=e.length,n=t-1,r=i+1;i<t;i++,n++,r++)n===t&&(n=0),r===t&&(r=0),k[i]=F(e[i],e[n],e[r]);z.push(k),V=V.concat(k)}for(let b=0;b<x;b++){const t=b/x,e=m*Math.cos(t*Math.PI/2),n=_*Math.sin(t*Math.PI/2)+v;for(let i=0,t=U.length;i<t;i++){const t=D(U[i],B[i],n);W(t.x,t.y,-e)}for(let t=0,r=I.length;t<r;t++){const r=I[t];k=z[t];for(let i=0,t=r.length;i<t;i++){const t=D(r[i],k[i],n);W(t.x,t.y,-e)}}}const H=_+v;for(let i=0;i<N;i++){const t=f?D(P[i],V[i],H):P[i];C?(E.copy(T.normals[0]).multiplyScalar(t.x),w.copy(T.binormals[0]).multiplyScalar(t.y),A.copy(S[0]).add(E).add(w),W(A.x,A.y,A.z)):W(t.x,t.y,0)}for(let s=1;s<=h;s++)for(let i=0;i<N;i++){const t=f?D(P[i],V[i],H):P[i];C?(E.copy(T.normals[s]).multiplyScalar(t.x),w.copy(T.binormals[s]).multiplyScalar(t.y),A.copy(S[s]).add(E).add(w),W(A.x,A.y,A.z)):W(t.x,t.y,d/h*s)}for(let b=x-1;b>=0;b--){const t=b/x,e=m*Math.cos(t*Math.PI/2),n=_*Math.sin(t*Math.PI/2)+v;for(let i=0,t=U.length;i<t;i++){const t=D(U[i],B[i],n);W(t.x,t.y,d+e)}for(let t=0,r=I.length;t<r;t++){const r=I[t];k=z[t];for(let i=0,t=r.length;i<t;i++){const t=D(r[i],k[i],n);C?W(t.x,t.y+S[h-1].y,S[h-1].x+e):W(t.x,t.y,d+e)}}}function G(t,e){let i=t.length;for(;--i>=0;){const n=i;let r=i-1;r<0&&(r=t.length-1);for(let s=0,t=h+2*x;s<t;s++){const t=N*s,o=N*(s+1);j(e+n+t,e+r+t,e+r+o,e+n+o)}}}function W(t,e,n){l.push(t),l.push(e),l.push(n)}function X(a,b,t){Y(a),Y(b),Y(t);const e=r.length/3,o=M.generateTopUV(n,r,e-3,e-2,e-1);Z(o[0]),Z(o[1]),Z(o[2])}function j(a,b,t,e){Y(a),Y(b),Y(e),Y(b),Y(t),Y(e);const o=r.length/3,l=M.generateSideWallUV(n,r,o-6,o-3,o-2,o-1);Z(l[0]),Z(l[1]),Z(l[3]),Z(l[1]),Z(l[2]),Z(l[3])}function Y(t){r.push(l[3*t+0]),r.push(l[3*t+1]),r.push(l[3*t+2])}function Z(t){o.push(t.x),o.push(t.y)}!function(){const t=r.length/3;if(f){let t=0,e=N*t;for(let i=0;i<O;i++){const t=L[i];X(t[2]+e,t[1]+e,t[0]+e)}t=h+2*x,e=N*t;for(let i=0;i<O;i++){const t=L[i];X(t[0]+e,t[1]+e,t[2]+e)}}else{for(let i=0;i<O;i++){const t=L[i];X(t[2],t[1],t[0])}for(let i=0;i<O;i++){const t=L[i];X(t[0]+N*h,t[1]+N*h,t[2]+N*h)}}n.addGroup(t,r.length/3-t,0)}(),function(){const t=r.length/3;let e=0;G(U,e),e+=U.length;for(let t=0,n=I.length;t<n;t++){const n=I[t];G(n,e),e+=n.length}n.addGroup(t,r.length/3-t,1)}()}this.setAttribute("position",new Ns(r,3)),this.setAttribute("uv",new Ns(o,2)),this.computeVertexNormals()}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}toJSON(){const data=super.toJSON();return function(t,e,data){if(data.shapes=[],Array.isArray(t))for(let i=0,e=t.length;i<e;i++){const e=t[i];data.shapes.push(e.uuid)}else data.shapes.push(t.uuid);data.options=Object.assign({},e),void 0!==e.extrudePath&&(data.options.extrudePath=e.extrudePath.toJSON());return data}(this.parameters.shapes,this.parameters.options,data)}static fromJSON(data,t){const e=[];for(let n=0,r=data.shapes.length;n<r;n++){const r=t[data.shapes[n]];e.push(r)}const n=data.options.extrudePath;return void 0!==n&&(data.options.extrudePath=(new Cu[n.type]).fromJSON(n)),new xd(e,data.options)}}const yd={generateTopUV:function(t,e,n,r,o){const l=e[3*n],c=e[3*n+1],h=e[3*r],d=e[3*r+1],f=e[3*o],m=e[3*o+1];return[new hi(l,c),new hi(h,d),new hi(f,m)]},generateSideWallUV:function(t,e,n,r,o,l){const c=e[3*n],h=e[3*n+1],d=e[3*n+2],f=e[3*r],m=e[3*r+1],_=e[3*r+2],v=e[3*o],x=e[3*o+1],y=e[3*o+2],M=e[3*l],S=e[3*l+1],T=e[3*l+2];return Math.abs(h-m)<Math.abs(c-f)?[new hi(c,1-d),new hi(f,1-_),new hi(v,1-y),new hi(M,1-T)]:[new hi(h,1-d),new hi(m,1-_),new hi(x,1-y),new hi(S,1-T)]}};class Md extends Ou{constructor(t=1,e=0){const n=(1+Math.sqrt(5))/2;super([-1,n,0,1,n,0,-1,-n,0,1,-n,0,0,-1,n,0,1,n,0,-1,-n,0,1,-n,n,0,-1,n,0,1,-n,0,-1,-n,0,1],[0,11,5,0,5,1,0,1,7,0,7,10,0,10,11,1,5,9,5,11,4,11,10,2,10,7,6,7,1,8,3,9,4,3,4,2,3,2,6,3,6,8,3,8,9,4,9,5,2,4,11,6,2,10,8,6,7,9,8,1],t,e),this.type="IcosahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(data){return new Md(data.radius,data.detail)}}class Sd extends Ou{constructor(t=1,e=0){super([1,0,0,-1,0,0,0,1,0,0,-1,0,0,0,1,0,0,-1],[0,2,4,0,4,3,0,3,5,0,5,2,1,2,5,1,5,3,1,3,4,1,4,2],t,e),this.type="OctahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(data){return new Sd(data.radius,data.detail)}}class bd extends Gs{constructor(t=.5,e=1,n=32,r=1,o=0,l=2*Math.PI){super(),this.type="RingGeometry",this.parameters={innerRadius:t,outerRadius:e,thetaSegments:n,phiSegments:r,thetaStart:o,thetaLength:l},n=Math.max(3,n);const c=[],h=[],d=[],f=[];let m=t;const _=(e-t)/(r=Math.max(1,r)),v=new Gi,x=new hi;for(let t=0;t<=r;t++){for(let i=0;i<=n;i++){const t=o+i/n*l;v.x=m*Math.cos(t),v.y=m*Math.sin(t),h.push(v.x,v.y,v.z),d.push(0,0,1),x.x=(v.x/e+1)/2,x.y=(v.y/e+1)/2,f.push(x.x,x.y)}m+=_}for(let t=0;t<r;t++){const e=t*(n+1);for(let i=0;i<n;i++){const t=i+e,a=t,b=t+n+1,r=t+n+2,o=t+1;c.push(a,b,o),c.push(b,r,o)}}this.setIndex(c),this.setAttribute("position",new Ns(h,3)),this.setAttribute("normal",new Ns(d,3)),this.setAttribute("uv",new Ns(f,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new bd(data.innerRadius,data.outerRadius,data.thetaSegments,data.phiSegments,data.thetaStart,data.thetaLength)}}class Td extends Gs{constructor(t=new Gu([new hi(0,.5),new hi(-.5,-.5),new hi(.5,-.5)]),e=12){super(),this.type="ShapeGeometry",this.parameters={shapes:t,curveSegments:e};const n=[],r=[],o=[],l=[];let c=0,h=0;if(!1===Array.isArray(t))d(t);else for(let i=0;i<t.length;i++)d(t[i]),this.addGroup(c,h,i),c+=h,h=0;function d(t){const c=r.length/3,d=t.extractPoints(e);let f=d.shape;const m=d.holes;!1===gd.isClockWise(f)&&(f=f.reverse());for(let i=0,t=m.length;i<t;i++){const t=m[i];!0===gd.isClockWise(t)&&(m[i]=t.reverse())}const _=gd.triangulateShape(f,m);for(let i=0,t=m.length;i<t;i++){const t=m[i];f=f.concat(t)}for(let i=0,t=f.length;i<t;i++){const t=f[i];r.push(t.x,t.y,0),o.push(0,0,1),l.push(t.x,t.y)}for(let i=0,t=_.length;i<t;i++){const t=_[i],a=t[0]+c,b=t[1]+c,e=t[2]+c;n.push(a,b,e),h+=3}}this.setIndex(n),this.setAttribute("position",new Ns(r,3)),this.setAttribute("normal",new Ns(o,3)),this.setAttribute("uv",new Ns(l,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}toJSON(){const data=super.toJSON();return function(t,data){if(data.shapes=[],Array.isArray(t))for(let i=0,e=t.length;i<e;i++){const e=t[i];data.shapes.push(e.uuid)}else data.shapes.push(t.uuid);return data}(this.parameters.shapes,data)}static fromJSON(data,t){const e=[];for(let n=0,r=data.shapes.length;n<r;n++){const r=t[data.shapes[n]];e.push(r)}return new Td(e,data.curveSegments)}}class wd extends Gs{constructor(t=1,e=32,n=16,r=0,o=2*Math.PI,l=0,c=Math.PI){super(),this.type="SphereGeometry",this.parameters={radius:t,widthSegments:e,heightSegments:n,phiStart:r,phiLength:o,thetaStart:l,thetaLength:c},e=Math.max(3,Math.floor(e)),n=Math.max(2,Math.floor(n));const h=Math.min(l+c,Math.PI);let d=0;const f=[],m=new Gi,_=new Gi,v=[],x=[],y=[],M=[];for(let v=0;v<=n;v++){const S=[],T=v/n;let w=0;0===v&&0===l?w=.5/e:v===n&&h===Math.PI&&(w=-.5/e);for(let n=0;n<=e;n++){const u=n/e;m.x=-t*Math.cos(r+u*o)*Math.sin(l+T*c),m.y=t*Math.cos(l+T*c),m.z=t*Math.sin(r+u*o)*Math.sin(l+T*c),x.push(m.x,m.y,m.z),_.copy(m).normalize(),y.push(_.x,_.y,_.z),M.push(u+w,1-T),S.push(d++)}f.push(S)}for(let t=0;t<n;t++)for(let r=0;r<e;r++){const a=f[t][r+1],b=f[t][r],e=f[t+1][r],o=f[t+1][r+1];(0!==t||l>0)&&v.push(a,b,o),(t!==n-1||h<Math.PI)&&v.push(b,e,o)}this.setIndex(v),this.setAttribute("position",new Ns(x,3)),this.setAttribute("normal",new Ns(y,3)),this.setAttribute("uv",new Ns(M,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new wd(data.radius,data.widthSegments,data.heightSegments,data.phiStart,data.phiLength,data.thetaStart,data.thetaLength)}}class Ed extends Ou{constructor(t=1,e=0){super([1,1,1,-1,-1,1,-1,1,-1,1,-1,-1],[2,1,0,0,3,2,1,3,0,2,3,1],t,e),this.type="TetrahedronGeometry",this.parameters={radius:t,detail:e}}static fromJSON(data){return new Ed(data.radius,data.detail)}}class Ad extends Gs{constructor(t=1,e=.4,n=12,r=48,o=2*Math.PI){super(),this.type="TorusGeometry",this.parameters={radius:t,tube:e,radialSegments:n,tubularSegments:r,arc:o},n=Math.floor(n),r=Math.floor(r);const l=[],c=[],h=[],d=[],f=new Gi,m=new Gi,_=new Gi;for(let l=0;l<=n;l++)for(let i=0;i<=r;i++){const u=i/r*o,v=l/n*Math.PI*2;m.x=(t+e*Math.cos(v))*Math.cos(u),m.y=(t+e*Math.cos(v))*Math.sin(u),m.z=e*Math.sin(v),c.push(m.x,m.y,m.z),f.x=t*Math.cos(u),f.y=t*Math.sin(u),_.subVectors(m,f).normalize(),h.push(_.x,_.y,_.z),d.push(i/r),d.push(l/n)}for(let t=1;t<=n;t++)for(let i=1;i<=r;i++){const a=(r+1)*t+i-1,b=(r+1)*(t-1)+i-1,e=(r+1)*(t-1)+i,n=(r+1)*t+i;l.push(a,b,n),l.push(b,e,n)}this.setIndex(l),this.setAttribute("position",new Ns(c,3)),this.setAttribute("normal",new Ns(h,3)),this.setAttribute("uv",new Ns(d,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new Ad(data.radius,data.tube,data.radialSegments,data.tubularSegments,data.arc)}}class Cd extends Gs{constructor(t=1,e=.4,n=64,r=8,p=2,q=3){super(),this.type="TorusKnotGeometry",this.parameters={radius:t,tube:e,tubularSegments:n,radialSegments:r,p:p,q:q},n=Math.floor(n),r=Math.floor(r);const o=[],l=[],c=[],h=[],d=new Gi,f=new Gi,m=new Gi,_=new Gi,v=new Gi,x=new Gi,y=new Gi;for(let i=0;i<=n;++i){const u=i/n*p*Math.PI*2;M(u,p,q,t,m),M(u+.01,p,q,t,_),x.subVectors(_,m),y.addVectors(_,m),v.crossVectors(x,y),y.crossVectors(v,x),v.normalize(),y.normalize();for(let t=0;t<=r;++t){const o=t/r*Math.PI*2,_=-e*Math.cos(o),x=e*Math.sin(o);d.x=m.x+(_*y.x+x*v.x),d.y=m.y+(_*y.y+x*v.y),d.z=m.z+(_*y.z+x*v.z),l.push(d.x,d.y,d.z),f.subVectors(d,m).normalize(),c.push(f.x,f.y,f.z),h.push(i/n),h.push(t/r)}}for(let t=1;t<=n;t++)for(let i=1;i<=r;i++){const a=(r+1)*(t-1)+(i-1),b=(r+1)*t+(i-1),e=(r+1)*t+i,n=(r+1)*(t-1)+i;o.push(a,b,n),o.push(b,e,n)}function M(u,p,q,t,e){const n=Math.cos(u),r=Math.sin(u),o=q/p*u,l=Math.cos(o);e.x=t*(2+l)*.5*n,e.y=t*(2+l)*r*.5,e.z=t*Math.sin(o)*.5}this.setIndex(o),this.setAttribute("position",new Ns(l,3)),this.setAttribute("normal",new Ns(c,3)),this.setAttribute("uv",new Ns(h,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}static fromJSON(data){return new Cd(data.radius,data.tube,data.tubularSegments,data.radialSegments,data.p,data.q)}}class Rd extends Gs{constructor(path=new Eu(new Gi(-1,-1,0),new Gi(-1,1,0),new Gi(1,1,0)),t=64,e=1,n=8,r=!1){super(),this.type="TubeGeometry",this.parameters={path:path,tubularSegments:t,radius:e,radialSegments:n,closed:r};const o=path.computeFrenetFrames(t,r);this.tangents=o.tangents,this.normals=o.normals,this.binormals=o.binormals;const l=new Gi,c=new Gi,h=new hi;let d=new Gi;const f=[],m=[],_=[],v=[];function x(i){d=path.getPointAt(i/t,d);const r=o.normals[i],h=o.binormals[i];for(let t=0;t<=n;t++){const o=t/n*Math.PI*2,_=Math.sin(o),v=-Math.cos(o);c.x=v*r.x+_*h.x,c.y=v*r.y+_*h.y,c.z=v*r.z+_*h.z,c.normalize(),m.push(c.x,c.y,c.z),l.x=d.x+e*c.x,l.y=d.y+e*c.y,l.z=d.z+e*c.z,f.push(l.x,l.y,l.z)}}!function(){for(let i=0;i<t;i++)x(i);x(!1===r?t:0),function(){for(let i=0;i<=t;i++)for(let e=0;e<=n;e++)h.x=i/t,h.y=e/n,_.push(h.x,h.y)}(),function(){for(let e=1;e<=t;e++)for(let i=1;i<=n;i++){const a=(n+1)*(e-1)+(i-1),b=(n+1)*e+(i-1),t=(n+1)*e+i,r=(n+1)*(e-1)+i;v.push(a,b,r),v.push(b,t,r)}}()}(),this.setIndex(v),this.setAttribute("position",new Ns(f,3)),this.setAttribute("normal",new Ns(m,3)),this.setAttribute("uv",new Ns(_,2))}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}toJSON(){const data=super.toJSON();return data.path=this.parameters.path.toJSON(),data}static fromJSON(data){return new Rd((new Cu[data.path.type]).fromJSON(data.path),data.tubularSegments,data.radius,data.radialSegments,data.closed)}}class Pd extends Gs{constructor(t=null){if(super(),this.type="WireframeGeometry",this.parameters={geometry:t},null!==t){const e=[],n=new Set,r=new Gi,o=new Gi;if(null!==t.index){const l=t.attributes.position,c=t.index;let h=t.groups;0===h.length&&(h=[{start:0,count:c.count,materialIndex:0}]);for(let t=0,ol=h.length;t<ol;++t){const d=h[t],f=d.start;for(let i=f,t=f+d.count;i<t;i+=3)for(let t=0;t<3;t++){const h=c.getX(i+t),d=c.getX(i+(t+1)%3);r.fromBufferAttribute(l,h),o.fromBufferAttribute(l,d),!0===Id(r,o,n)&&(e.push(r.x,r.y,r.z),e.push(o.x,o.y,o.z))}}}else{const l=t.attributes.position;for(let i=0,t=l.count/3;i<t;i++)for(let t=0;t<3;t++){const c=3*i+t,h=3*i+(t+1)%3;r.fromBufferAttribute(l,c),o.fromBufferAttribute(l,h),!0===Id(r,o,n)&&(e.push(r.x,r.y,r.z),e.push(o.x,o.y,o.z))}}this.setAttribute("position",new Ns(e,3))}}copy(source){return super.copy(source),this.parameters=Object.assign({},source.parameters),this}}function Id(t,e,n){const r=`${t.x},${t.y},${t.z}-${e.x},${e.y},${e.z}`,o=`${e.x},${e.y},${e.z}-${t.x},${t.y},${t.z}`;return!0!==n.has(r)&&!0!==n.has(o)&&(n.add(r),n.add(o),!0)}var Ld=Object.freeze({__proto__:null,BoxGeometry:ia,CapsuleGeometry:Lu,CircleGeometry:Uu,ConeGeometry:Nu,CylinderGeometry:Du,DodecahedronGeometry:Fu,EdgesGeometry:Hu,ExtrudeGeometry:xd,IcosahedronGeometry:Md,LatheGeometry:Iu,OctahedronGeometry:Sd,PlaneGeometry:Aa,PolyhedronGeometry:Ou,RingGeometry:bd,ShapeGeometry:Td,SphereGeometry:wd,TetrahedronGeometry:Ed,TorusGeometry:Ad,TorusKnotGeometry:Cd,TubeGeometry:Rd,WireframeGeometry:Pd});class Ud extends _s{static get type(){return"ShadowMaterial"}constructor(t){super(),this.isShadowMaterial=!0,this.color=new fs(0),this.transparent=!0,this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.color.copy(source.color),this.fog=source.fog,this}}class Dd extends la{static get type(){return"RawShaderMaterial"}constructor(t){super(t),this.isRawShaderMaterial=!0}}class Nd extends _s{static get type(){return"MeshStandardMaterial"}constructor(t){super(),this.isMeshStandardMaterial=!0,this.defines={STANDARD:""},this.color=new fs(16777215),this.roughness=1,this.metalness=0,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new fs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new hi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.roughnessMap=null,this.metalnessMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Lr,this.envMapIntensity=1,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.defines={STANDARD:""},this.color.copy(source.color),this.roughness=source.roughness,this.metalness=source.metalness,this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.roughnessMap=source.roughnessMap,this.metalnessMap=source.metalnessMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.envMapRotation.copy(source.envMapRotation),this.envMapIntensity=source.envMapIntensity,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.flatShading=source.flatShading,this.fog=source.fog,this}}class Od extends Nd{static get type(){return"MeshPhysicalMaterial"}constructor(t){super(),this.isMeshPhysicalMaterial=!0,this.defines={STANDARD:"",PHYSICAL:""},this.anisotropyRotation=0,this.anisotropyMap=null,this.clearcoatMap=null,this.clearcoatRoughness=0,this.clearcoatRoughnessMap=null,this.clearcoatNormalScale=new hi(1,1),this.clearcoatNormalMap=null,this.ior=1.5,Object.defineProperty(this,"reflectivity",{get:function(){return ii(2.5*(this.ior-1)/(this.ior+1),0,1)},set:function(t){this.ior=(1+.4*t)/(1-.4*t)}}),this.iridescenceMap=null,this.iridescenceIOR=1.3,this.iridescenceThicknessRange=[100,400],this.iridescenceThicknessMap=null,this.sheenColor=new fs(0),this.sheenColorMap=null,this.sheenRoughness=1,this.sheenRoughnessMap=null,this.transmissionMap=null,this.thickness=0,this.thicknessMap=null,this.attenuationDistance=1/0,this.attenuationColor=new fs(1,1,1),this.specularIntensity=1,this.specularIntensityMap=null,this.specularColor=new fs(1,1,1),this.specularColorMap=null,this._anisotropy=0,this._clearcoat=0,this._dispersion=0,this._iridescence=0,this._sheen=0,this._transmission=0,this.setValues(t)}get anisotropy(){return this._anisotropy}set anisotropy(t){this._anisotropy>0!=t>0&&this.version++,this._anisotropy=t}get clearcoat(){return this._clearcoat}set clearcoat(t){this._clearcoat>0!=t>0&&this.version++,this._clearcoat=t}get iridescence(){return this._iridescence}set iridescence(t){this._iridescence>0!=t>0&&this.version++,this._iridescence=t}get dispersion(){return this._dispersion}set dispersion(t){this._dispersion>0!=t>0&&this.version++,this._dispersion=t}get sheen(){return this._sheen}set sheen(t){this._sheen>0!=t>0&&this.version++,this._sheen=t}get transmission(){return this._transmission}set transmission(t){this._transmission>0!=t>0&&this.version++,this._transmission=t}copy(source){return super.copy(source),this.defines={STANDARD:"",PHYSICAL:""},this.anisotropy=source.anisotropy,this.anisotropyRotation=source.anisotropyRotation,this.anisotropyMap=source.anisotropyMap,this.clearcoat=source.clearcoat,this.clearcoatMap=source.clearcoatMap,this.clearcoatRoughness=source.clearcoatRoughness,this.clearcoatRoughnessMap=source.clearcoatRoughnessMap,this.clearcoatNormalMap=source.clearcoatNormalMap,this.clearcoatNormalScale.copy(source.clearcoatNormalScale),this.dispersion=source.dispersion,this.ior=source.ior,this.iridescence=source.iridescence,this.iridescenceMap=source.iridescenceMap,this.iridescenceIOR=source.iridescenceIOR,this.iridescenceThicknessRange=[...source.iridescenceThicknessRange],this.iridescenceThicknessMap=source.iridescenceThicknessMap,this.sheen=source.sheen,this.sheenColor.copy(source.sheenColor),this.sheenColorMap=source.sheenColorMap,this.sheenRoughness=source.sheenRoughness,this.sheenRoughnessMap=source.sheenRoughnessMap,this.transmission=source.transmission,this.transmissionMap=source.transmissionMap,this.thickness=source.thickness,this.thicknessMap=source.thicknessMap,this.attenuationDistance=source.attenuationDistance,this.attenuationColor.copy(source.attenuationColor),this.specularIntensity=source.specularIntensity,this.specularIntensityMap=source.specularIntensityMap,this.specularColor.copy(source.specularColor),this.specularColorMap=source.specularColorMap,this}}class Fd extends _s{static get type(){return"MeshPhongMaterial"}constructor(t){super(),this.isMeshPhongMaterial=!0,this.color=new fs(16777215),this.specular=new fs(1118481),this.shininess=30,this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new fs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new hi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Lr,this.combine=at,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.color.copy(source.color),this.specular.copy(source.specular),this.shininess=source.shininess,this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.envMapRotation.copy(source.envMapRotation),this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.flatShading=source.flatShading,this.fog=source.fog,this}}class Bd extends _s{static get type(){return"MeshToonMaterial"}constructor(t){super(),this.isMeshToonMaterial=!0,this.defines={TOON:""},this.color=new fs(16777215),this.map=null,this.gradientMap=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new fs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new hi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.gradientMap=source.gradientMap,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.alphaMap=source.alphaMap,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.fog=source.fog,this}}class zd extends _s{static get type(){return"MeshNormalMaterial"}constructor(t){super(),this.isMeshNormalMaterial=!0,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new hi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.wireframe=!1,this.wireframeLinewidth=1,this.flatShading=!1,this.setValues(t)}copy(source){return super.copy(source),this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.flatShading=source.flatShading,this}}class kd extends _s{static get type(){return"MeshLambertMaterial"}constructor(t){super(),this.isMeshLambertMaterial=!0,this.color=new fs(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.emissive=new fs(0),this.emissiveIntensity=1,this.emissiveMap=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new hi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Lr,this.combine=at,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.color.copy(source.color),this.map=source.map,this.lightMap=source.lightMap,this.lightMapIntensity=source.lightMapIntensity,this.aoMap=source.aoMap,this.aoMapIntensity=source.aoMapIntensity,this.emissive.copy(source.emissive),this.emissiveMap=source.emissiveMap,this.emissiveIntensity=source.emissiveIntensity,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.specularMap=source.specularMap,this.alphaMap=source.alphaMap,this.envMap=source.envMap,this.envMapRotation.copy(source.envMapRotation),this.combine=source.combine,this.reflectivity=source.reflectivity,this.refractionRatio=source.refractionRatio,this.wireframe=source.wireframe,this.wireframeLinewidth=source.wireframeLinewidth,this.wireframeLinecap=source.wireframeLinecap,this.wireframeLinejoin=source.wireframeLinejoin,this.flatShading=source.flatShading,this.fog=source.fog,this}}class Vd extends _s{static get type(){return"MeshMatcapMaterial"}constructor(t){super(),this.isMeshMatcapMaterial=!0,this.defines={MATCAP:""},this.color=new fs(16777215),this.matcap=null,this.map=null,this.bumpMap=null,this.bumpScale=1,this.normalMap=null,this.normalMapType=on,this.normalScale=new hi(1,1),this.displacementMap=null,this.displacementScale=1,this.displacementBias=0,this.alphaMap=null,this.flatShading=!1,this.fog=!0,this.setValues(t)}copy(source){return super.copy(source),this.defines={MATCAP:""},this.color.copy(source.color),this.matcap=source.matcap,this.map=source.map,this.bumpMap=source.bumpMap,this.bumpScale=source.bumpScale,this.normalMap=source.normalMap,this.normalMapType=source.normalMapType,this.normalScale.copy(source.normalScale),this.displacementMap=source.displacementMap,this.displacementScale=source.displacementScale,this.displacementBias=source.displacementBias,this.alphaMap=source.alphaMap,this.flatShading=source.flatShading,this.fog=source.fog,this}}class Hd extends Oh{static get type(){return"LineDashedMaterial"}constructor(t){super(),this.isLineDashedMaterial=!0,this.scale=1,this.dashSize=3,this.gapSize=1,this.setValues(t)}copy(source){return super.copy(source),this.scale=source.scale,this.dashSize=source.dashSize,this.gapSize=source.gapSize,this}}function Gd(t,e,n){return!t||!n&&t.constructor===e?t:"number"==typeof e.BYTES_PER_ELEMENT?new e(t):Array.prototype.slice.call(t)}function Wd(object){return ArrayBuffer.isView(object)&&!(object instanceof DataView)}function Xd(t){const e=t.length,n=new Array(e);for(let i=0;i!==e;++i)n[i]=i;return n.sort((function(i,e){return t[i]-t[e]})),n}function jd(t,e,n){const r=t.length,o=new t.constructor(r);for(let i=0,l=0;l!==r;++i){const r=n[i]*e;for(let n=0;n!==e;++n)o[l++]=t[r+n]}return o}function qd(t,e,n,r){let i=1,o=t[0];for(;void 0!==o&&void 0===o[r];)o=t[i++];if(void 0===o)return;let l=o[r];if(void 0!==l)if(Array.isArray(l))do{l=o[r],void 0!==l&&(e.push(o.time),n.push.apply(n,l)),o=t[i++]}while(void 0!==o);else if(void 0!==l.toArray)do{l=o[r],void 0!==l&&(e.push(o.time),l.toArray(n,n.length)),o=t[i++]}while(void 0!==o);else do{l=o[r],void 0!==l&&(e.push(o.time),n.push(l)),o=t[i++]}while(void 0!==o)}const Yd={convertArray:Gd,isTypedArray:Wd,getKeyframeOrder:Xd,sortedArray:jd,flattenJSON:qd,subclip:function(t,e,n,r,o=30){const l=t.clone();l.name=e;const c=[];for(let i=0;i<l.tracks.length;++i){const track=l.tracks[i],t=track.getValueSize(),e=[],h=[];for(let l=0;l<track.times.length;++l){const c=track.times[l]*o;if(!(c<n||c>=r)){e.push(track.times[l]);for(let e=0;e<t;++e)h.push(track.values[l*t+e])}}0!==e.length&&(track.times=Gd(e,track.times.constructor),track.values=Gd(h,track.values.constructor),c.push(track))}l.tracks=c;let h=1/0;for(let i=0;i<l.tracks.length;++i)h>l.tracks[i].times[0]&&(h=l.tracks[i].times[0]);for(let i=0;i<l.tracks.length;++i)l.tracks[i].shift(-1*h);return l.resetDuration(),l},makeClipAdditive:function(t,e=0,n=t,r=30){r<=0&&(r=30);const o=n.tracks.length,l=e/r;for(let i=0;i<o;++i){const e=n.tracks[i],r=e.ValueTypeName;if("bool"===r||"string"===r)continue;const o=t.tracks.find((function(track){return track.name===e.name&&track.ValueTypeName===r}));if(void 0===o)continue;let c=0;const h=e.getValueSize();e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=h/3);let d=0;const f=o.getValueSize();o.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(d=f/3);const m=e.times.length-1;let _;if(l<=e.times[0]){const t=c,n=h-c;_=e.values.slice(t,n)}else if(l>=e.times[m]){const t=m*h+c,n=t+h-c;_=e.values.slice(t,n)}else{const t=e.createInterpolant(),n=c,r=h-c;t.evaluate(l),_=t.resultBuffer.slice(n,r)}if("quaternion"===r){(new Hi).fromArray(_).normalize().conjugate().toArray(_)}const v=o.times.length;for(let t=0;t<v;++t){const e=t*f+d;if("quaternion"===r)Hi.multiplyQuaternionsFlat(o.values,e,_,0,o.values,e);else{const t=f-2*d;for(let n=0;n<t;++n)o.values[e+n]-=_[n]}}}return t.blendMode=$e,t}};class Zd{constructor(t,e,n,r){this.parameterPositions=t,this._cachedIndex=0,this.resultBuffer=void 0!==r?r:new e.constructor(n),this.sampleValues=e,this.valueSize=n,this.settings=null,this.DefaultSettings_={}}evaluate(t){const e=this.parameterPositions;let n=this._cachedIndex,r=e[n],o=e[n-1];t:{e:{let l;n:{i:if(!(t<r)){for(let l=n+2;;){if(void 0===r){if(t<o)break i;return n=e.length,this._cachedIndex=n,this.copySampleValue_(n-1)}if(n===l)break;if(o=r,r=e[++n],t<r)break e}l=e.length;break n}if(t>=o)break t;{const c=e[1];t<c&&(n=2,o=c);for(let l=n-2;;){if(void 0===o)return this._cachedIndex=0,this.copySampleValue_(0);if(n===l)break;if(r=o,o=e[--n-1],t>=o)break e}l=n,n=0}}for(;n<l;){const r=n+l>>>1;t<e[r]?l=r:n=r+1}if(r=e[n],o=e[n-1],void 0===o)return this._cachedIndex=0,this.copySampleValue_(0);if(void 0===r)return n=e.length,this._cachedIndex=n,this.copySampleValue_(n-1)}this._cachedIndex=n,this.intervalChanged_(n,o,r)}return this.interpolate_(n,o,t,r)}getSettings_(){return this.settings||this.DefaultSettings_}copySampleValue_(t){const e=this.resultBuffer,n=this.sampleValues,r=this.valueSize,o=t*r;for(let i=0;i!==r;++i)e[i]=n[o+i];return e}interpolate_(){throw new Error("call to abstract method")}intervalChanged_(){}}class Jd extends Zd{constructor(t,e,n,r){super(t,e,n,r),this._weightPrev=-0,this._offsetPrev=-0,this._weightNext=-0,this._offsetNext=-0,this.DefaultSettings_={endingStart:Ye,endingEnd:Ye}}intervalChanged_(t,e,n){const r=this.parameterPositions;let o=t-2,l=t+1,c=r[o],h=r[l];if(void 0===c)switch(this.getSettings_().endingStart){case Ze:o=t,c=2*e-n;break;case Je:o=r.length-2,c=e+r[o]-r[o+1];break;default:o=t,c=n}if(void 0===h)switch(this.getSettings_().endingEnd){case Ze:l=t,h=2*n-e;break;case Je:l=1,h=n+r[1]-r[0];break;default:l=t-1,h=e}const d=.5*(n-e),f=this.valueSize;this._weightPrev=d/(e-c),this._weightNext=d/(h-n),this._offsetPrev=o*f,this._offsetNext=l*f}interpolate_(t,e,n,r){const o=this.resultBuffer,l=this.sampleValues,c=this.valueSize,h=t*c,d=h-c,f=this._offsetPrev,m=this._offsetNext,_=this._weightPrev,v=this._weightNext,p=(n-e)/(r-e),x=p*p,y=x*p,M=-_*y+2*_*x-_*p,S=(1+_)*y+(-1.5-2*_)*x+(-.5+_)*p+1,T=(-1-v)*y+(1.5+v)*x+.5*p,w=v*y-v*x;for(let i=0;i!==c;++i)o[i]=M*l[f+i]+S*l[d+i]+T*l[h+i]+w*l[m+i];return o}}class Kd extends Zd{constructor(t,e,n,r){super(t,e,n,r)}interpolate_(t,e,n,r){const o=this.resultBuffer,l=this.sampleValues,c=this.valueSize,h=t*c,d=h-c,f=(n-e)/(r-e),m=1-f;for(let i=0;i!==c;++i)o[i]=l[d+i]*m+l[h+i]*f;return o}}class $d extends Zd{constructor(t,e,n,r){super(t,e,n,r)}interpolate_(t){return this.copySampleValue_(t-1)}}class Qd{constructor(t,e,n,r){if(void 0===t)throw new Error("THREE.KeyframeTrack: track name is undefined");if(void 0===e||0===e.length)throw new Error("THREE.KeyframeTrack: no keyframes in track named "+t);this.name=t,this.times=Gd(e,this.TimeBufferType),this.values=Gd(n,this.ValueBufferType),this.setInterpolation(r||this.DefaultInterpolation)}static toJSON(track){const t=track.constructor;let e;if(t.toJSON!==this.toJSON)e=t.toJSON(track);else{e={name:track.name,times:Gd(track.times,Array),values:Gd(track.values,Array)};const t=track.getInterpolation();t!==track.DefaultInterpolation&&(e.interpolation=t)}return e.type=track.ValueTypeName,e}InterpolantFactoryMethodDiscrete(t){return new $d(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodLinear(t){return new Kd(this.times,this.values,this.getValueSize(),t)}InterpolantFactoryMethodSmooth(t){return new Jd(this.times,this.values,this.getValueSize(),t)}setInterpolation(t){let e;switch(t){case Xe:e=this.InterpolantFactoryMethodDiscrete;break;case je:e=this.InterpolantFactoryMethodLinear;break;case qe:e=this.InterpolantFactoryMethodSmooth}if(void 0===e){const e="unsupported interpolation for "+this.ValueTypeName+" keyframe track named "+this.name;if(void 0===this.createInterpolant){if(t===this.DefaultInterpolation)throw new Error(e);this.setInterpolation(this.DefaultInterpolation)}return console.warn("THREE.KeyframeTrack:",e),this}return this.createInterpolant=e,this}getInterpolation(){switch(this.createInterpolant){case this.InterpolantFactoryMethodDiscrete:return Xe;case this.InterpolantFactoryMethodLinear:return je;case this.InterpolantFactoryMethodSmooth:return qe}}getValueSize(){return this.values.length/this.times.length}shift(t){if(0!==t){const e=this.times;for(let i=0,n=e.length;i!==n;++i)e[i]+=t}return this}scale(t){if(1!==t){const e=this.times;for(let i=0,n=e.length;i!==n;++i)e[i]*=t}return this}trim(t,e){const n=this.times,r=n.length;let o=0,l=r-1;for(;o!==r&&n[o]<t;)++o;for(;-1!==l&&n[l]>e;)--l;if(++l,0!==o||l!==r){o>=l&&(l=Math.max(l,1),o=l-1);const t=this.getValueSize();this.times=n.slice(o,l),this.values=this.values.slice(o*t,l*t)}return this}validate(){let t=!0;const e=this.getValueSize();e-Math.floor(e)!=0&&(console.error("THREE.KeyframeTrack: Invalid value size in track.",this),t=!1);const n=this.times,r=this.values,o=n.length;0===o&&(console.error("THREE.KeyframeTrack: Track is empty.",this),t=!1);let l=null;for(let i=0;i!==o;i++){const e=n[i];if("number"==typeof e&&isNaN(e)){console.error("THREE.KeyframeTrack: Time is not a valid number.",this,i,e),t=!1;break}if(null!==l&&l>e){console.error("THREE.KeyframeTrack: Out of order keys.",this,i,e,l),t=!1;break}l=e}if(void 0!==r&&Wd(r))for(let i=0,e=r.length;i!==e;++i){const e=r[i];if(isNaN(e)){console.error("THREE.KeyframeTrack: Value is not a valid number.",this,i,e),t=!1;break}}return t}optimize(){const t=this.times.slice(),e=this.values.slice(),n=this.getValueSize(),r=this.getInterpolation()===qe,o=t.length-1;let l=1;for(let i=1;i<o;++i){let o=!1;const time=t[i];if(time!==t[i+1]&&(1!==i||time!==t[0]))if(r)o=!0;else{const t=i*n,r=t-n,l=t+n;for(let c=0;c!==n;++c){const n=e[t+c];if(n!==e[r+c]||n!==e[l+c]){o=!0;break}}}if(o){if(i!==l){t[l]=t[i];const r=i*n,o=l*n;for(let t=0;t!==n;++t)e[o+t]=e[r+t]}++l}}if(o>0){t[l]=t[o];for(let t=o*n,r=l*n,c=0;c!==n;++c)e[r+c]=e[t+c];++l}return l!==t.length?(this.times=t.slice(0,l),this.values=e.slice(0,l*n)):(this.times=t,this.values=e),this}clone(){const t=this.times.slice(),e=this.values.slice(),track=new(0,this.constructor)(this.name,t,e);return track.createInterpolant=this.createInterpolant,track}}Qd.prototype.TimeBufferType=Float32Array,Qd.prototype.ValueBufferType=Float32Array,Qd.prototype.DefaultInterpolation=je;class tp extends Qd{constructor(t,e,n){super(t,e,n)}}tp.prototype.ValueTypeName="bool",tp.prototype.ValueBufferType=Array,tp.prototype.DefaultInterpolation=Xe,tp.prototype.InterpolantFactoryMethodLinear=void 0,tp.prototype.InterpolantFactoryMethodSmooth=void 0;class ep extends Qd{}ep.prototype.ValueTypeName="color";class np extends Qd{}np.prototype.ValueTypeName="number";class ip extends Zd{constructor(t,e,n,r){super(t,e,n,r)}interpolate_(t,e,n,r){const o=this.resultBuffer,l=this.sampleValues,c=this.valueSize,h=(n-e)/(r-e);let d=t*c;for(let t=d+c;d!==t;d+=4)Hi.slerpFlat(o,0,l,d-c,l,d,h);return o}}class sp extends Qd{InterpolantFactoryMethodLinear(t){return new ip(this.times,this.values,this.getValueSize(),t)}}sp.prototype.ValueTypeName="quaternion",sp.prototype.InterpolantFactoryMethodSmooth=void 0;class ap extends Qd{constructor(t,e,n){super(t,e,n)}}ap.prototype.ValueTypeName="string",ap.prototype.ValueBufferType=Array,ap.prototype.DefaultInterpolation=Xe,ap.prototype.InterpolantFactoryMethodLinear=void 0,ap.prototype.InterpolantFactoryMethodSmooth=void 0;class op extends Qd{}op.prototype.ValueTypeName="vector";class lp{constructor(t="",e=-1,n=[],r=Ke){this.name=t,this.tracks=n,this.duration=e,this.blendMode=r,this.uuid=ni(),this.duration<0&&this.resetDuration()}static parse(t){const e=[],n=t.tracks,r=1/(t.fps||1);for(let i=0,t=n.length;i!==t;++i)e.push(cp(n[i]).scale(r));const o=new this(t.name,t.duration,e,t.blendMode);return o.uuid=t.uuid,o}static toJSON(t){const e=[],n=t.tracks,r={name:t.name,duration:t.duration,tracks:e,uuid:t.uuid,blendMode:t.blendMode};for(let i=0,t=n.length;i!==t;++i)e.push(Qd.toJSON(n[i]));return r}static CreateFromMorphTargetSequence(t,e,n,r){const o=e.length,l=[];for(let i=0;i<o;i++){let t=[],c=[];t.push((i+o-1)%o,i,(i+1)%o),c.push(0,1,0);const h=Xd(t);t=jd(t,1,h),c=jd(c,1,h),r||0!==t[0]||(t.push(o),c.push(c[0])),l.push(new np(".morphTargetInfluences["+e[i].name+"]",t,c).scale(1/n))}return new this(t,-1,l)}static findByName(t,e){let n=t;if(!Array.isArray(t)){const e=t;n=e.geometry&&e.geometry.animations||e.animations}for(let i=0;i<n.length;i++)if(n[i].name===e)return n[i];return null}static CreateClipsFromMorphTargetSequences(t,e,n){const r={},pattern=/^([\w-]*?)([\d]+)$/;for(let i=0,e=t.length;i<e;i++){const e=t[i],n=e.name.match(pattern);if(n&&n.length>1){const t=n[1];let o=r[t];o||(r[t]=o=[]),o.push(e)}}const o=[];for(const t in r)o.push(this.CreateFromMorphTargetSequence(t,r[t],e,n));return o}static parseAnimation(t,e){if(!t)return console.error("THREE.AnimationClip: No animation in JSONLoader data."),null;const n=function(t,e,n,r,o){if(0!==n.length){const l=[],c=[];qd(n,l,c,r),0!==l.length&&o.push(new t(e,l,c))}},r=[],o=t.name||"default",l=t.fps||30,c=t.blendMode;let h=t.length||-1;const d=t.hierarchy||[];for(let t=0;t<d.length;t++){const o=d[t].keys;if(o&&0!==o.length)if(o[0].morphTargets){const t={};let e;for(e=0;e<o.length;e++)if(o[e].morphTargets)for(let n=0;n<o[e].morphTargets.length;n++)t[o[e].morphTargets[n]]=-1;for(const n in t){const t=[],l=[];for(let r=0;r!==o[e].morphTargets.length;++r){const r=o[e];t.push(r.time),l.push(r.morphTarget===n?1:0)}r.push(new np(".morphTargetInfluence["+n+"]",t,l))}h=t.length*l}else{const l=".bones["+e[t].name+"]";n(op,l+".position",o,"pos",r),n(sp,l+".quaternion",o,"rot",r),n(op,l+".scale",o,"scl",r)}}if(0===r.length)return null;return new this(o,h,r,c)}resetDuration(){let t=0;for(let i=0,e=this.tracks.length;i!==e;++i){const track=this.tracks[i];t=Math.max(t,track.times[track.times.length-1])}return this.duration=t,this}trim(){for(let i=0;i<this.tracks.length;i++)this.tracks[i].trim(0,this.duration);return this}validate(){let t=!0;for(let i=0;i<this.tracks.length;i++)t=t&&this.tracks[i].validate();return t}optimize(){for(let i=0;i<this.tracks.length;i++)this.tracks[i].optimize();return this}clone(){const t=[];for(let i=0;i<this.tracks.length;i++)t.push(this.tracks[i].clone());return new this.constructor(this.name,this.duration,t,this.blendMode)}toJSON(){return this.constructor.toJSON(this)}}function cp(t){if(void 0===t.type)throw new Error("THREE.KeyframeTrack: track type undefined, can not parse");const e=function(t){switch(t.toLowerCase()){case"scalar":case"double":case"float":case"number":case"integer":return np;case"vector":case"vector2":case"vector3":case"vector4":return op;case"color":return ep;case"quaternion":return sp;case"bool":case"boolean":return tp;case"string":return ap}throw new Error("THREE.KeyframeTrack: Unsupported typeName: "+t)}(t.type);if(void 0===t.times){const e=[],n=[];qd(t.keys,e,n,"value"),t.times=e,t.values=n}return void 0!==e.parse?e.parse(t):new e(t.name,t.times,t.values,t.interpolation)}const hp={enabled:!1,files:{},add:function(t,e){!1!==this.enabled&&(this.files[t]=e)},get:function(t){if(!1!==this.enabled)return this.files[t]},remove:function(t){delete this.files[t]},clear:function(){this.files={}}};class up{constructor(t,e,n){const r=this;let o,l=!1,c=0,h=0;const d=[];this.onStart=void 0,this.onLoad=t,this.onProgress=e,this.onError=n,this.itemStart=function(t){h++,!1===l&&void 0!==r.onStart&&r.onStart(t,c,h),l=!0},this.itemEnd=function(t){c++,void 0!==r.onProgress&&r.onProgress(t,c,h),c===h&&(l=!1,void 0!==r.onLoad&&r.onLoad())},this.itemError=function(t){void 0!==r.onError&&r.onError(t)},this.resolveURL=function(t){return o?o(t):t},this.setURLModifier=function(t){return o=t,this},this.addHandler=function(t,e){return d.push(t,e),this},this.removeHandler=function(t){const e=d.indexOf(t);return-1!==e&&d.splice(e,2),this},this.getHandler=function(t){for(let i=0,e=d.length;i<e;i+=2){const e=d[i],n=d[i+1];if(e.global&&(e.lastIndex=0),e.test(t))return n}return null}}}const dp=new up;class pp{constructor(t){this.manager=void 0!==t?t:dp,this.crossOrigin="anonymous",this.withCredentials=!1,this.path="",this.resourcePath="",this.requestHeader={}}load(){}loadAsync(t,e){const n=this;return new Promise((function(r,o){n.load(t,r,e,o)}))}parse(){}setCrossOrigin(t){return this.crossOrigin=t,this}setWithCredentials(t){return this.withCredentials=t,this}setPath(path){return this.path=path,this}setResourcePath(t){return this.resourcePath=t,this}setRequestHeader(t){return this.requestHeader=t,this}}pp.DEFAULT_MATERIAL_NAME="__DEFAULT";const fp={};class mp extends Error{constructor(t,e){super(t),this.response=e}}class gp extends pp{constructor(t){super(t)}load(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const o=hp.get(t);if(void 0!==o)return this.manager.itemStart(t),setTimeout((()=>{e&&e(o),this.manager.itemEnd(t)}),0),o;if(void 0!==fp[t])return void fp[t].push({onLoad:e,onProgress:n,onError:r});fp[t]=[],fp[t].push({onLoad:e,onProgress:n,onError:r});const l=new Request(t,{headers:new Headers(this.requestHeader),credentials:this.withCredentials?"include":"same-origin"}),c=this.mimeType,h=this.responseType;fetch(l).then((e=>{if(200===e.status||0===e.status){if(0===e.status&&console.warn("THREE.FileLoader: HTTP Status 0 received."),"undefined"==typeof ReadableStream||void 0===e.body||void 0===e.body.getReader)return e;const n=fp[t],r=e.body.getReader(),o=e.headers.get("X-File-Size")||e.headers.get("Content-Length"),l=o?parseInt(o):0,c=0!==l;let h=0;const d=new ReadableStream({start(t){!function e(){r.read().then((({done:r,value:o})=>{if(r)t.close();else{h+=o.byteLength;const r=new ProgressEvent("progress",{lengthComputable:c,loaded:h,total:l});for(let i=0,t=n.length;i<t;i++){const t=n[i];t.onProgress&&t.onProgress(r)}t.enqueue(o),e()}}),(e=>{t.error(e)}))}()}});return new Response(d)}throw new mp(`fetch for "${e.url}" responded with ${e.status}: ${e.statusText}`,e)})).then((t=>{switch(h){case"arraybuffer":return t.arrayBuffer();case"blob":return t.blob();case"document":return t.text().then((text=>(new DOMParser).parseFromString(text,c)));case"json":return t.json();default:if(void 0===c)return t.text();{const e=/charset="?([^;"\s]*)"?/i.exec(c),label=e&&e[1]?e[1].toLowerCase():void 0,n=new TextDecoder(label);return t.arrayBuffer().then((t=>n.decode(t)))}}})).then((data=>{hp.add(t,data);const e=fp[t];delete fp[t];for(let i=0,t=e.length;i<t;i++){const t=e[i];t.onLoad&&t.onLoad(data)}})).catch((e=>{const n=fp[t];if(void 0===n)throw this.manager.itemError(t),e;delete fp[t];for(let i=0,t=n.length;i<t;i++){const t=n[i];t.onError&&t.onError(e)}this.manager.itemError(t)})).finally((()=>{this.manager.itemEnd(t)})),this.manager.itemStart(t)}setResponseType(t){return this.responseType=t,this}setMimeType(t){return this.mimeType=t,this}}class _p extends pp{constructor(t){super(t)}load(t,e,n,r){const o=this,l=new gp(this.manager);l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(t,(function(text){try{e(o.parse(JSON.parse(text)))}catch(e){r?r(e):console.error(e),o.manager.itemError(t)}}),n,r)}parse(t){const e=[];for(let i=0;i<t.length;i++){const n=lp.parse(t[i]);e.push(n)}return e}}class vp extends pp{constructor(t){super(t)}load(t,e,n,r){const o=this,l=[],c=new su,h=new gp(this.manager);h.setPath(this.path),h.setResponseType("arraybuffer"),h.setRequestHeader(this.requestHeader),h.setWithCredentials(o.withCredentials);let d=0;function f(i){h.load(t[i],(function(t){const n=o.parse(t,!0);l[i]={width:n.width,height:n.height,format:n.format,mipmaps:n.mipmaps},d+=1,6===d&&(1===n.mipmapCount&&(c.minFilter=Dt),c.image=l,c.format=n.format,c.needsUpdate=!0,e&&e(c))}),n,r)}if(Array.isArray(t))for(let i=0,e=t.length;i<e;++i)f(i);else h.load(t,(function(t){const n=o.parse(t,!0);if(n.isCubemap){const t=n.mipmaps.length/n.mipmapCount;for(let e=0;e<t;e++){l[e]={mipmaps:[]};for(let i=0;i<n.mipmapCount;i++)l[e].mipmaps.push(n.mipmaps[e*n.mipmapCount+i]),l[e].format=n.format,l[e].width=n.width,l[e].height=n.height}c.image=l}else c.image.width=n.width,c.image.height=n.height,c.mipmaps=n.mipmaps;1===n.mipmapCount&&(c.minFilter=Dt),c.format=n.format,c.needsUpdate=!0,e&&e(c)}),n,r);return c}}class xp extends pp{constructor(t){super(t)}load(t,e,n,r){void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const o=this,l=hp.get(t);if(void 0!==l)return o.manager.itemStart(t),setTimeout((function(){e&&e(l),o.manager.itemEnd(t)}),0),l;const image=gi("img");function c(){d(),hp.add(t,this),e&&e(this),o.manager.itemEnd(t)}function h(e){d(),r&&r(e),o.manager.itemError(t),o.manager.itemEnd(t)}function d(){image.removeEventListener("load",c,!1),image.removeEventListener("error",h,!1)}return image.addEventListener("load",c,!1),image.addEventListener("error",h,!1),"data:"!==t.slice(0,5)&&void 0!==this.crossOrigin&&(image.crossOrigin=this.crossOrigin),o.manager.itemStart(t),image.src=t,image}}class yp extends pp{constructor(t){super(t)}load(t,e,n,r){const o=new ga;o.colorSpace=hn;const l=new xp(this.manager);l.setCrossOrigin(this.crossOrigin),l.setPath(this.path);let c=0;function h(i){l.load(t[i],(function(image){o.images[i]=image,c++,6===c&&(o.needsUpdate=!0,e&&e(o))}),void 0,r)}for(let i=0;i<t.length;++i)h(i);return o}}class Mp extends pp{constructor(t){super(t)}load(t,e,n,r){const o=this,l=new sh,c=new gp(this.manager);return c.setResponseType("arraybuffer"),c.setRequestHeader(this.requestHeader),c.setPath(this.path),c.setWithCredentials(o.withCredentials),c.load(t,(function(t){let n;try{n=o.parse(t)}catch(t){if(void 0===r)return void console.error(t);r(t)}void 0!==n.image?l.image=n.image:void 0!==n.data&&(l.image.width=n.width,l.image.height=n.height,l.image.data=n.data),l.wrapS=void 0!==n.wrapS?n.wrapS:At,l.wrapT=void 0!==n.wrapT?n.wrapT:At,l.magFilter=void 0!==n.magFilter?n.magFilter:Dt,l.minFilter=void 0!==n.minFilter?n.minFilter:Dt,l.anisotropy=void 0!==n.anisotropy?n.anisotropy:1,void 0!==n.colorSpace&&(l.colorSpace=n.colorSpace),void 0!==n.flipY&&(l.flipY=n.flipY),void 0!==n.format&&(l.format=n.format),void 0!==n.type&&(l.type=n.type),void 0!==n.mipmaps&&(l.mipmaps=n.mipmaps,l.minFilter=Ft),1===n.mipmapCount&&(l.minFilter=Dt),void 0!==n.generateMipmaps&&(l.generateMipmaps=n.generateMipmaps),l.needsUpdate=!0,e&&e(l,n)}),n,r),l}}class Sp extends pp{constructor(t){super(t)}load(t,e,n,r){const o=new Di,l=new xp(this.manager);return l.setCrossOrigin(this.crossOrigin),l.setPath(this.path),l.load(t,(function(image){o.image=image,o.needsUpdate=!0,void 0!==e&&e(o)}),n,r),o}}class bp extends Zr{constructor(t,e=1){super(),this.isLight=!0,this.type="Light",this.color=new fs(t),this.intensity=e}dispose(){}copy(source,t){return super.copy(source,t),this.color.copy(source.color),this.intensity=source.intensity,this}toJSON(meta){const data=super.toJSON(meta);return data.object.color=this.color.getHex(),data.object.intensity=this.intensity,void 0!==this.groundColor&&(data.object.groundColor=this.groundColor.getHex()),void 0!==this.distance&&(data.object.distance=this.distance),void 0!==this.angle&&(data.object.angle=this.angle),void 0!==this.decay&&(data.object.decay=this.decay),void 0!==this.penumbra&&(data.object.penumbra=this.penumbra),void 0!==this.shadow&&(data.object.shadow=this.shadow.toJSON()),void 0!==this.target&&(data.object.target=this.target.uuid),data}}class Tp extends bp{constructor(t,e,n){super(t,n),this.isHemisphereLight=!0,this.type="HemisphereLight",this.position.copy(Zr.DEFAULT_UP),this.updateMatrix(),this.groundColor=new fs(e)}copy(source,t){return super.copy(source,t),this.groundColor.copy(source.groundColor),this}}const wp=new Mr,Ep=new Gi,Ap=new Gi;class Cp{constructor(t){this.camera=t,this.intensity=1,this.bias=0,this.normalBias=0,this.radius=1,this.blurSamples=8,this.mapSize=new hi(512,512),this.map=null,this.mapPass=null,this.matrix=new Mr,this.autoUpdate=!0,this.needsUpdate=!1,this._frustum=new Ta,this._frameExtents=new hi(1,1),this._viewportCount=1,this._viewports=[new Ni(0,0,1,1)]}getViewportCount(){return this._viewportCount}getFrustum(){return this._frustum}updateMatrices(t){const e=this.camera,n=this.matrix;Ep.setFromMatrixPosition(t.matrixWorld),e.position.copy(Ep),Ap.setFromMatrixPosition(t.target.matrixWorld),e.lookAt(Ap),e.updateMatrixWorld(),wp.multiplyMatrices(e.projectionMatrix,e.matrixWorldInverse),this._frustum.setFromProjectionMatrix(wp),n.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),n.multiply(wp)}getViewport(t){return this._viewports[t]}getFrameExtents(){return this._frameExtents}dispose(){this.map&&this.map.dispose(),this.mapPass&&this.mapPass.dispose()}copy(source){return this.camera=source.camera.clone(),this.intensity=source.intensity,this.bias=source.bias,this.radius=source.radius,this.mapSize.copy(source.mapSize),this}clone(){return(new this.constructor).copy(this)}toJSON(){const object={};return 1!==this.intensity&&(object.intensity=this.intensity),0!==this.bias&&(object.bias=this.bias),0!==this.normalBias&&(object.normalBias=this.normalBias),1!==this.radius&&(object.radius=this.radius),512===this.mapSize.x&&512===this.mapSize.y||(object.mapSize=this.mapSize.toArray()),object.camera=this.camera.toJSON(!1).object,delete object.camera.matrix,object}}class Rp extends Cp{constructor(){super(new pa(50,1,.5,500)),this.isSpotLightShadow=!0,this.focus=1}updateMatrices(t){const e=this.camera,n=2*ei*t.angle*this.focus,r=this.mapSize.width/this.mapSize.height,o=t.distance||e.far;n===e.fov&&r===e.aspect&&o===e.far||(e.fov=n,e.aspect=r,e.far=o,e.updateProjectionMatrix()),super.updateMatrices(t)}copy(source){return super.copy(source),this.focus=source.focus,this}}class Pp extends bp{constructor(t,e,n=0,r=Math.PI/3,o=0,l=2){super(t,e),this.isSpotLight=!0,this.type="SpotLight",this.position.copy(Zr.DEFAULT_UP),this.updateMatrix(),this.target=new Zr,this.distance=n,this.angle=r,this.penumbra=o,this.decay=l,this.map=null,this.shadow=new Rp}get power(){return this.intensity*Math.PI}set power(t){this.intensity=t/Math.PI}dispose(){this.shadow.dispose()}copy(source,t){return super.copy(source,t),this.distance=source.distance,this.angle=source.angle,this.penumbra=source.penumbra,this.decay=source.decay,this.target=source.target.clone(),this.shadow=source.shadow.clone(),this}}const Ip=new Mr,Lp=new Gi,Up=new Gi;class Dp extends Cp{constructor(){super(new pa(90,1,.5,500)),this.isPointLightShadow=!0,this._frameExtents=new hi(4,2),this._viewportCount=6,this._viewports=[new Ni(2,1,1,1),new Ni(0,1,1,1),new Ni(3,1,1,1),new Ni(1,1,1,1),new Ni(3,0,1,1),new Ni(1,0,1,1)],this._cubeDirections=[new Gi(1,0,0),new Gi(-1,0,0),new Gi(0,0,1),new Gi(0,0,-1),new Gi(0,1,0),new Gi(0,-1,0)],this._cubeUps=[new Gi(0,1,0),new Gi(0,1,0),new Gi(0,1,0),new Gi(0,1,0),new Gi(0,0,1),new Gi(0,0,-1)]}updateMatrices(t,e=0){const n=this.camera,r=this.matrix,o=t.distance||n.far;o!==n.far&&(n.far=o,n.updateProjectionMatrix()),Lp.setFromMatrixPosition(t.matrixWorld),n.position.copy(Lp),Up.copy(n.position),Up.add(this._cubeDirections[e]),n.up.copy(this._cubeUps[e]),n.lookAt(Up),n.updateMatrixWorld(),r.makeTranslation(-Lp.x,-Lp.y,-Lp.z),Ip.multiplyMatrices(n.projectionMatrix,n.matrixWorldInverse),this._frustum.setFromProjectionMatrix(Ip)}}class Np extends bp{constructor(t,e,n=0,r=2){super(t,e),this.isPointLight=!0,this.type="PointLight",this.distance=n,this.decay=r,this.shadow=new Dp}get power(){return 4*this.intensity*Math.PI}set power(t){this.intensity=t/(4*Math.PI)}dispose(){this.shadow.dispose()}copy(source,t){return super.copy(source,t),this.distance=source.distance,this.decay=source.decay,this.shadow=source.shadow.clone(),this}}class Op extends Cp{constructor(){super(new ka(-5,5,5,-5,.5,500)),this.isDirectionalLightShadow=!0}}class Fp extends bp{constructor(t,e){super(t,e),this.isDirectionalLight=!0,this.type="DirectionalLight",this.position.copy(Zr.DEFAULT_UP),this.updateMatrix(),this.target=new Zr,this.shadow=new Op}dispose(){this.shadow.dispose()}copy(source){return super.copy(source),this.target=source.target.clone(),this.shadow=source.shadow.clone(),this}}class Bp extends bp{constructor(t,e){super(t,e),this.isAmbientLight=!0,this.type="AmbientLight"}}class zp extends bp{constructor(t,e,n=10,r=10){super(t,e),this.isRectAreaLight=!0,this.type="RectAreaLight",this.width=n,this.height=r}get power(){return this.intensity*this.width*this.height*Math.PI}set power(t){this.intensity=t/(this.width*this.height*Math.PI)}copy(source){return super.copy(source),this.width=source.width,this.height=source.height,this}toJSON(meta){const data=super.toJSON(meta);return data.object.width=this.width,data.object.height=this.height,data}}class kp{constructor(){this.isSphericalHarmonics3=!0,this.coefficients=[];for(let i=0;i<9;i++)this.coefficients.push(new Gi)}set(t){for(let i=0;i<9;i++)this.coefficients[i].copy(t[i]);return this}zero(){for(let i=0;i<9;i++)this.coefficients[i].set(0,0,0);return this}getAt(t,e){const n=t.x,r=t.y,o=t.z,l=this.coefficients;return e.copy(l[0]).multiplyScalar(.282095),e.addScaledVector(l[1],.488603*r),e.addScaledVector(l[2],.488603*o),e.addScaledVector(l[3],.488603*n),e.addScaledVector(l[4],n*r*1.092548),e.addScaledVector(l[5],r*o*1.092548),e.addScaledVector(l[6],.315392*(3*o*o-1)),e.addScaledVector(l[7],n*o*1.092548),e.addScaledVector(l[8],.546274*(n*n-r*r)),e}getIrradianceAt(t,e){const n=t.x,r=t.y,o=t.z,l=this.coefficients;return e.copy(l[0]).multiplyScalar(.886227),e.addScaledVector(l[1],1.023328*r),e.addScaledVector(l[2],1.023328*o),e.addScaledVector(l[3],1.023328*n),e.addScaledVector(l[4],.858086*n*r),e.addScaledVector(l[5],.858086*r*o),e.addScaledVector(l[6],.743125*o*o-.247708),e.addScaledVector(l[7],.858086*n*o),e.addScaledVector(l[8],.429043*(n*n-r*r)),e}add(t){for(let i=0;i<9;i++)this.coefficients[i].add(t.coefficients[i]);return this}addScaledSH(t,s){for(let i=0;i<9;i++)this.coefficients[i].addScaledVector(t.coefficients[i],s);return this}scale(s){for(let i=0;i<9;i++)this.coefficients[i].multiplyScalar(s);return this}lerp(t,e){for(let i=0;i<9;i++)this.coefficients[i].lerp(t.coefficients[i],e);return this}equals(t){for(let i=0;i<9;i++)if(!this.coefficients[i].equals(t.coefficients[i]))return!1;return!0}copy(t){return this.set(t.coefficients)}clone(){return(new this.constructor).copy(this)}fromArray(t,e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].fromArray(t,e+3*i);return this}toArray(t=[],e=0){const n=this.coefficients;for(let i=0;i<9;i++)n[i].toArray(t,e+3*i);return t}static getBasisAt(t,e){const n=t.x,r=t.y,o=t.z;e[0]=.282095,e[1]=.488603*r,e[2]=.488603*o,e[3]=.488603*n,e[4]=1.092548*n*r,e[5]=1.092548*r*o,e[6]=.315392*(3*o*o-1),e[7]=1.092548*n*o,e[8]=.546274*(n*n-r*r)}}class Vp extends bp{constructor(t=new kp,e=1){super(void 0,e),this.isLightProbe=!0,this.sh=t}copy(source){return super.copy(source),this.sh.copy(source.sh),this}fromJSON(t){return this.intensity=t.intensity,this.sh.fromArray(t.sh),this}toJSON(meta){const data=super.toJSON(meta);return data.object.sh=this.sh.toArray(),data}}class Hp extends pp{constructor(t){super(t),this.textures={}}load(t,e,n,r){const o=this,l=new gp(o.manager);l.setPath(o.path),l.setRequestHeader(o.requestHeader),l.setWithCredentials(o.withCredentials),l.load(t,(function(text){try{e(o.parse(JSON.parse(text)))}catch(e){r?r(e):console.error(e),o.manager.itemError(t)}}),n,r)}parse(t){const e=this.textures;function n(t){return void 0===e[t]&&console.warn("THREE.MaterialLoader: Undefined texture",t),e[t]}const r=this.createMaterialFromType(t.type);if(void 0!==t.uuid&&(r.uuid=t.uuid),void 0!==t.name&&(r.name=t.name),void 0!==t.color&&void 0!==r.color&&r.color.setHex(t.color),void 0!==t.roughness&&(r.roughness=t.roughness),void 0!==t.metalness&&(r.metalness=t.metalness),void 0!==t.sheen&&(r.sheen=t.sheen),void 0!==t.sheenColor&&(r.sheenColor=(new fs).setHex(t.sheenColor)),void 0!==t.sheenRoughness&&(r.sheenRoughness=t.sheenRoughness),void 0!==t.emissive&&void 0!==r.emissive&&r.emissive.setHex(t.emissive),void 0!==t.specular&&void 0!==r.specular&&r.specular.setHex(t.specular),void 0!==t.specularIntensity&&(r.specularIntensity=t.specularIntensity),void 0!==t.specularColor&&void 0!==r.specularColor&&r.specularColor.setHex(t.specularColor),void 0!==t.shininess&&(r.shininess=t.shininess),void 0!==t.clearcoat&&(r.clearcoat=t.clearcoat),void 0!==t.clearcoatRoughness&&(r.clearcoatRoughness=t.clearcoatRoughness),void 0!==t.dispersion&&(r.dispersion=t.dispersion),void 0!==t.iridescence&&(r.iridescence=t.iridescence),void 0!==t.iridescenceIOR&&(r.iridescenceIOR=t.iridescenceIOR),void 0!==t.iridescenceThicknessRange&&(r.iridescenceThicknessRange=t.iridescenceThicknessRange),void 0!==t.transmission&&(r.transmission=t.transmission),void 0!==t.thickness&&(r.thickness=t.thickness),void 0!==t.attenuationDistance&&(r.attenuationDistance=t.attenuationDistance),void 0!==t.attenuationColor&&void 0!==r.attenuationColor&&r.attenuationColor.setHex(t.attenuationColor),void 0!==t.anisotropy&&(r.anisotropy=t.anisotropy),void 0!==t.anisotropyRotation&&(r.anisotropyRotation=t.anisotropyRotation),void 0!==t.fog&&(r.fog=t.fog),void 0!==t.flatShading&&(r.flatShading=t.flatShading),void 0!==t.blending&&(r.blending=t.blending),void 0!==t.combine&&(r.combine=t.combine),void 0!==t.side&&(r.side=t.side),void 0!==t.shadowSide&&(r.shadowSide=t.shadowSide),void 0!==t.opacity&&(r.opacity=t.opacity),void 0!==t.transparent&&(r.transparent=t.transparent),void 0!==t.alphaTest&&(r.alphaTest=t.alphaTest),void 0!==t.alphaHash&&(r.alphaHash=t.alphaHash),void 0!==t.depthFunc&&(r.depthFunc=t.depthFunc),void 0!==t.depthTest&&(r.depthTest=t.depthTest),void 0!==t.depthWrite&&(r.depthWrite=t.depthWrite),void 0!==t.colorWrite&&(r.colorWrite=t.colorWrite),void 0!==t.blendSrc&&(r.blendSrc=t.blendSrc),void 0!==t.blendDst&&(r.blendDst=t.blendDst),void 0!==t.blendEquation&&(r.blendEquation=t.blendEquation),void 0!==t.blendSrcAlpha&&(r.blendSrcAlpha=t.blendSrcAlpha),void 0!==t.blendDstAlpha&&(r.blendDstAlpha=t.blendDstAlpha),void 0!==t.blendEquationAlpha&&(r.blendEquationAlpha=t.blendEquationAlpha),void 0!==t.blendColor&&void 0!==r.blendColor&&r.blendColor.setHex(t.blendColor),void 0!==t.blendAlpha&&(r.blendAlpha=t.blendAlpha),void 0!==t.stencilWriteMask&&(r.stencilWriteMask=t.stencilWriteMask),void 0!==t.stencilFunc&&(r.stencilFunc=t.stencilFunc),void 0!==t.stencilRef&&(r.stencilRef=t.stencilRef),void 0!==t.stencilFuncMask&&(r.stencilFuncMask=t.stencilFuncMask),void 0!==t.stencilFail&&(r.stencilFail=t.stencilFail),void 0!==t.stencilZFail&&(r.stencilZFail=t.stencilZFail),void 0!==t.stencilZPass&&(r.stencilZPass=t.stencilZPass),void 0!==t.stencilWrite&&(r.stencilWrite=t.stencilWrite),void 0!==t.wireframe&&(r.wireframe=t.wireframe),void 0!==t.wireframeLinewidth&&(r.wireframeLinewidth=t.wireframeLinewidth),void 0!==t.wireframeLinecap&&(r.wireframeLinecap=t.wireframeLinecap),void 0!==t.wireframeLinejoin&&(r.wireframeLinejoin=t.wireframeLinejoin),void 0!==t.rotation&&(r.rotation=t.rotation),void 0!==t.linewidth&&(r.linewidth=t.linewidth),void 0!==t.dashSize&&(r.dashSize=t.dashSize),void 0!==t.gapSize&&(r.gapSize=t.gapSize),void 0!==t.scale&&(r.scale=t.scale),void 0!==t.polygonOffset&&(r.polygonOffset=t.polygonOffset),void 0!==t.polygonOffsetFactor&&(r.polygonOffsetFactor=t.polygonOffsetFactor),void 0!==t.polygonOffsetUnits&&(r.polygonOffsetUnits=t.polygonOffsetUnits),void 0!==t.dithering&&(r.dithering=t.dithering),void 0!==t.alphaToCoverage&&(r.alphaToCoverage=t.alphaToCoverage),void 0!==t.premultipliedAlpha&&(r.premultipliedAlpha=t.premultipliedAlpha),void 0!==t.forceSinglePass&&(r.forceSinglePass=t.forceSinglePass),void 0!==t.visible&&(r.visible=t.visible),void 0!==t.toneMapped&&(r.toneMapped=t.toneMapped),void 0!==t.userData&&(r.userData=t.userData),void 0!==t.vertexColors&&("number"==typeof t.vertexColors?r.vertexColors=t.vertexColors>0:r.vertexColors=t.vertexColors),void 0!==t.uniforms)for(const e in t.uniforms){const o=t.uniforms[e];switch(r.uniforms[e]={},o.type){case"t":r.uniforms[e].value=n(o.value);break;case"c":r.uniforms[e].value=(new fs).setHex(o.value);break;case"v2":r.uniforms[e].value=(new hi).fromArray(o.value);break;case"v3":r.uniforms[e].value=(new Gi).fromArray(o.value);break;case"v4":r.uniforms[e].value=(new Ni).fromArray(o.value);break;case"m3":r.uniforms[e].value=(new ui).fromArray(o.value);break;case"m4":r.uniforms[e].value=(new Mr).fromArray(o.value);break;default:r.uniforms[e].value=o.value}}if(void 0!==t.defines&&(r.defines=t.defines),void 0!==t.vertexShader&&(r.vertexShader=t.vertexShader),void 0!==t.fragmentShader&&(r.fragmentShader=t.fragmentShader),void 0!==t.glslVersion&&(r.glslVersion=t.glslVersion),void 0!==t.extensions)for(const e in t.extensions)r.extensions[e]=t.extensions[e];if(void 0!==t.lights&&(r.lights=t.lights),void 0!==t.clipping&&(r.clipping=t.clipping),void 0!==t.size&&(r.size=t.size),void 0!==t.sizeAttenuation&&(r.sizeAttenuation=t.sizeAttenuation),void 0!==t.map&&(r.map=n(t.map)),void 0!==t.matcap&&(r.matcap=n(t.matcap)),void 0!==t.alphaMap&&(r.alphaMap=n(t.alphaMap)),void 0!==t.bumpMap&&(r.bumpMap=n(t.bumpMap)),void 0!==t.bumpScale&&(r.bumpScale=t.bumpScale),void 0!==t.normalMap&&(r.normalMap=n(t.normalMap)),void 0!==t.normalMapType&&(r.normalMapType=t.normalMapType),void 0!==t.normalScale){let e=t.normalScale;!1===Array.isArray(e)&&(e=[e,e]),r.normalScale=(new hi).fromArray(e)}return void 0!==t.displacementMap&&(r.displacementMap=n(t.displacementMap)),void 0!==t.displacementScale&&(r.displacementScale=t.displacementScale),void 0!==t.displacementBias&&(r.displacementBias=t.displacementBias),void 0!==t.roughnessMap&&(r.roughnessMap=n(t.roughnessMap)),void 0!==t.metalnessMap&&(r.metalnessMap=n(t.metalnessMap)),void 0!==t.emissiveMap&&(r.emissiveMap=n(t.emissiveMap)),void 0!==t.emissiveIntensity&&(r.emissiveIntensity=t.emissiveIntensity),void 0!==t.specularMap&&(r.specularMap=n(t.specularMap)),void 0!==t.specularIntensityMap&&(r.specularIntensityMap=n(t.specularIntensityMap)),void 0!==t.specularColorMap&&(r.specularColorMap=n(t.specularColorMap)),void 0!==t.envMap&&(r.envMap=n(t.envMap)),void 0!==t.envMapRotation&&r.envMapRotation.fromArray(t.envMapRotation),void 0!==t.envMapIntensity&&(r.envMapIntensity=t.envMapIntensity),void 0!==t.reflectivity&&(r.reflectivity=t.reflectivity),void 0!==t.refractionRatio&&(r.refractionRatio=t.refractionRatio),void 0!==t.lightMap&&(r.lightMap=n(t.lightMap)),void 0!==t.lightMapIntensity&&(r.lightMapIntensity=t.lightMapIntensity),void 0!==t.aoMap&&(r.aoMap=n(t.aoMap)),void 0!==t.aoMapIntensity&&(r.aoMapIntensity=t.aoMapIntensity),void 0!==t.gradientMap&&(r.gradientMap=n(t.gradientMap)),void 0!==t.clearcoatMap&&(r.clearcoatMap=n(t.clearcoatMap)),void 0!==t.clearcoatRoughnessMap&&(r.clearcoatRoughnessMap=n(t.clearcoatRoughnessMap)),void 0!==t.clearcoatNormalMap&&(r.clearcoatNormalMap=n(t.clearcoatNormalMap)),void 0!==t.clearcoatNormalScale&&(r.clearcoatNormalScale=(new hi).fromArray(t.clearcoatNormalScale)),void 0!==t.iridescenceMap&&(r.iridescenceMap=n(t.iridescenceMap)),void 0!==t.iridescenceThicknessMap&&(r.iridescenceThicknessMap=n(t.iridescenceThicknessMap)),void 0!==t.transmissionMap&&(r.transmissionMap=n(t.transmissionMap)),void 0!==t.thicknessMap&&(r.thicknessMap=n(t.thicknessMap)),void 0!==t.anisotropyMap&&(r.anisotropyMap=n(t.anisotropyMap)),void 0!==t.sheenColorMap&&(r.sheenColorMap=n(t.sheenColorMap)),void 0!==t.sheenRoughnessMap&&(r.sheenRoughnessMap=n(t.sheenRoughnessMap)),r}setTextures(t){return this.textures=t,this}createMaterialFromType(t){return Hp.createMaterialFromType(t)}static createMaterialFromType(t){return new{ShadowMaterial:Ud,SpriteMaterial:Cc,RawShaderMaterial:Dd,ShaderMaterial:la,PointsMaterial:Jh,MeshPhysicalMaterial:Od,MeshStandardMaterial:Nd,MeshPhongMaterial:Fd,MeshToonMaterial:Bd,MeshNormalMaterial:zd,MeshLambertMaterial:kd,MeshDepthMaterial:nc,MeshDistanceMaterial:ic,MeshBasicMaterial:vs,MeshMatcapMaterial:Vd,LineDashedMaterial:Hd,LineBasicMaterial:Oh,Material:_s}[t]}}class Gp{static decodeText(t){if(console.warn("THREE.LoaderUtils: decodeText() has been deprecated with r165 and will be removed with r175. Use TextDecoder instead."),"undefined"!=typeof TextDecoder)return(new TextDecoder).decode(t);let s="";for(let i=0,e=t.length;i<e;i++)s+=String.fromCharCode(t[i]);try{return decodeURIComponent(escape(s))}catch(t){return s}}static extractUrlBase(t){const e=t.lastIndexOf("/");return-1===e?"./":t.slice(0,e+1)}static resolveURL(t,path){return"string"!=typeof t||""===t?"":(/^https?:\/\//i.test(path)&&/^\//.test(t)&&(path=path.replace(/(^https?:\/\/[^\/]+).*/i,"$1")),/^(https?:)?\/\//i.test(t)||/^data:.*,.*$/i.test(t)||/^blob:.*$/i.test(t)?t:path+t)}}class Wp extends Gs{constructor(){super(),this.isInstancedBufferGeometry=!0,this.type="InstancedBufferGeometry",this.instanceCount=1/0}copy(source){return super.copy(source),this.instanceCount=source.instanceCount,this}toJSON(){const data=super.toJSON();return data.instanceCount=this.instanceCount,data.isInstancedBufferGeometry=!0,data}}class Xp extends pp{constructor(t){super(t)}load(t,e,n,r){const o=this,l=new gp(o.manager);l.setPath(o.path),l.setRequestHeader(o.requestHeader),l.setWithCredentials(o.withCredentials),l.load(t,(function(text){try{e(o.parse(JSON.parse(text)))}catch(e){r?r(e):console.error(e),o.manager.itemError(t)}}),n,r)}parse(t){const e={},n={};function r(t,r){if(void 0!==e[r])return e[r];const o=t.interleavedBuffers[r],l=function(t,e){if(void 0!==n[e])return n[e];const r=t.arrayBuffers,o=r[e],l=new Uint32Array(o).buffer;return n[e]=l,l}(t,o.buffer),c=mi(o.type,l),h=new wc(c,o.stride);return h.uuid=o.uuid,e[r]=h,h}const o=t.isInstancedBufferGeometry?new Wp:new Gs,l=t.data.index;if(void 0!==l){const t=mi(l.type,l.array);o.setIndex(new Es(t,1))}const c=t.data.attributes;for(const e in c){const n=c[e];let l;if(n.isInterleavedBufferAttribute){const e=r(t.data,n.data);l=new Ac(e,n.itemSize,n.offset,n.normalized)}else{const t=mi(n.type,n.array);l=new(n.isInstancedBufferAttribute?ch:Es)(t,n.itemSize,n.normalized)}void 0!==n.name&&(l.name=n.name),void 0!==n.usage&&l.setUsage(n.usage),o.setAttribute(e,l)}const h=t.data.morphAttributes;if(h)for(const e in h){const n=h[e],l=[];for(let i=0,e=n.length;i<e;i++){const e=n[i];let o;if(e.isInterleavedBufferAttribute){const n=r(t.data,e.data);o=new Ac(n,e.itemSize,e.offset,e.normalized)}else{const t=mi(e.type,e.array);o=new Es(t,e.itemSize,e.normalized)}void 0!==e.name&&(o.name=e.name),l.push(o)}o.morphAttributes[e]=l}t.data.morphTargetsRelative&&(o.morphTargetsRelative=!0);const d=t.data.groups||t.data.drawcalls||t.data.offsets;if(void 0!==d)for(let i=0,t=d.length;i!==t;++i){const t=d[i];o.addGroup(t.start,t.count,t.materialIndex)}const f=t.data.boundingSphere;if(void 0!==f){const t=new Gi;void 0!==f.center&&t.fromArray(f.center),o.boundingSphere=new dr(t,f.radius)}return t.name&&(o.name=t.name),t.userData&&(o.userData=t.userData),o}}class jp extends pp{constructor(t){super(t)}load(t,e,n,r){const o=this,path=""===this.path?Gp.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||path;const l=new gp(this.manager);l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(t,(function(text){let n=null;try{n=JSON.parse(text)}catch(e){return void 0!==r&&r(e),void console.error("THREE:ObjectLoader: Can't parse "+t+".",e.message)}const l=n.metadata;if(void 0===l||void 0===l.type||"geometry"===l.type.toLowerCase())return void 0!==r&&r(new Error("THREE.ObjectLoader: Can't load "+t)),void console.error("THREE.ObjectLoader: Can't load "+t);o.parse(n,e)}),n,r)}async loadAsync(t,e){const path=""===this.path?Gp.extractUrlBase(t):this.path;this.resourcePath=this.resourcePath||path;const n=new gp(this.manager);n.setPath(this.path),n.setRequestHeader(this.requestHeader),n.setWithCredentials(this.withCredentials);const text=await n.loadAsync(t,e),r=JSON.parse(text),o=r.metadata;if(void 0===o||void 0===o.type||"geometry"===o.type.toLowerCase())throw new Error("THREE.ObjectLoader: Can't load "+t);return await this.parseAsync(r)}parse(t,e){const n=this.parseAnimations(t.animations),r=this.parseShapes(t.shapes),o=this.parseGeometries(t.geometries,r),l=this.parseImages(t.images,(function(){void 0!==e&&e(object)})),c=this.parseTextures(t.textures,l),h=this.parseMaterials(t.materials,c),object=this.parseObject(t.object,o,h,c,n),d=this.parseSkeletons(t.skeletons,object);if(this.bindSkeletons(object,d),this.bindLightTargets(object),void 0!==e){let t=!1;for(const e in l)if(l[e].data instanceof HTMLImageElement){t=!0;break}!1===t&&e(object)}return object}async parseAsync(t){const e=this.parseAnimations(t.animations),n=this.parseShapes(t.shapes),r=this.parseGeometries(t.geometries,n),o=await this.parseImagesAsync(t.images),l=this.parseTextures(t.textures,o),c=this.parseMaterials(t.materials,l),object=this.parseObject(t.object,r,c,l,e),h=this.parseSkeletons(t.skeletons,object);return this.bindSkeletons(object,h),this.bindLightTargets(object),object}parseShapes(t){const e={};if(void 0!==t)for(let i=0,n=t.length;i<n;i++){const n=(new Gu).fromJSON(t[i]);e[n.uuid]=n}return e}parseSkeletons(t,object){const e={},n={};if(object.traverse((function(t){t.isBone&&(n[t.uuid]=t)})),void 0!==t)for(let i=0,r=t.length;i<r;i++){const r=(new lh).fromJSON(t[i],n);e[r.uuid]=r}return e}parseGeometries(t,e){const n={};if(void 0!==t){const r=new Xp;for(let i=0,o=t.length;i<o;i++){let o;const data=t[i];switch(data.type){case"BufferGeometry":case"InstancedBufferGeometry":o=r.parse(data);break;default:data.type in Ld?o=Ld[data.type].fromJSON(data,e):console.warn(`THREE.ObjectLoader: Unsupported geometry type "${data.type}"`)}o.uuid=data.uuid,void 0!==data.name&&(o.name=data.name),void 0!==data.userData&&(o.userData=data.userData),n[data.uuid]=o}}return n}parseMaterials(t,e){const n={},r={};if(void 0!==t){const o=new Hp;o.setTextures(e);for(let i=0,e=t.length;i<e;i++){const data=t[i];void 0===n[data.uuid]&&(n[data.uuid]=o.parse(data)),r[data.uuid]=n[data.uuid]}}return r}parseAnimations(t){const e={};if(void 0!==t)for(let i=0;i<t.length;i++){const data=t[i],n=lp.parse(data);e[n.uuid]=n}return e}parseImages(t,e){const n=this,r={};let o;function l(image){if("string"==typeof image){const t=image;return function(t){return n.manager.itemStart(t),o.load(t,(function(){n.manager.itemEnd(t)}),void 0,(function(){n.manager.itemError(t),n.manager.itemEnd(t)}))}(/^(\/\/)|([a-z]+:(\/\/)?)/i.test(t)?t:n.resourcePath+t)}return image.data?{data:mi(image.type,image.data),width:image.width,height:image.height}:null}if(void 0!==t&&t.length>0){const n=new up(e);o=new xp(n),o.setCrossOrigin(this.crossOrigin);for(let i=0,e=t.length;i<e;i++){const image=t[i],e=image.url;if(Array.isArray(e)){const t=[];for(let n=0,r=e.length;n<r;n++){const r=l(e[n]);null!==r&&(r instanceof HTMLImageElement?t.push(r):t.push(new sh(r.data,r.width,r.height)))}r[image.uuid]=new Ii(t)}else{const t=l(image.url);r[image.uuid]=new Ii(t)}}}return r}async parseImagesAsync(t){const e=this,n={};let r;async function o(image){if("string"==typeof image){const t=image,path=/^(\/\/)|([a-z]+:(\/\/)?)/i.test(t)?t:e.resourcePath+t;return await r.loadAsync(path)}return image.data?{data:mi(image.type,image.data),width:image.width,height:image.height}:null}if(void 0!==t&&t.length>0){r=new xp(this.manager),r.setCrossOrigin(this.crossOrigin);for(let i=0,e=t.length;i<e;i++){const image=t[i],e=image.url;if(Array.isArray(e)){const t=[];for(let n=0,r=e.length;n<r;n++){const r=e[n],l=await o(r);null!==l&&(l instanceof HTMLImageElement?t.push(l):t.push(new sh(l.data,l.width,l.height)))}n[image.uuid]=new Ii(t)}else{const t=await o(image.url);n[image.uuid]=new Ii(t)}}}return n}parseTextures(t,e){function n(t,e){return"number"==typeof t?t:(console.warn("THREE.ObjectLoader.parseTexture: Constant should be in numeric form.",t),e[t])}const r={};if(void 0!==t)for(let i=0,o=t.length;i<o;i++){const data=t[i];void 0===data.image&&console.warn('THREE.ObjectLoader: No "image" specified for',data.uuid),void 0===e[data.image]&&console.warn("THREE.ObjectLoader: Undefined image",data.image);const source=e[data.image],image=source.data;let o;Array.isArray(image)?(o=new ga,6===image.length&&(o.needsUpdate=!0)):(o=image&&image.data?new sh:new Di,image&&(o.needsUpdate=!0)),o.source=source,o.uuid=data.uuid,void 0!==data.name&&(o.name=data.name),void 0!==data.mapping&&(o.mapping=n(data.mapping,qp)),void 0!==data.channel&&(o.channel=data.channel),void 0!==data.offset&&o.offset.fromArray(data.offset),void 0!==data.repeat&&o.repeat.fromArray(data.repeat),void 0!==data.center&&o.center.fromArray(data.center),void 0!==data.rotation&&(o.rotation=data.rotation),void 0!==data.wrap&&(o.wrapS=n(data.wrap[0],Yp),o.wrapT=n(data.wrap[1],Yp)),void 0!==data.format&&(o.format=data.format),void 0!==data.internalFormat&&(o.internalFormat=data.internalFormat),void 0!==data.type&&(o.type=data.type),void 0!==data.colorSpace&&(o.colorSpace=data.colorSpace),void 0!==data.minFilter&&(o.minFilter=n(data.minFilter,Zp)),void 0!==data.magFilter&&(o.magFilter=n(data.magFilter,Zp)),void 0!==data.anisotropy&&(o.anisotropy=data.anisotropy),void 0!==data.flipY&&(o.flipY=data.flipY),void 0!==data.generateMipmaps&&(o.generateMipmaps=data.generateMipmaps),void 0!==data.premultiplyAlpha&&(o.premultiplyAlpha=data.premultiplyAlpha),void 0!==data.unpackAlignment&&(o.unpackAlignment=data.unpackAlignment),void 0!==data.compareFunction&&(o.compareFunction=data.compareFunction),void 0!==data.userData&&(o.userData=data.userData),r[data.uuid]=o}return r}parseObject(data,t,e,n,r){let object,o,l;function c(e){return void 0===t[e]&&console.warn("THREE.ObjectLoader: Undefined geometry",e),t[e]}function h(t){if(void 0!==t){if(Array.isArray(t)){const n=[];for(let i=0,r=t.length;i<r;i++){const r=t[i];void 0===e[r]&&console.warn("THREE.ObjectLoader: Undefined material",r),n.push(e[r])}return n}return void 0===e[t]&&console.warn("THREE.ObjectLoader: Undefined material",t),e[t]}}function d(t){return void 0===n[t]&&console.warn("THREE.ObjectLoader: Undefined texture",t),n[t]}switch(data.type){case"Scene":object=new Tc,void 0!==data.background&&(Number.isInteger(data.background)?object.background=new fs(data.background):object.background=d(data.background)),void 0!==data.environment&&(object.environment=d(data.environment)),void 0!==data.fog&&("Fog"===data.fog.type?object.fog=new bc(data.fog.color,data.fog.near,data.fog.far):"FogExp2"===data.fog.type&&(object.fog=new Sc(data.fog.color,data.fog.density)),""!==data.fog.name&&(object.fog.name=data.fog.name)),void 0!==data.backgroundBlurriness&&(object.backgroundBlurriness=data.backgroundBlurriness),void 0!==data.backgroundIntensity&&(object.backgroundIntensity=data.backgroundIntensity),void 0!==data.backgroundRotation&&object.backgroundRotation.fromArray(data.backgroundRotation),void 0!==data.environmentIntensity&&(object.environmentIntensity=data.environmentIntensity),void 0!==data.environmentRotation&&object.environmentRotation.fromArray(data.environmentRotation);break;case"PerspectiveCamera":object=new pa(data.fov,data.aspect,data.near,data.far),void 0!==data.focus&&(object.focus=data.focus),void 0!==data.zoom&&(object.zoom=data.zoom),void 0!==data.filmGauge&&(object.filmGauge=data.filmGauge),void 0!==data.filmOffset&&(object.filmOffset=data.filmOffset),void 0!==data.view&&(object.view=Object.assign({},data.view));break;case"OrthographicCamera":object=new ka(data.left,data.right,data.top,data.bottom,data.near,data.far),void 0!==data.zoom&&(object.zoom=data.zoom),void 0!==data.view&&(object.view=Object.assign({},data.view));break;case"AmbientLight":object=new Bp(data.color,data.intensity);break;case"DirectionalLight":object=new Fp(data.color,data.intensity),object.target=data.target||"";break;case"PointLight":object=new Np(data.color,data.intensity,data.distance,data.decay);break;case"RectAreaLight":object=new zp(data.color,data.intensity,data.width,data.height);break;case"SpotLight":object=new Pp(data.color,data.intensity,data.distance,data.angle,data.penumbra,data.decay),object.target=data.target||"";break;case"HemisphereLight":object=new Tp(data.color,data.groundColor,data.intensity);break;case"LightProbe":object=(new Vp).fromJSON(data);break;case"SkinnedMesh":o=c(data.geometry),l=h(data.material),object=new ih(o,l),void 0!==data.bindMode&&(object.bindMode=data.bindMode),void 0!==data.bindMatrix&&object.bindMatrix.fromArray(data.bindMatrix),void 0!==data.skeleton&&(object.skeleton=data.skeleton);break;case"Mesh":o=c(data.geometry),l=h(data.material),object=new ea(o,l);break;case"InstancedMesh":o=c(data.geometry),l=h(data.material);const t=data.count,e=data.instanceMatrix,n=data.instanceColor;object=new _h(o,l,t),object.instanceMatrix=new ch(new Float32Array(e.array),16),void 0!==n&&(object.instanceColor=new ch(new Float32Array(n.array),n.itemSize));break;case"BatchedMesh":o=c(data.geometry),l=h(data.material),object=new Nh(data.maxInstanceCount,data.maxVertexCount,data.maxIndexCount,l),object.geometry=o,object.perObjectFrustumCulled=data.perObjectFrustumCulled,object.sortObjects=data.sortObjects,object._drawRanges=data.drawRanges,object._reservedRanges=data.reservedRanges,object._visibility=data.visibility,object._active=data.active,object._bounds=data.bounds.map((t=>{const e=new ji;e.min.fromArray(t.boxMin),e.max.fromArray(t.boxMax);const n=new dr;return n.radius=t.sphereRadius,n.center.fromArray(t.sphereCenter),{boxInitialized:t.boxInitialized,box:e,sphereInitialized:t.sphereInitialized,sphere:n}})),object._maxInstanceCount=data.maxInstanceCount,object._maxVertexCount=data.maxVertexCount,object._maxIndexCount=data.maxIndexCount,object._geometryInitialized=data.geometryInitialized,object._geometryCount=data.geometryCount,object._matricesTexture=d(data.matricesTexture.uuid),void 0!==data.colorsTexture&&(object._colorsTexture=d(data.colorsTexture.uuid));break;case"LOD":object=new jc;break;case"Line":object=new Wh(c(data.geometry),h(data.material));break;case"LineLoop":object=new Zh(c(data.geometry),h(data.material));break;case"LineSegments":object=new Yh(c(data.geometry),h(data.material));break;case"PointCloud":case"Points":object=new eu(c(data.geometry),h(data.material));break;case"Sprite":object=new Hc(h(data.material));break;case"Group":object=new dc;break;case"Bone":object=new rh;break;default:object=new Zr}if(object.uuid=data.uuid,void 0!==data.name&&(object.name=data.name),void 0!==data.matrix?(object.matrix.fromArray(data.matrix),void 0!==data.matrixAutoUpdate&&(object.matrixAutoUpdate=data.matrixAutoUpdate),object.matrixAutoUpdate&&object.matrix.decompose(object.position,object.quaternion,object.scale)):(void 0!==data.position&&object.position.fromArray(data.position),void 0!==data.rotation&&object.rotation.fromArray(data.rotation),void 0!==data.quaternion&&object.quaternion.fromArray(data.quaternion),void 0!==data.scale&&object.scale.fromArray(data.scale)),void 0!==data.up&&object.up.fromArray(data.up),void 0!==data.castShadow&&(object.castShadow=data.castShadow),void 0!==data.receiveShadow&&(object.receiveShadow=data.receiveShadow),data.shadow&&(void 0!==data.shadow.intensity&&(object.shadow.intensity=data.shadow.intensity),void 0!==data.shadow.bias&&(object.shadow.bias=data.shadow.bias),void 0!==data.shadow.normalBias&&(object.shadow.normalBias=data.shadow.normalBias),void 0!==data.shadow.radius&&(object.shadow.radius=data.shadow.radius),void 0!==data.shadow.mapSize&&object.shadow.mapSize.fromArray(data.shadow.mapSize),void 0!==data.shadow.camera&&(object.shadow.camera=this.parseObject(data.shadow.camera))),void 0!==data.visible&&(object.visible=data.visible),void 0!==data.frustumCulled&&(object.frustumCulled=data.frustumCulled),void 0!==data.renderOrder&&(object.renderOrder=data.renderOrder),void 0!==data.userData&&(object.userData=data.userData),void 0!==data.layers&&(object.layers.mask=data.layers),void 0!==data.children){const o=data.children;for(let i=0;i<o.length;i++)object.add(this.parseObject(o[i],t,e,n,r))}if(void 0!==data.animations){const t=data.animations;for(let i=0;i<t.length;i++){const e=t[i];object.animations.push(r[e])}}if("LOD"===data.type){void 0!==data.autoUpdate&&(object.autoUpdate=data.autoUpdate);const t=data.levels;for(let e=0;e<t.length;e++){const n=t[e],r=object.getObjectByProperty("uuid",n.object);void 0!==r&&object.addLevel(r,n.distance,n.hysteresis)}}return object}bindSkeletons(object,t){0!==Object.keys(t).length&&object.traverse((function(e){if(!0===e.isSkinnedMesh&&void 0!==e.skeleton){const n=t[e.skeleton];void 0===n?console.warn("THREE.ObjectLoader: No skeleton found with UUID:",e.skeleton):e.bind(n,e.bindMatrix)}}))}bindLightTargets(object){object.traverse((function(t){if(t.isDirectionalLight||t.isSpotLight){const e=t.target,n=object.getObjectByProperty("uuid",e);t.target=void 0!==n?n:new Zr}}))}}const qp={UVMapping:yt,CubeReflectionMapping:Mt,CubeRefractionMapping:St,EquirectangularReflectionMapping:bt,EquirectangularRefractionMapping:Tt,CubeUVReflectionMapping:wt},Yp={RepeatWrapping:Et,ClampToEdgeWrapping:At,MirroredRepeatWrapping:Ct},Zp={NearestFilter:Rt,NearestMipmapNearestFilter:Pt,NearestMipmapLinearFilter:Lt,LinearFilter:Dt,LinearMipmapNearestFilter:Nt,LinearMipmapLinearFilter:Ft};class Jp extends pp{constructor(t){super(t),this.isImageBitmapLoader=!0,"undefined"==typeof createImageBitmap&&console.warn("THREE.ImageBitmapLoader: createImageBitmap() not supported."),"undefined"==typeof fetch&&console.warn("THREE.ImageBitmapLoader: fetch() not supported."),this.options={premultiplyAlpha:"none"}}setOptions(t){return this.options=t,this}load(t,e,n,r){void 0===t&&(t=""),void 0!==this.path&&(t=this.path+t),t=this.manager.resolveURL(t);const o=this,l=hp.get(t);if(void 0!==l)return o.manager.itemStart(t),l.then?void l.then((n=>{e&&e(n),o.manager.itemEnd(t)})).catch((t=>{r&&r(t)})):(setTimeout((function(){e&&e(l),o.manager.itemEnd(t)}),0),l);const c={};c.credentials="anonymous"===this.crossOrigin?"same-origin":"include",c.headers=this.requestHeader;const h=fetch(t,c).then((function(t){return t.blob()})).then((function(t){return createImageBitmap(t,Object.assign(o.options,{colorSpaceConversion:"none"}))})).then((function(n){return hp.add(t,n),e&&e(n),o.manager.itemEnd(t),n})).catch((function(e){r&&r(e),hp.remove(t),o.manager.itemError(t),o.manager.itemEnd(t)}));hp.add(t,h),o.manager.itemStart(t)}}let Kp;class $p{static getContext(){return void 0===Kp&&(Kp=new(window.AudioContext||window.webkitAudioContext)),Kp}static setContext(t){Kp=t}}class Qp extends pp{constructor(t){super(t)}load(t,e,n,r){const o=this,l=new gp(this.manager);function c(e){r?r(e):console.error(e),o.manager.itemError(t)}l.setResponseType("arraybuffer"),l.setPath(this.path),l.setRequestHeader(this.requestHeader),l.setWithCredentials(this.withCredentials),l.load(t,(function(t){try{const n=t.slice(0);$p.getContext().decodeAudioData(n,(function(t){e(t)})).catch(c)}catch(t){c(t)}}),n,r)}}const tf=new Mr,ef=new Mr,nf=new Mr;class rf{constructor(){this.type="StereoCamera",this.aspect=1,this.eyeSep=.064,this.cameraL=new pa,this.cameraL.layers.enable(1),this.cameraL.matrixAutoUpdate=!1,this.cameraR=new pa,this.cameraR.layers.enable(2),this.cameraR.matrixAutoUpdate=!1,this._cache={focus:null,fov:null,aspect:null,near:null,far:null,zoom:null,eyeSep:null}}update(t){const e=this._cache;if(e.focus!==t.focus||e.fov!==t.fov||e.aspect!==t.aspect*this.aspect||e.near!==t.near||e.far!==t.far||e.zoom!==t.zoom||e.eyeSep!==this.eyeSep){e.focus=t.focus,e.fov=t.fov,e.aspect=t.aspect*this.aspect,e.near=t.near,e.far=t.far,e.zoom=t.zoom,e.eyeSep=this.eyeSep,nf.copy(t.projectionMatrix);const n=e.eyeSep/2,r=n*e.near/e.focus,o=e.near*Math.tan(ti*e.fov*.5)/e.zoom;let l,c;ef.elements[12]=-n,tf.elements[12]=n,l=-o*e.aspect+r,c=o*e.aspect+r,nf.elements[0]=2*e.near/(c-l),nf.elements[8]=(c+l)/(c-l),this.cameraL.projectionMatrix.copy(nf),l=-o*e.aspect-r,c=o*e.aspect-r,nf.elements[0]=2*e.near/(c-l),nf.elements[8]=(c+l)/(c-l),this.cameraR.projectionMatrix.copy(nf)}this.cameraL.matrixWorld.copy(t.matrixWorld).multiply(ef),this.cameraR.matrixWorld.copy(t.matrixWorld).multiply(tf)}}class sf{constructor(t=!0){this.autoStart=t,this.startTime=0,this.oldTime=0,this.elapsedTime=0,this.running=!1}start(){this.startTime=af(),this.oldTime=this.startTime,this.elapsedTime=0,this.running=!0}stop(){this.getElapsedTime(),this.running=!1,this.autoStart=!1}getElapsedTime(){return this.getDelta(),this.elapsedTime}getDelta(){let t=0;if(this.autoStart&&!this.running)return this.start(),0;if(this.running){const e=af();t=(e-this.oldTime)/1e3,this.oldTime=e,this.elapsedTime+=t}return t}}function af(){return performance.now()}const of=new Gi,lf=new Hi,cf=new Gi,hf=new Gi;class uf extends Zr{constructor(){super(),this.type="AudioListener",this.context=$p.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new sf}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const e=this.context.listener,n=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(of,lf,cf),hf.set(0,0,-1).applyQuaternion(lf),e.positionX){const t=this.context.currentTime+this.timeDelta;e.positionX.linearRampToValueAtTime(of.x,t),e.positionY.linearRampToValueAtTime(of.y,t),e.positionZ.linearRampToValueAtTime(of.z,t),e.forwardX.linearRampToValueAtTime(hf.x,t),e.forwardY.linearRampToValueAtTime(hf.y,t),e.forwardZ.linearRampToValueAtTime(hf.z,t),e.upX.linearRampToValueAtTime(n.x,t),e.upY.linearRampToValueAtTime(n.y,t),e.upZ.linearRampToValueAtTime(n.z,t)}else e.setPosition(of.x,of.y,of.z),e.setOrientation(hf.x,hf.y,hf.z,n.x,n.y,n.z)}}class df extends Zr{constructor(t){super(),this.type="Audio",this.listener=t,this.context=t.context,this.gain=this.context.createGain(),this.gain.connect(t.getInput()),this.autoplay=!1,this.buffer=null,this.detune=0,this.loop=!1,this.loopStart=0,this.loopEnd=0,this.offset=0,this.duration=void 0,this.playbackRate=1,this.isPlaying=!1,this.hasPlaybackControl=!0,this.source=null,this.sourceType="empty",this._startedAt=0,this._progress=0,this._connected=!1,this.filters=[]}getOutput(){return this.gain}setNodeSource(t){return this.hasPlaybackControl=!1,this.sourceType="audioNode",this.source=t,this.connect(),this}setMediaElementSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaNode",this.source=this.context.createMediaElementSource(t),this.connect(),this}setMediaStreamSource(t){return this.hasPlaybackControl=!1,this.sourceType="mediaStreamNode",this.source=this.context.createMediaStreamSource(t),this.connect(),this}setBuffer(t){return this.buffer=t,this.sourceType="buffer",this.autoplay&&this.play(),this}play(t=0){if(!0===this.isPlaying)return void console.warn("THREE.Audio: Audio is already playing.");if(!1===this.hasPlaybackControl)return void console.warn("THREE.Audio: this Audio has no playback control.");this._startedAt=this.context.currentTime+t;const source=this.context.createBufferSource();return source.buffer=this.buffer,source.loop=this.loop,source.loopStart=this.loopStart,source.loopEnd=this.loopEnd,source.onended=this.onEnded.bind(this),source.start(this._startedAt,this._progress+this.offset,this.duration),this.isPlaying=!0,this.source=source,this.setDetune(this.detune),this.setPlaybackRate(this.playbackRate),this.connect()}pause(){if(!1!==this.hasPlaybackControl)return!0===this.isPlaying&&(this._progress+=Math.max(this.context.currentTime-this._startedAt,0)*this.playbackRate,!0===this.loop&&(this._progress=this._progress%(this.duration||this.buffer.duration)),this.source.stop(),this.source.onended=null,this.isPlaying=!1),this;console.warn("THREE.Audio: this Audio has no playback control.")}stop(t=0){if(!1!==this.hasPlaybackControl)return this._progress=0,null!==this.source&&(this.source.stop(this.context.currentTime+t),this.source.onended=null),this.isPlaying=!1,this;console.warn("THREE.Audio: this Audio has no playback control.")}connect(){if(this.filters.length>0){this.source.connect(this.filters[0]);for(let i=1,t=this.filters.length;i<t;i++)this.filters[i-1].connect(this.filters[i]);this.filters[this.filters.length-1].connect(this.getOutput())}else this.source.connect(this.getOutput());return this._connected=!0,this}disconnect(){if(!1!==this._connected){if(this.filters.length>0){this.source.disconnect(this.filters[0]);for(let i=1,t=this.filters.length;i<t;i++)this.filters[i-1].disconnect(this.filters[i]);this.filters[this.filters.length-1].disconnect(this.getOutput())}else this.source.disconnect(this.getOutput());return this._connected=!1,this}}getFilters(){return this.filters}setFilters(t){return t||(t=[]),!0===this._connected?(this.disconnect(),this.filters=t.slice(),this.connect()):this.filters=t.slice(),this}setDetune(t){return this.detune=t,!0===this.isPlaying&&void 0!==this.source.detune&&this.source.detune.setTargetAtTime(this.detune,this.context.currentTime,.01),this}getDetune(){return this.detune}getFilter(){return this.getFilters()[0]}setFilter(filter){return this.setFilters(filter?[filter]:[])}setPlaybackRate(t){if(!1!==this.hasPlaybackControl)return this.playbackRate=t,!0===this.isPlaying&&this.source.playbackRate.setTargetAtTime(this.playbackRate,this.context.currentTime,.01),this;console.warn("THREE.Audio: this Audio has no playback control.")}getPlaybackRate(){return this.playbackRate}onEnded(){this.isPlaying=!1}getLoop(){return!1===this.hasPlaybackControl?(console.warn("THREE.Audio: this Audio has no playback control."),!1):this.loop}setLoop(t){if(!1!==this.hasPlaybackControl)return this.loop=t,!0===this.isPlaying&&(this.source.loop=this.loop),this;console.warn("THREE.Audio: this Audio has no playback control.")}setLoopStart(t){return this.loopStart=t,this}setLoopEnd(t){return this.loopEnd=t,this}getVolume(){return this.gain.gain.value}setVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}}const pf=new Gi,ff=new Hi,mf=new Gi,gf=new Gi;class _f extends df{constructor(t){super(t),this.panner=this.context.createPanner(),this.panner.panningModel="HRTF",this.panner.connect(this.gain)}connect(){super.connect(),this.panner.connect(this.gain)}disconnect(){super.disconnect(),this.panner.disconnect(this.gain)}getOutput(){return this.panner}getRefDistance(){return this.panner.refDistance}setRefDistance(t){return this.panner.refDistance=t,this}getRolloffFactor(){return this.panner.rolloffFactor}setRolloffFactor(t){return this.panner.rolloffFactor=t,this}getDistanceModel(){return this.panner.distanceModel}setDistanceModel(t){return this.panner.distanceModel=t,this}getMaxDistance(){return this.panner.maxDistance}setMaxDistance(t){return this.panner.maxDistance=t,this}setDirectionalCone(t,e,n){return this.panner.coneInnerAngle=t,this.panner.coneOuterAngle=e,this.panner.coneOuterGain=n,this}updateMatrixWorld(t){if(super.updateMatrixWorld(t),!0===this.hasPlaybackControl&&!1===this.isPlaying)return;this.matrixWorld.decompose(pf,ff,mf),gf.set(0,0,1).applyQuaternion(ff);const e=this.panner;if(e.positionX){const t=this.context.currentTime+this.listener.timeDelta;e.positionX.linearRampToValueAtTime(pf.x,t),e.positionY.linearRampToValueAtTime(pf.y,t),e.positionZ.linearRampToValueAtTime(pf.z,t),e.orientationX.linearRampToValueAtTime(gf.x,t),e.orientationY.linearRampToValueAtTime(gf.y,t),e.orientationZ.linearRampToValueAtTime(gf.z,t)}else e.setPosition(pf.x,pf.y,pf.z),e.setOrientation(gf.x,gf.y,gf.z)}}class vf{constructor(audio,t=2048){this.analyser=audio.context.createAnalyser(),this.analyser.fftSize=t,this.data=new Uint8Array(this.analyser.frequencyBinCount),audio.getOutput().connect(this.analyser)}getFrequencyData(){return this.analyser.getByteFrequencyData(this.data),this.data}getAverageFrequency(){let t=0;const data=this.getFrequencyData();for(let i=0;i<data.length;i++)t+=data[i];return t/data.length}}class xf{constructor(t,e,n){let r,o,l;switch(this.binding=t,this.valueSize=n,e){case"quaternion":r=this._slerp,o=this._slerpAdditive,l=this._setAdditiveIdentityQuaternion,this.buffer=new Float64Array(6*n),this._workIndex=5;break;case"string":case"bool":r=this._select,o=this._select,l=this._setAdditiveIdentityOther,this.buffer=new Array(5*n);break;default:r=this._lerp,o=this._lerpAdditive,l=this._setAdditiveIdentityNumeric,this.buffer=new Float64Array(5*n)}this._mixBufferRegion=r,this._mixBufferRegionAdditive=o,this._setIdentity=l,this._origIndex=3,this._addIndex=4,this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,this.useCount=0,this.referenceCount=0}accumulate(t,e){const n=this.buffer,r=this.valueSize,o=t*r+r;let l=this.cumulativeWeight;if(0===l){for(let i=0;i!==r;++i)n[o+i]=n[i];l=e}else{l+=e;const t=e/l;this._mixBufferRegion(n,o,0,t,r)}this.cumulativeWeight=l}accumulateAdditive(t){const e=this.buffer,n=this.valueSize,r=n*this._addIndex;0===this.cumulativeWeightAdditive&&this._setIdentity(),this._mixBufferRegionAdditive(e,r,0,t,n),this.cumulativeWeightAdditive+=t}apply(t){const e=this.valueSize,n=this.buffer,r=t*e+e,o=this.cumulativeWeight,l=this.cumulativeWeightAdditive,c=this.binding;if(this.cumulativeWeight=0,this.cumulativeWeightAdditive=0,o<1){const t=e*this._origIndex;this._mixBufferRegion(n,r,t,1-o,e)}l>0&&this._mixBufferRegionAdditive(n,r,this._addIndex*e,1,e);for(let i=e,t=e+e;i!==t;++i)if(n[i]!==n[i+e]){c.setValue(n,r);break}}saveOriginalState(){const t=this.binding,e=this.buffer,n=this.valueSize,r=n*this._origIndex;t.getValue(e,r);for(let i=n,t=r;i!==t;++i)e[i]=e[r+i%n];this._setIdentity(),this.cumulativeWeight=0,this.cumulativeWeightAdditive=0}restoreOriginalState(){const t=3*this.valueSize;this.binding.setValue(this.buffer,t)}_setAdditiveIdentityNumeric(){const t=this._addIndex*this.valueSize,e=t+this.valueSize;for(let i=t;i<e;i++)this.buffer[i]=0}_setAdditiveIdentityQuaternion(){this._setAdditiveIdentityNumeric(),this.buffer[this._addIndex*this.valueSize+3]=1}_setAdditiveIdentityOther(){const t=this._origIndex*this.valueSize,e=this._addIndex*this.valueSize;for(let i=0;i<this.valueSize;i++)this.buffer[e+i]=this.buffer[t+i]}_select(t,e,n,r,o){if(r>=.5)for(let i=0;i!==o;++i)t[e+i]=t[n+i]}_slerp(t,e,n,r){Hi.slerpFlat(t,e,t,e,t,n,r)}_slerpAdditive(t,e,n,r,o){const l=this._workIndex*o;Hi.multiplyQuaternionsFlat(t,l,t,e,t,n),Hi.slerpFlat(t,e,t,e,t,l,r)}_lerp(t,e,n,r,o){const s=1-r;for(let i=0;i!==o;++i){const o=e+i;t[o]=t[o]*s+t[n+i]*r}}_lerpAdditive(t,e,n,r,o){for(let i=0;i!==o;++i){const o=e+i;t[o]=t[o]+t[n+i]*r}}}const yf="\\[\\]\\.:\\/",Mf=new RegExp("["+yf+"]","g"),Sf="[^"+yf+"]",bf="[^"+yf.replace("\\.","")+"]",Tf=new RegExp("^"+/((?:WC+[\/:])*)/.source.replace("WC",Sf)+/(WCOD+)?/.source.replace("WCOD",bf)+/(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace("WC",Sf)+/\.(WC+)(?:\[(.+)\])?/.source.replace("WC",Sf)+"$"),wf=["material","materials","bones","map"];class Ef{constructor(t,path,e){this.path=path,this.parsedPath=e||Ef.parseTrackName(path),this.node=Ef.findNode(t,this.parsedPath.nodeName),this.rootNode=t,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}static create(t,path,e){return t&&t.isAnimationObjectGroup?new Ef.Composite(t,path,e):new Ef(t,path,e)}static sanitizeNodeName(t){return t.replace(/\s/g,"_").replace(Mf,"")}static parseTrackName(t){const e=Tf.exec(t);if(null===e)throw new Error("PropertyBinding: Cannot parse trackName: "+t);const n={nodeName:e[2],objectName:e[3],objectIndex:e[4],propertyName:e[5],propertyIndex:e[6]},r=n.nodeName&&n.nodeName.lastIndexOf(".");if(void 0!==r&&-1!==r){const t=n.nodeName.substring(r+1);-1!==wf.indexOf(t)&&(n.nodeName=n.nodeName.substring(0,r),n.objectName=t)}if(null===n.propertyName||0===n.propertyName.length)throw new Error("PropertyBinding: can not parse propertyName from trackName: "+t);return n}static findNode(t,e){if(void 0===e||""===e||"."===e||-1===e||e===t.name||e===t.uuid)return t;if(t.skeleton){const n=t.skeleton.getBoneByName(e);if(void 0!==n)return n}if(t.children){const n=function(t){for(let i=0;i<t.length;i++){const r=t[i];if(r.name===e||r.uuid===e)return r;const o=n(r.children);if(o)return o}return null},r=n(t.children);if(r)return r}return null}_getValue_unavailable(){}_setValue_unavailable(){}_getValue_direct(t,e){t[e]=this.targetObject[this.propertyName]}_getValue_array(t,e){const source=this.resolvedProperty;for(let i=0,n=source.length;i!==n;++i)t[e++]=source[i]}_getValue_arrayElement(t,e){t[e]=this.resolvedProperty[this.propertyIndex]}_getValue_toArray(t,e){this.resolvedProperty.toArray(t,e)}_setValue_direct(t,e){this.targetObject[this.propertyName]=t[e]}_setValue_direct_setNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.needsUpdate=!0}_setValue_direct_setMatrixWorldNeedsUpdate(t,e){this.targetObject[this.propertyName]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_array(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++]}_setValue_array_setNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.needsUpdate=!0}_setValue_array_setMatrixWorldNeedsUpdate(t,e){const n=this.resolvedProperty;for(let i=0,r=n.length;i!==r;++i)n[i]=t[e++];this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_arrayElement(t,e){this.resolvedProperty[this.propertyIndex]=t[e]}_setValue_arrayElement_setNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.needsUpdate=!0}_setValue_arrayElement_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty[this.propertyIndex]=t[e],this.targetObject.matrixWorldNeedsUpdate=!0}_setValue_fromArray(t,e){this.resolvedProperty.fromArray(t,e)}_setValue_fromArray_setNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.needsUpdate=!0}_setValue_fromArray_setMatrixWorldNeedsUpdate(t,e){this.resolvedProperty.fromArray(t,e),this.targetObject.matrixWorldNeedsUpdate=!0}_getValue_unbound(t,e){this.bind(),this.getValue(t,e)}_setValue_unbound(t,e){this.bind(),this.setValue(t,e)}bind(){let t=this.node;const e=this.parsedPath,n=e.objectName,r=e.propertyName;let o=e.propertyIndex;if(t||(t=Ef.findNode(this.rootNode,e.nodeName),this.node=t),this.getValue=this._getValue_unavailable,this.setValue=this._setValue_unavailable,!t)return void console.warn("THREE.PropertyBinding: No target node found for track: "+this.path+".");if(n){let r=e.objectIndex;switch(n){case"materials":if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.materials)return void console.error("THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.",this);t=t.material.materials;break;case"bones":if(!t.skeleton)return void console.error("THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.",this);t=t.skeleton.bones;for(let i=0;i<t.length;i++)if(t[i].name===r){r=i;break}break;case"map":if("map"in t){t=t.map;break}if(!t.material)return void console.error("THREE.PropertyBinding: Can not bind to material as node does not have a material.",this);if(!t.material.map)return void console.error("THREE.PropertyBinding: Can not bind to material.map as node.material does not have a map.",this);t=t.material.map;break;default:if(void 0===t[n])return void console.error("THREE.PropertyBinding: Can not bind to objectName of node undefined.",this);t=t[n]}if(void 0!==r){if(void 0===t[r])return void console.error("THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.",this,t);t=t[r]}}const l=t[r];if(void 0===l){const n=e.nodeName;return void console.error("THREE.PropertyBinding: Trying to update property for track: "+n+"."+r+" but it wasn't found.",t)}let c=this.Versioning.None;this.targetObject=t,void 0!==t.needsUpdate?c=this.Versioning.NeedsUpdate:void 0!==t.matrixWorldNeedsUpdate&&(c=this.Versioning.MatrixWorldNeedsUpdate);let h=this.BindingType.Direct;if(void 0!==o){if("morphTargetInfluences"===r){if(!t.geometry)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.",this);if(!t.geometry.morphAttributes)return void console.error("THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.",this);void 0!==t.morphTargetDictionary[o]&&(o=t.morphTargetDictionary[o])}h=this.BindingType.ArrayElement,this.resolvedProperty=l,this.propertyIndex=o}else void 0!==l.fromArray&&void 0!==l.toArray?(h=this.BindingType.HasFromToArray,this.resolvedProperty=l):Array.isArray(l)?(h=this.BindingType.EntireArray,this.resolvedProperty=l):this.propertyName=r;this.getValue=this.GetterByBindingType[h],this.setValue=this.SetterByBindingTypeAndVersioning[h][c]}unbind(){this.node=null,this.getValue=this._getValue_unbound,this.setValue=this._setValue_unbound}}Ef.Composite=class{constructor(t,path,e){const n=e||Ef.parseTrackName(path);this._targetGroup=t,this._bindings=t.subscribe_(path,n)}getValue(t,e){this.bind();const n=this._targetGroup.nCachedObjects_,r=this._bindings[n];void 0!==r&&r.getValue(t,e)}setValue(t,e){const n=this._bindings;for(let i=this._targetGroup.nCachedObjects_,r=n.length;i!==r;++i)n[i].setValue(t,e)}bind(){const t=this._bindings;for(let i=this._targetGroup.nCachedObjects_,e=t.length;i!==e;++i)t[i].bind()}unbind(){const t=this._bindings;for(let i=this._targetGroup.nCachedObjects_,e=t.length;i!==e;++i)t[i].unbind()}},Ef.prototype.BindingType={Direct:0,EntireArray:1,ArrayElement:2,HasFromToArray:3},Ef.prototype.Versioning={None:0,NeedsUpdate:1,MatrixWorldNeedsUpdate:2},Ef.prototype.GetterByBindingType=[Ef.prototype._getValue_direct,Ef.prototype._getValue_array,Ef.prototype._getValue_arrayElement,Ef.prototype._getValue_toArray],Ef.prototype.SetterByBindingTypeAndVersioning=[[Ef.prototype._setValue_direct,Ef.prototype._setValue_direct_setNeedsUpdate,Ef.prototype._setValue_direct_setMatrixWorldNeedsUpdate],[Ef.prototype._setValue_array,Ef.prototype._setValue_array_setNeedsUpdate,Ef.prototype._setValue_array_setMatrixWorldNeedsUpdate],[Ef.prototype._setValue_arrayElement,Ef.prototype._setValue_arrayElement_setNeedsUpdate,Ef.prototype._setValue_arrayElement_setMatrixWorldNeedsUpdate],[Ef.prototype._setValue_fromArray,Ef.prototype._setValue_fromArray_setNeedsUpdate,Ef.prototype._setValue_fromArray_setMatrixWorldNeedsUpdate]];class Af{constructor(){this.isAnimationObjectGroup=!0,this.uuid=ni(),this._objects=Array.prototype.slice.call(arguments),this.nCachedObjects_=0;const t={};this._indicesByUUID=t;for(let i=0,e=arguments.length;i!==e;++i)t[arguments[i].uuid]=i;this._paths=[],this._parsedPaths=[],this._bindings=[],this._bindingsIndicesByPath={};const e=this;this.stats={objects:{get total(){return e._objects.length},get inUse(){return this.total-e.nCachedObjects_}},get bindingsPerObject(){return e._bindings.length}}}add(){const t=this._objects,e=this._indicesByUUID,n=this._paths,r=this._parsedPaths,o=this._bindings,l=o.length;let c,h=t.length,d=this.nCachedObjects_;for(let i=0,f=arguments.length;i!==f;++i){const object=arguments[i],f=object.uuid;let m=e[f];if(void 0===m){m=h++,e[f]=m,t.push(object);for(let t=0,e=l;t!==e;++t)o[t].push(new Ef(object,n[t],r[t]))}else if(m<d){c=t[m];const h=--d,_=t[h];e[_.uuid]=m,t[m]=_,e[f]=h,t[h]=object;for(let t=0,e=l;t!==e;++t){const e=o[t],l=e[h];let c=e[m];e[m]=l,void 0===c&&(c=new Ef(object,n[t],r[t])),e[h]=c}}else t[m]!==c&&console.error("THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.")}this.nCachedObjects_=d}remove(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,r=n.length;let o=this.nCachedObjects_;for(let i=0,l=arguments.length;i!==l;++i){const object=arguments[i],l=object.uuid,c=e[l];if(void 0!==c&&c>=o){const h=o++,d=t[h];e[d.uuid]=c,t[c]=d,e[l]=h,t[h]=object;for(let t=0,e=r;t!==e;++t){const e=n[t],r=e[h],o=e[c];e[c]=r,e[h]=o}}}this.nCachedObjects_=o}uncache(){const t=this._objects,e=this._indicesByUUID,n=this._bindings,r=n.length;let o=this.nCachedObjects_,l=t.length;for(let i=0,c=arguments.length;i!==c;++i){const c=arguments[i].uuid,h=e[c];if(void 0!==h)if(delete e[c],h<o){const c=--o,d=t[c],f=--l,m=t[f];e[d.uuid]=h,t[h]=d,e[m.uuid]=c,t[c]=m,t.pop();for(let t=0,e=r;t!==e;++t){const e=n[t],r=e[c],o=e[f];e[h]=r,e[c]=o,e.pop()}}else{const o=--l,c=t[o];o>0&&(e[c.uuid]=h),t[h]=c,t.pop();for(let t=0,e=r;t!==e;++t){const e=n[t];e[h]=e[o],e.pop()}}}this.nCachedObjects_=o}subscribe_(path,t){const e=this._bindingsIndicesByPath;let n=e[path];const r=this._bindings;if(void 0!==n)return r[n];const o=this._paths,l=this._parsedPaths,c=this._objects,h=c.length,d=this.nCachedObjects_,f=new Array(h);n=r.length,e[path]=n,o.push(path),l.push(t),r.push(f);for(let i=d,e=c.length;i!==e;++i){const object=c[i];f[i]=new Ef(object,path,t)}return f}unsubscribe_(path){const t=this._bindingsIndicesByPath,e=t[path];if(void 0!==e){const n=this._paths,r=this._parsedPaths,o=this._bindings,l=o.length-1,c=o[l];t[path[l]]=e,o[e]=c,o.pop(),r[e]=r[l],r.pop(),n[e]=n[l],n.pop()}}}class Cf{constructor(t,e,n=null,r=e.blendMode){this._mixer=t,this._clip=e,this._localRoot=n,this.blendMode=r;const o=e.tracks,l=o.length,c=new Array(l),h={endingStart:Ye,endingEnd:Ye};for(let i=0;i!==l;++i){const t=o[i].createInterpolant(null);c[i]=t,t.settings=h}this._interpolantSettings=h,this._interpolants=c,this._propertyBindings=new Array(l),this._cacheIndex=null,this._byClipCacheIndex=null,this._timeScaleInterpolant=null,this._weightInterpolant=null,this.loop=Ge,this._loopCount=-1,this._startTime=null,this.time=0,this.timeScale=1,this._effectiveTimeScale=1,this.weight=1,this._effectiveWeight=1,this.repetitions=1/0,this.paused=!1,this.enabled=!0,this.clampWhenFinished=!1,this.zeroSlopeAtStart=!0,this.zeroSlopeAtEnd=!0}play(){return this._mixer._activateAction(this),this}stop(){return this._mixer._deactivateAction(this),this.reset()}reset(){return this.paused=!1,this.enabled=!0,this.time=0,this._loopCount=-1,this._startTime=null,this.stopFading().stopWarping()}isRunning(){return this.enabled&&!this.paused&&0!==this.timeScale&&null===this._startTime&&this._mixer._isActiveAction(this)}isScheduled(){return this._mixer._isActiveAction(this)}startAt(time){return this._startTime=time,this}setLoop(t,e){return this.loop=t,this.repetitions=e,this}setEffectiveWeight(t){return this.weight=t,this._effectiveWeight=this.enabled?t:0,this.stopFading()}getEffectiveWeight(){return this._effectiveWeight}fadeIn(t){return this._scheduleFading(t,0,1)}fadeOut(t){return this._scheduleFading(t,1,0)}crossFadeFrom(t,e,n){if(t.fadeOut(e),this.fadeIn(e),n){const n=this._clip.duration,r=t._clip.duration,o=r/n,l=n/r;t.warp(1,o,e),this.warp(l,1,e)}return this}crossFadeTo(t,e,n){return t.crossFadeFrom(this,e,n)}stopFading(){const t=this._weightInterpolant;return null!==t&&(this._weightInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}setEffectiveTimeScale(t){return this.timeScale=t,this._effectiveTimeScale=this.paused?0:t,this.stopWarping()}getEffectiveTimeScale(){return this._effectiveTimeScale}setDuration(t){return this.timeScale=this._clip.duration/t,this.stopWarping()}syncWith(t){return this.time=t.time,this.timeScale=t.timeScale,this.stopWarping()}halt(t){return this.warp(this._effectiveTimeScale,0,t)}warp(t,e,n){const r=this._mixer,o=r.time,l=this.timeScale;let c=this._timeScaleInterpolant;null===c&&(c=r._lendControlInterpolant(),this._timeScaleInterpolant=c);const h=c.parameterPositions,d=c.sampleValues;return h[0]=o,h[1]=o+n,d[0]=t/l,d[1]=e/l,this}stopWarping(){const t=this._timeScaleInterpolant;return null!==t&&(this._timeScaleInterpolant=null,this._mixer._takeBackControlInterpolant(t)),this}getMixer(){return this._mixer}getClip(){return this._clip}getRoot(){return this._localRoot||this._mixer._root}_update(time,t,e,n){if(!this.enabled)return void this._updateWeight(time);const r=this._startTime;if(null!==r){const n=(time-r)*e;n<0||0===e?t=0:(this._startTime=null,t=e*n)}t*=this._updateTimeScale(time);const o=this._updateTime(t),l=this._updateWeight(time);if(l>0){const t=this._interpolants,e=this._propertyBindings;if(this.blendMode===$e)for(let n=0,r=t.length;n!==r;++n)t[n].evaluate(o),e[n].accumulateAdditive(l);else for(let r=0,c=t.length;r!==c;++r)t[r].evaluate(o),e[r].accumulate(n,l)}}_updateWeight(time){let t=0;if(this.enabled){t=this.weight;const e=this._weightInterpolant;if(null!==e){const n=e.evaluate(time)[0];t*=n,time>e.parameterPositions[1]&&(this.stopFading(),0===n&&(this.enabled=!1))}}return this._effectiveWeight=t,t}_updateTimeScale(time){let t=0;if(!this.paused){t=this.timeScale;const e=this._timeScaleInterpolant;if(null!==e){t*=e.evaluate(time)[0],time>e.parameterPositions[1]&&(this.stopWarping(),0===t?this.paused=!0:this.timeScale=t)}}return this._effectiveTimeScale=t,t}_updateTime(t){const e=this._clip.duration,n=this.loop;let time=this.time+t,r=this._loopCount;const o=n===We;if(0===t)return-1===r||!o||1&~r?time:e-time;if(n===He){-1===r&&(this._loopCount=0,this._setEndings(!0,!0,!1));t:{if(time>=e)time=e;else{if(!(time<0)){this.time=time;break t}time=0}this.clampWhenFinished?this.paused=!0:this.enabled=!1,this.time=time,this._mixer.dispatchEvent({type:"finished",action:this,direction:t<0?-1:1})}}else{if(-1===r&&(t>=0?(r=0,this._setEndings(!0,0===this.repetitions,o)):this._setEndings(0===this.repetitions,!0,o)),time>=e||time<0){const n=Math.floor(time/e);time-=e*n,r+=Math.abs(n);const l=this.repetitions-r;if(l<=0)this.clampWhenFinished?this.paused=!0:this.enabled=!1,time=t>0?e:0,this.time=time,this._mixer.dispatchEvent({type:"finished",action:this,direction:t>0?1:-1});else{if(1===l){const e=t<0;this._setEndings(e,!e,o)}else this._setEndings(!1,!1,o);this._loopCount=r,this.time=time,this._mixer.dispatchEvent({type:"loop",action:this,loopDelta:n})}}else this.time=time;if(o&&!(1&~r))return e-time}return time}_setEndings(t,e,n){const r=this._interpolantSettings;n?(r.endingStart=Ze,r.endingEnd=Ze):(r.endingStart=t?this.zeroSlopeAtStart?Ze:Ye:Je,r.endingEnd=e?this.zeroSlopeAtEnd?Ze:Ye:Je)}_scheduleFading(t,e,n){const r=this._mixer,o=r.time;let l=this._weightInterpolant;null===l&&(l=r._lendControlInterpolant(),this._weightInterpolant=l);const c=l.parameterPositions,h=l.sampleValues;return c[0]=o,h[0]=e,c[1]=o+t,h[1]=n,this}}const Rf=new Float32Array(1);class Pf extends Kn{constructor(t){super(),this._root=t,this._initMemoryManager(),this._accuIndex=0,this.time=0,this.timeScale=1}_bindAction(t,e){const n=t._localRoot||this._root,r=t._clip.tracks,o=r.length,l=t._propertyBindings,c=t._interpolants,h=n.uuid,d=this._bindingsByRootAndName;let f=d[h];void 0===f&&(f={},d[h]=f);for(let i=0;i!==o;++i){const track=r[i],t=track.name;let o=f[t];if(void 0!==o)++o.referenceCount,l[i]=o;else{if(o=l[i],void 0!==o){null===o._cacheIndex&&(++o.referenceCount,this._addInactiveBinding(o,h,t));continue}const path=e&&e._propertyBindings[i].binding.parsedPath;o=new xf(Ef.create(n,t,path),track.ValueTypeName,track.getValueSize()),++o.referenceCount,this._addInactiveBinding(o,h,t),l[i]=o}c[i].resultBuffer=o.buffer}}_activateAction(t){if(!this._isActiveAction(t)){if(null===t._cacheIndex){const e=(t._localRoot||this._root).uuid,n=t._clip.uuid,r=this._actionsByClip[n];this._bindAction(t,r&&r.knownActions[0]),this._addInactiveAction(t,n,e)}const e=t._propertyBindings;for(let i=0,t=e.length;i!==t;++i){const t=e[i];0==t.useCount++&&(this._lendBinding(t),t.saveOriginalState())}this._lendAction(t)}}_deactivateAction(t){if(this._isActiveAction(t)){const e=t._propertyBindings;for(let i=0,t=e.length;i!==t;++i){const t=e[i];0==--t.useCount&&(t.restoreOriginalState(),this._takeBackBinding(t))}this._takeBackAction(t)}}_initMemoryManager(){this._actions=[],this._nActiveActions=0,this._actionsByClip={},this._bindings=[],this._nActiveBindings=0,this._bindingsByRootAndName={},this._controlInterpolants=[],this._nActiveControlInterpolants=0;const t=this;this.stats={actions:{get total(){return t._actions.length},get inUse(){return t._nActiveActions}},bindings:{get total(){return t._bindings.length},get inUse(){return t._nActiveBindings}},controlInterpolants:{get total(){return t._controlInterpolants.length},get inUse(){return t._nActiveControlInterpolants}}}}_isActiveAction(t){const e=t._cacheIndex;return null!==e&&e<this._nActiveActions}_addInactiveAction(t,e,n){const r=this._actions,o=this._actionsByClip;let l=o[e];if(void 0===l)l={knownActions:[t],actionByRoot:{}},t._byClipCacheIndex=0,o[e]=l;else{const e=l.knownActions;t._byClipCacheIndex=e.length,e.push(t)}t._cacheIndex=r.length,r.push(t),l.actionByRoot[n]=t}_removeInactiveAction(t){const e=this._actions,n=e[e.length-1],r=t._cacheIndex;n._cacheIndex=r,e[r]=n,e.pop(),t._cacheIndex=null;const o=t._clip.uuid,l=this._actionsByClip,c=l[o],h=c.knownActions,d=h[h.length-1],f=t._byClipCacheIndex;d._byClipCacheIndex=f,h[f]=d,h.pop(),t._byClipCacheIndex=null;delete c.actionByRoot[(t._localRoot||this._root).uuid],0===h.length&&delete l[o],this._removeInactiveBindingsForAction(t)}_removeInactiveBindingsForAction(t){const e=t._propertyBindings;for(let i=0,t=e.length;i!==t;++i){const t=e[i];0==--t.referenceCount&&this._removeInactiveBinding(t)}}_lendAction(t){const e=this._actions,n=t._cacheIndex,r=this._nActiveActions++,o=e[r];t._cacheIndex=r,e[r]=t,o._cacheIndex=n,e[n]=o}_takeBackAction(t){const e=this._actions,n=t._cacheIndex,r=--this._nActiveActions,o=e[r];t._cacheIndex=r,e[r]=t,o._cacheIndex=n,e[n]=o}_addInactiveBinding(t,e,n){const r=this._bindingsByRootAndName,o=this._bindings;let l=r[e];void 0===l&&(l={},r[e]=l),l[n]=t,t._cacheIndex=o.length,o.push(t)}_removeInactiveBinding(t){const e=this._bindings,n=t.binding,r=n.rootNode.uuid,o=n.path,l=this._bindingsByRootAndName,c=l[r],h=e[e.length-1],d=t._cacheIndex;h._cacheIndex=d,e[d]=h,e.pop(),delete c[o],0===Object.keys(c).length&&delete l[r]}_lendBinding(t){const e=this._bindings,n=t._cacheIndex,r=this._nActiveBindings++,o=e[r];t._cacheIndex=r,e[r]=t,o._cacheIndex=n,e[n]=o}_takeBackBinding(t){const e=this._bindings,n=t._cacheIndex,r=--this._nActiveBindings,o=e[r];t._cacheIndex=r,e[r]=t,o._cacheIndex=n,e[n]=o}_lendControlInterpolant(){const t=this._controlInterpolants,e=this._nActiveControlInterpolants++;let n=t[e];return void 0===n&&(n=new Kd(new Float32Array(2),new Float32Array(2),1,Rf),n.__cacheIndex=e,t[e]=n),n}_takeBackControlInterpolant(t){const e=this._controlInterpolants,n=t.__cacheIndex,r=--this._nActiveControlInterpolants,o=e[r];t.__cacheIndex=r,e[r]=t,o.__cacheIndex=n,e[n]=o}clipAction(t,e,n){const r=e||this._root,o=r.uuid;let l="string"==typeof t?lp.findByName(r,t):t;const c=null!==l?l.uuid:t,h=this._actionsByClip[c];let d=null;if(void 0===n&&(n=null!==l?l.blendMode:Ke),void 0!==h){const t=h.actionByRoot[o];if(void 0!==t&&t.blendMode===n)return t;d=h.knownActions[0],null===l&&(l=d._clip)}if(null===l)return null;const f=new Cf(this,l,e,n);return this._bindAction(f,d),this._addInactiveAction(f,c,o),f}existingAction(t,e){const n=e||this._root,r=n.uuid,o="string"==typeof t?lp.findByName(n,t):t,l=o?o.uuid:t,c=this._actionsByClip[l];return void 0!==c&&c.actionByRoot[r]||null}stopAllAction(){const t=this._actions;for(let i=this._nActiveActions-1;i>=0;--i)t[i].stop();return this}update(t){t*=this.timeScale;const e=this._actions,n=this._nActiveActions,time=this.time+=t,r=Math.sign(t),o=this._accuIndex^=1;for(let i=0;i!==n;++i){e[i]._update(time,t,r,o)}const l=this._bindings,c=this._nActiveBindings;for(let i=0;i!==c;++i)l[i].apply(o);return this}setTime(t){this.time=0;for(let i=0;i<this._actions.length;i++)this._actions[i].time=0;return this.update(t)}getRoot(){return this._root}uncacheClip(t){const e=this._actions,n=t.uuid,r=this._actionsByClip,o=r[n];if(void 0!==o){const t=o.knownActions;for(let i=0,n=t.length;i!==n;++i){const n=t[i];this._deactivateAction(n);const r=n._cacheIndex,o=e[e.length-1];n._cacheIndex=null,n._byClipCacheIndex=null,o._cacheIndex=r,e[r]=o,e.pop(),this._removeInactiveBindingsForAction(n)}delete r[n]}}uncacheRoot(t){const e=t.uuid,n=this._actionsByClip;for(const t in n){const r=n[t].actionByRoot[e];void 0!==r&&(this._deactivateAction(r),this._removeInactiveAction(r))}const r=this._bindingsByRootAndName[e];if(void 0!==r)for(const t in r){const e=r[t];e.restoreOriginalState(),this._removeInactiveBinding(e)}}uncacheAction(t,e){const n=this.existingAction(t,e);null!==n&&(this._deactivateAction(n),this._removeInactiveAction(n))}}class If{constructor(t){this.value=t}clone(){return new If(void 0===this.value.clone?this.value:this.value.clone())}}let Lf=0;class Uf extends Kn{constructor(){super(),this.isUniformsGroup=!0,Object.defineProperty(this,"id",{value:Lf++}),this.name="",this.usage=Bn,this.uniforms=[]}add(t){return this.uniforms.push(t),this}remove(t){const e=this.uniforms.indexOf(t);return-1!==e&&this.uniforms.splice(e,1),this}setName(t){return this.name=t,this}setUsage(t){return this.usage=t,this}dispose(){return this.dispatchEvent({type:"dispose"}),this}copy(source){this.name=source.name,this.usage=source.usage;const t=source.uniforms;this.uniforms.length=0;for(let i=0,e=t.length;i<e;i++){const e=Array.isArray(t[i])?t[i]:[t[i]];for(let t=0;t<e.length;t++)this.uniforms.push(e[t].clone())}return this}clone(){return(new this.constructor).copy(this)}}class Df extends wc{constructor(t,e,n=1){super(t,e),this.isInstancedInterleavedBuffer=!0,this.meshPerAttribute=n}copy(source){return super.copy(source),this.meshPerAttribute=source.meshPerAttribute,this}clone(data){const t=super.clone(data);return t.meshPerAttribute=this.meshPerAttribute,t}toJSON(data){const t=super.toJSON(data);return t.isInstancedInterleavedBuffer=!0,t.meshPerAttribute=this.meshPerAttribute,t}}class Nf{constructor(t,e,n,r,o){this.isGLBufferAttribute=!0,this.name="",this.buffer=t,this.type=e,this.itemSize=n,this.elementSize=r,this.count=o,this.version=0}set needsUpdate(t){!0===t&&this.version++}setBuffer(t){return this.buffer=t,this}setType(t,e){return this.type=t,this.elementSize=e,this}setItemSize(t){return this.itemSize=t,this}setCount(t){return this.count=t,this}}const Of=new Mr;class Ff{constructor(t,e,n=0,r=1/0){this.ray=new yr(t,e),this.near=n,this.far=r,this.camera=null,this.layers=new Ur,this.params={Mesh:{},Line:{threshold:1},LOD:{},Points:{threshold:1},Sprite:{}}}set(t,e){this.ray.set(t,e)}setFromCamera(t,e){e.isPerspectiveCamera?(this.ray.origin.setFromMatrixPosition(e.matrixWorld),this.ray.direction.set(t.x,t.y,.5).unproject(e).sub(this.ray.origin).normalize(),this.camera=e):e.isOrthographicCamera?(this.ray.origin.set(t.x,t.y,(e.near+e.far)/(e.near-e.far)).unproject(e),this.ray.direction.set(0,0,-1).transformDirection(e.matrixWorld),this.camera=e):console.error("THREE.Raycaster: Unsupported camera type: "+e.type)}setFromXRController(t){return Of.identity().extractRotation(t.matrixWorld),this.ray.origin.setFromMatrixPosition(t.matrixWorld),this.ray.direction.set(0,0,-1).applyMatrix4(Of),this}intersectObject(object,t=!0,e=[]){return zf(object,this,e,t),e.sort(Bf),e}intersectObjects(t,e=!0,n=[]){for(let i=0,r=t.length;i<r;i++)zf(t[i],this,n,e);return n.sort(Bf),n}}function Bf(a,b){return a.distance-b.distance}function zf(object,t,e,n){let r=!0;if(object.layers.test(t.layers)){!1===object.raycast(t,e)&&(r=!1)}if(!0===r&&!0===n){const n=object.children;for(let i=0,r=n.length;i<r;i++)zf(n[i],t,e,!0)}}class kf{constructor(t=1,e=0,n=0){return this.radius=t,this.phi=e,this.theta=n,this}set(t,e,n){return this.radius=t,this.phi=e,this.theta=n,this}copy(t){return this.radius=t.radius,this.phi=t.phi,this.theta=t.theta,this}makeSafe(){const t=1e-6;return this.phi=Math.max(t,Math.min(Math.PI-t,this.phi)),this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+e*e+n*n),0===this.radius?(this.theta=0,this.phi=0):(this.theta=Math.atan2(t,n),this.phi=Math.acos(ii(e/this.radius,-1,1))),this}clone(){return(new this.constructor).copy(this)}}class Vf{constructor(t=1,e=0,n=0){return this.radius=t,this.theta=e,this.y=n,this}set(t,e,n){return this.radius=t,this.theta=e,this.y=n,this}copy(t){return this.radius=t.radius,this.theta=t.theta,this.y=t.y,this}setFromVector3(t){return this.setFromCartesianCoords(t.x,t.y,t.z)}setFromCartesianCoords(t,e,n){return this.radius=Math.sqrt(t*t+n*n),this.theta=Math.atan2(t,n),this.y=e,this}clone(){return(new this.constructor).copy(this)}}class Hf{constructor(t,e,n,r){Hf.prototype.isMatrix2=!0,this.elements=[1,0,0,1],void 0!==t&&this.set(t,e,n,r)}identity(){return this.set(1,0,0,1),this}fromArray(t,e=0){for(let i=0;i<4;i++)this.elements[i]=t[i+e];return this}set(t,e,n,r){const o=this.elements;return o[0]=t,o[2]=e,o[1]=n,o[3]=r,this}}const Gf=new hi;class Wf{constructor(t=new hi(1/0,1/0),e=new hi(-1/0,-1/0)){this.isBox2=!0,this.min=t,this.max=e}set(t,e){return this.min.copy(t),this.max.copy(e),this}setFromPoints(t){this.makeEmpty();for(let i=0,e=t.length;i<e;i++)this.expandByPoint(t[i]);return this}setFromCenterAndSize(t,e){const n=Gf.copy(e).multiplyScalar(.5);return this.min.copy(t).sub(n),this.max.copy(t).add(n),this}clone(){return(new this.constructor).copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=1/0,this.max.x=this.max.y=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y}getCenter(t){return this.isEmpty()?t.set(0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y}getParameter(t,e){return e.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y}clampPoint(t,e){return e.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Gf).distanceTo(t)}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}}const Xf=new Gi,jf=new Gi;class qf{constructor(t=new Gi,e=new Gi){this.start=t,this.end=e}set(t,e){return this.start.copy(t),this.end.copy(e),this}copy(line){return this.start.copy(line.start),this.end.copy(line.end),this}getCenter(t){return t.addVectors(this.start,this.end).multiplyScalar(.5)}delta(t){return t.subVectors(this.end,this.start)}distanceSq(){return this.start.distanceToSquared(this.end)}distance(){return this.start.distanceTo(this.end)}at(t,e){return this.delta(e).multiplyScalar(t).add(this.start)}closestPointToPointParameter(t,e){Xf.subVectors(t,this.start),jf.subVectors(this.end,this.start);const n=jf.dot(jf);let r=jf.dot(Xf)/n;return e&&(r=ii(r,0,1)),r}closestPointToPoint(t,e,n){const r=this.closestPointToPointParameter(t,e);return this.delta(n).multiplyScalar(r).add(this.start)}applyMatrix4(t){return this.start.applyMatrix4(t),this.end.applyMatrix4(t),this}equals(line){return line.start.equals(this.start)&&line.end.equals(this.end)}clone(){return(new this.constructor).copy(this)}}const Yf=new Gi;class Zf extends Zr{constructor(t,e){super(),this.light=t,this.matrixAutoUpdate=!1,this.color=e,this.type="SpotLightHelper";const n=new Gs,r=[0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,-1,0,1,0,0,0,0,1,1,0,0,0,0,-1,1];for(let i=0,t=1,e=32;i<e;i++,t++){const n=i/e*Math.PI*2,o=t/e*Math.PI*2;r.push(Math.cos(n),Math.sin(n),1,Math.cos(o),Math.sin(o),1)}n.setAttribute("position",new Ns(r,3));const o=new Oh({fog:!1,toneMapped:!1});this.cone=new Yh(n,o),this.add(this.cone),this.update()}dispose(){this.cone.geometry.dispose(),this.cone.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),this.parent?(this.parent.updateWorldMatrix(!0),this.matrix.copy(this.parent.matrixWorld).invert().multiply(this.light.matrixWorld)):this.matrix.copy(this.light.matrixWorld),this.matrixWorld.copy(this.light.matrixWorld);const t=this.light.distance?this.light.distance:1e3,e=t*Math.tan(this.light.angle);this.cone.scale.set(e,e,t),Yf.setFromMatrixPosition(this.light.target.matrixWorld),this.cone.lookAt(Yf),void 0!==this.color?this.cone.material.color.set(this.color):this.cone.material.color.copy(this.light.color)}}const Jf=new Gi,Kf=new Mr,$f=new Mr;class Qf extends Yh{constructor(object){const t=tm(object),e=new Gs,n=[],r=[],o=new fs(0,0,1),l=new fs(0,1,0);for(let i=0;i<t.length;i++){const e=t[i];e.parent&&e.parent.isBone&&(n.push(0,0,0),n.push(0,0,0),r.push(o.r,o.g,o.b),r.push(l.r,l.g,l.b))}e.setAttribute("position",new Ns(n,3)),e.setAttribute("color",new Ns(r,3));super(e,new Oh({vertexColors:!0,depthTest:!1,depthWrite:!1,toneMapped:!1,transparent:!0})),this.isSkeletonHelper=!0,this.type="SkeletonHelper",this.root=object,this.bones=t,this.matrix=object.matrixWorld,this.matrixAutoUpdate=!1}updateMatrixWorld(t){const e=this.bones,n=this.geometry,r=n.getAttribute("position");$f.copy(this.root.matrixWorld).invert();for(let i=0,t=0;i<e.length;i++){const n=e[i];n.parent&&n.parent.isBone&&(Kf.multiplyMatrices($f,n.matrixWorld),Jf.setFromMatrixPosition(Kf),r.setXYZ(t,Jf.x,Jf.y,Jf.z),Kf.multiplyMatrices($f,n.parent.matrixWorld),Jf.setFromMatrixPosition(Kf),r.setXYZ(t+1,Jf.x,Jf.y,Jf.z),t+=2)}n.getAttribute("position").needsUpdate=!0,super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose()}}function tm(object){const t=[];!0===object.isBone&&t.push(object);for(let i=0;i<object.children.length;i++)t.push.apply(t,tm(object.children[i]));return t}class nm extends ea{constructor(t,e,n){super(new wd(e,4,2),new vs({wireframe:!0,fog:!1,toneMapped:!1})),this.light=t,this.color=n,this.type="PointLightHelper",this.matrix=this.light.matrixWorld,this.matrixAutoUpdate=!1,this.update()}dispose(){this.geometry.dispose(),this.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),void 0!==this.color?this.material.color.set(this.color):this.material.color.copy(this.light.color)}}const im=new Gi,rm=new fs,sm=new fs;class am extends Zr{constructor(t,e,n){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="HemisphereLightHelper";const r=new Sd(e);r.rotateY(.5*Math.PI),this.material=new vs({wireframe:!0,fog:!1,toneMapped:!1}),void 0===this.color&&(this.material.vertexColors=!0);const o=r.getAttribute("position"),l=new Float32Array(3*o.count);r.setAttribute("color",new Es(l,3)),this.add(new ea(r,this.material)),this.update()}dispose(){this.children[0].geometry.dispose(),this.children[0].material.dispose()}update(){const t=this.children[0];if(void 0!==this.color)this.material.color.set(this.color);else{const e=t.geometry.getAttribute("color");rm.copy(this.light.color),sm.copy(this.light.groundColor);for(let i=0,t=e.count;i<t;i++){const n=i<t/2?rm:sm;e.setXYZ(i,n.r,n.g,n.b)}e.needsUpdate=!0}this.light.updateWorldMatrix(!0,!1),t.lookAt(im.setFromMatrixPosition(this.light.matrixWorld).negate())}}class om extends Yh{constructor(t=10,e=10,n=4473924,r=8947848){n=new fs(n),r=new fs(r);const o=e/2,l=t/e,c=t/2,h=[],d=[];for(let i=0,t=0,f=-c;i<=e;i++,f+=l){h.push(-c,0,f,c,0,f),h.push(f,0,-c,f,0,c);const e=i===o?n:r;e.toArray(d,t),t+=3,e.toArray(d,t),t+=3,e.toArray(d,t),t+=3,e.toArray(d,t),t+=3}const f=new Gs;f.setAttribute("position",new Ns(h,3)),f.setAttribute("color",new Ns(d,3));super(f,new Oh({vertexColors:!0,toneMapped:!1})),this.type="GridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}class lm extends Yh{constructor(t=10,e=16,n=8,r=64,o=4473924,l=8947848){o=new fs(o),l=new fs(l);const c=[],h=[];if(e>1)for(let i=0;i<e;i++){const n=i/e*(2*Math.PI),r=Math.sin(n)*t,d=Math.cos(n)*t;c.push(0,0,0),c.push(r,0,d);const f=1&i?o:l;h.push(f.r,f.g,f.b),h.push(f.r,f.g,f.b)}for(let i=0;i<n;i++){const e=1&i?o:l,d=t-t/n*i;for(let t=0;t<r;t++){let n=t/r*(2*Math.PI),o=Math.sin(n)*d,l=Math.cos(n)*d;c.push(o,0,l),h.push(e.r,e.g,e.b),n=(t+1)/r*(2*Math.PI),o=Math.sin(n)*d,l=Math.cos(n)*d,c.push(o,0,l),h.push(e.r,e.g,e.b)}}const d=new Gs;d.setAttribute("position",new Ns(c,3)),d.setAttribute("color",new Ns(h,3));super(d,new Oh({vertexColors:!0,toneMapped:!1})),this.type="PolarGridHelper"}dispose(){this.geometry.dispose(),this.material.dispose()}}const cm=new Gi,hm=new Gi,um=new Gi;class dm extends Zr{constructor(t,e,n){super(),this.light=t,this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.color=n,this.type="DirectionalLightHelper",void 0===e&&(e=1);let r=new Gs;r.setAttribute("position",new Ns([-e,e,0,e,e,0,e,-e,0,-e,-e,0,-e,e,0],3));const o=new Oh({fog:!1,toneMapped:!1});this.lightPlane=new Wh(r,o),this.add(this.lightPlane),r=new Gs,r.setAttribute("position",new Ns([0,0,0,0,0,1],3)),this.targetLine=new Wh(r,o),this.add(this.targetLine),this.update()}dispose(){this.lightPlane.geometry.dispose(),this.lightPlane.material.dispose(),this.targetLine.geometry.dispose(),this.targetLine.material.dispose()}update(){this.light.updateWorldMatrix(!0,!1),this.light.target.updateWorldMatrix(!0,!1),cm.setFromMatrixPosition(this.light.matrixWorld),hm.setFromMatrixPosition(this.light.target.matrixWorld),um.subVectors(hm,cm),this.lightPlane.lookAt(hm),void 0!==this.color?(this.lightPlane.material.color.set(this.color),this.targetLine.material.color.set(this.color)):(this.lightPlane.material.color.copy(this.light.color),this.targetLine.material.color.copy(this.light.color)),this.targetLine.lookAt(hm),this.targetLine.scale.z=um.length()}}const pm=new Gi,fm=new ca;class mm extends Yh{constructor(t){const e=new Gs,n=new Oh({color:16777215,vertexColors:!0,toneMapped:!1}),r=[],o=[],l={};function c(a,b){h(a),h(b)}function h(t){r.push(0,0,0),o.push(0,0,0),void 0===l[t]&&(l[t]=[]),l[t].push(r.length/3-1)}c("n1","n2"),c("n2","n4"),c("n4","n3"),c("n3","n1"),c("f1","f2"),c("f2","f4"),c("f4","f3"),c("f3","f1"),c("n1","f1"),c("n2","f2"),c("n3","f3"),c("n4","f4"),c("p","n1"),c("p","n2"),c("p","n3"),c("p","n4"),c("u1","u2"),c("u2","u3"),c("u3","u1"),c("c","t"),c("p","c"),c("cn1","cn2"),c("cn3","cn4"),c("cf1","cf2"),c("cf3","cf4"),e.setAttribute("position",new Ns(r,3)),e.setAttribute("color",new Ns(o,3)),super(e,n),this.type="CameraHelper",this.camera=t,this.camera.updateProjectionMatrix&&this.camera.updateProjectionMatrix(),this.matrix=t.matrixWorld,this.matrixAutoUpdate=!1,this.pointMap=l,this.update();const d=new fs(16755200),f=new fs(16711680),m=new fs(43775),_=new fs(16777215),v=new fs(3355443);this.setColors(d,f,m,_,v)}setColors(t,e,n,r,o){const l=this.geometry.getAttribute("color");l.setXYZ(0,t.r,t.g,t.b),l.setXYZ(1,t.r,t.g,t.b),l.setXYZ(2,t.r,t.g,t.b),l.setXYZ(3,t.r,t.g,t.b),l.setXYZ(4,t.r,t.g,t.b),l.setXYZ(5,t.r,t.g,t.b),l.setXYZ(6,t.r,t.g,t.b),l.setXYZ(7,t.r,t.g,t.b),l.setXYZ(8,t.r,t.g,t.b),l.setXYZ(9,t.r,t.g,t.b),l.setXYZ(10,t.r,t.g,t.b),l.setXYZ(11,t.r,t.g,t.b),l.setXYZ(12,t.r,t.g,t.b),l.setXYZ(13,t.r,t.g,t.b),l.setXYZ(14,t.r,t.g,t.b),l.setXYZ(15,t.r,t.g,t.b),l.setXYZ(16,t.r,t.g,t.b),l.setXYZ(17,t.r,t.g,t.b),l.setXYZ(18,t.r,t.g,t.b),l.setXYZ(19,t.r,t.g,t.b),l.setXYZ(20,t.r,t.g,t.b),l.setXYZ(21,t.r,t.g,t.b),l.setXYZ(22,t.r,t.g,t.b),l.setXYZ(23,t.r,t.g,t.b),l.setXYZ(24,e.r,e.g,e.b),l.setXYZ(25,e.r,e.g,e.b),l.setXYZ(26,e.r,e.g,e.b),l.setXYZ(27,e.r,e.g,e.b),l.setXYZ(28,e.r,e.g,e.b),l.setXYZ(29,e.r,e.g,e.b),l.setXYZ(30,e.r,e.g,e.b),l.setXYZ(31,e.r,e.g,e.b),l.setXYZ(32,n.r,n.g,n.b),l.setXYZ(33,n.r,n.g,n.b),l.setXYZ(34,n.r,n.g,n.b),l.setXYZ(35,n.r,n.g,n.b),l.setXYZ(36,n.r,n.g,n.b),l.setXYZ(37,n.r,n.g,n.b),l.setXYZ(38,r.r,r.g,r.b),l.setXYZ(39,r.r,r.g,r.b),l.setXYZ(40,o.r,o.g,o.b),l.setXYZ(41,o.r,o.g,o.b),l.setXYZ(42,o.r,o.g,o.b),l.setXYZ(43,o.r,o.g,o.b),l.setXYZ(44,o.r,o.g,o.b),l.setXYZ(45,o.r,o.g,o.b),l.setXYZ(46,o.r,o.g,o.b),l.setXYZ(47,o.r,o.g,o.b),l.setXYZ(48,o.r,o.g,o.b),l.setXYZ(49,o.r,o.g,o.b),l.needsUpdate=!0}update(){const t=this.geometry,e=this.pointMap;fm.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse),gm("c",e,t,fm,0,0,-1),gm("t",e,t,fm,0,0,1),gm("n1",e,t,fm,-1,-1,-1),gm("n2",e,t,fm,1,-1,-1),gm("n3",e,t,fm,-1,1,-1),gm("n4",e,t,fm,1,1,-1),gm("f1",e,t,fm,-1,-1,1),gm("f2",e,t,fm,1,-1,1),gm("f3",e,t,fm,-1,1,1),gm("f4",e,t,fm,1,1,1),gm("u1",e,t,fm,.7,1.1,-1),gm("u2",e,t,fm,-.7,1.1,-1),gm("u3",e,t,fm,0,2,-1),gm("cf1",e,t,fm,-1,0,1),gm("cf2",e,t,fm,1,0,1),gm("cf3",e,t,fm,0,-1,1),gm("cf4",e,t,fm,0,1,1),gm("cn1",e,t,fm,-1,0,-1),gm("cn2",e,t,fm,1,0,-1),gm("cn3",e,t,fm,0,-1,-1),gm("cn4",e,t,fm,0,1,-1),t.getAttribute("position").needsUpdate=!0}dispose(){this.geometry.dispose(),this.material.dispose()}}function gm(t,e,n,r,o,l,c){pm.set(o,l,c).unproject(r);const h=e[t];if(void 0!==h){const t=n.getAttribute("position");for(let i=0,e=h.length;i<e;i++)t.setXYZ(h[i],pm.x,pm.y,pm.z)}}const _m=new ji;class vm extends Yh{constructor(object,t=16776960){const e=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),n=new Float32Array(24),r=new Gs;r.setIndex(new Es(e,1)),r.setAttribute("position",new Es(n,3)),super(r,new Oh({color:t,toneMapped:!1})),this.object=object,this.type="BoxHelper",this.matrixAutoUpdate=!1,this.update()}update(object){if(void 0!==object&&console.warn("THREE.BoxHelper: .update() has no longer arguments."),void 0!==this.object&&_m.setFromObject(this.object),_m.isEmpty())return;const t=_m.min,e=_m.max,n=this.geometry.attributes.position,r=n.array;r[0]=e.x,r[1]=e.y,r[2]=e.z,r[3]=t.x,r[4]=e.y,r[5]=e.z,r[6]=t.x,r[7]=t.y,r[8]=e.z,r[9]=e.x,r[10]=t.y,r[11]=e.z,r[12]=e.x,r[13]=e.y,r[14]=t.z,r[15]=t.x,r[16]=e.y,r[17]=t.z,r[18]=t.x,r[19]=t.y,r[20]=t.z,r[21]=e.x,r[22]=t.y,r[23]=t.z,n.needsUpdate=!0,this.geometry.computeBoundingSphere()}setFromObject(object){return this.object=object,this.update(),this}copy(source,t){return super.copy(source,t),this.object=source.object,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class xm extends Yh{constructor(t,e=16776960){const n=new Uint16Array([0,1,1,2,2,3,3,0,4,5,5,6,6,7,7,4,0,4,1,5,2,6,3,7]),r=new Gs;r.setIndex(new Es(n,1)),r.setAttribute("position",new Ns([1,1,1,-1,1,1,-1,-1,1,1,-1,1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1],3)),super(r,new Oh({color:e,toneMapped:!1})),this.box=t,this.type="Box3Helper",this.geometry.computeBoundingSphere()}updateMatrixWorld(t){const e=this.box;e.isEmpty()||(e.getCenter(this.position),e.getSize(this.scale),this.scale.multiplyScalar(.5),super.updateMatrixWorld(t))}dispose(){this.geometry.dispose(),this.material.dispose()}}class ym extends Wh{constructor(t,e=1,n=16776960){const r=n,o=new Gs;o.setAttribute("position",new Ns([1,-1,0,-1,1,0,-1,-1,0,1,1,0,-1,1,0,-1,-1,0,1,-1,0,1,1,0],3)),o.computeBoundingSphere(),super(o,new Oh({color:r,toneMapped:!1})),this.type="PlaneHelper",this.plane=t,this.size=e;const l=new Gs;l.setAttribute("position",new Ns([1,1,0,-1,1,0,-1,-1,0,1,1,0,-1,-1,0,1,-1,0],3)),l.computeBoundingSphere(),this.add(new ea(l,new vs({color:r,opacity:.2,transparent:!0,depthWrite:!1,toneMapped:!1})))}updateMatrixWorld(t){this.position.set(0,0,0),this.scale.set(.5*this.size,.5*this.size,1),this.lookAt(this.plane.normal),this.translateZ(-this.plane.constant),super.updateMatrixWorld(t)}dispose(){this.geometry.dispose(),this.material.dispose(),this.children[0].geometry.dispose(),this.children[0].material.dispose()}}const Mm=new Gi;let Sm,bm;class Tm extends Zr{constructor(t=new Gi(0,0,1),e=new Gi(0,0,0),n=1,r=16776960,o=.2*n,l=.2*o){super(),this.type="ArrowHelper",void 0===Sm&&(Sm=new Gs,Sm.setAttribute("position",new Ns([0,0,0,0,1,0],3)),bm=new Du(0,.5,1,5,1),bm.translate(0,-.5,0)),this.position.copy(e),this.line=new Wh(Sm,new Oh({color:r,toneMapped:!1})),this.line.matrixAutoUpdate=!1,this.add(this.line),this.cone=new ea(bm,new vs({color:r,toneMapped:!1})),this.cone.matrixAutoUpdate=!1,this.add(this.cone),this.setDirection(t),this.setLength(n,o,l)}setDirection(t){if(t.y>.99999)this.quaternion.set(0,0,0,1);else if(t.y<-.99999)this.quaternion.set(1,0,0,0);else{Mm.set(t.z,0,-t.x).normalize();const e=Math.acos(t.y);this.quaternion.setFromAxisAngle(Mm,e)}}setLength(t,e=.2*t,n=.2*e){this.line.scale.set(1,Math.max(1e-4,t-e),1),this.line.updateMatrix(),this.cone.scale.set(n,e,n),this.cone.position.y=t,this.cone.updateMatrix()}setColor(t){this.line.material.color.set(t),this.cone.material.color.set(t)}copy(source){return super.copy(source,!1),this.line.copy(source.line),this.cone.copy(source.cone),this}dispose(){this.line.geometry.dispose(),this.line.material.dispose(),this.cone.geometry.dispose(),this.cone.material.dispose()}}class wm extends Yh{constructor(t=1){const e=[0,0,0,t,0,0,0,0,0,0,t,0,0,0,0,0,0,t],n=new Gs;n.setAttribute("position",new Ns(e,3)),n.setAttribute("color",new Ns([1,0,0,1,.6,0,0,1,0,.6,1,0,0,0,1,0,.6,1],3));super(n,new Oh({vertexColors:!0,toneMapped:!1})),this.type="AxesHelper"}setColors(t,e,n){const r=new fs,o=this.geometry.attributes.color.array;return r.set(t),r.toArray(o,0),r.toArray(o,3),r.set(e),r.toArray(o,6),r.toArray(o,9),r.set(n),r.toArray(o,12),r.toArray(o,15),this.geometry.attributes.color.needsUpdate=!0,this}dispose(){this.geometry.dispose(),this.material.dispose()}}class Em{constructor(){this.type="ShapePath",this.color=new fs,this.subPaths=[],this.currentPath=null}moveTo(t,e){return this.currentPath=new Pu,this.subPaths.push(this.currentPath),this.currentPath.moveTo(t,e),this}lineTo(t,e){return this.currentPath.lineTo(t,e),this}quadraticCurveTo(t,e,n,r){return this.currentPath.quadraticCurveTo(t,e,n,r),this}bezierCurveTo(t,e,n,r,o,l){return this.currentPath.bezierCurveTo(t,e,n,r,o,l),this}splineThru(t){return this.currentPath.splineThru(t),this}toShapes(t){function e(t,e){const n=e.length;let r=!1;for(let p=n-1,q=0;q<n;p=q++){let n=e[p],o=e[q],l=o.x-n.x,c=o.y-n.y;if(Math.abs(c)>Number.EPSILON){if(c<0&&(n=e[q],l=-l,o=e[p],c=-c),t.y<n.y||t.y>o.y)continue;if(t.y===n.y){if(t.x===n.x)return!0}else{const e=c*(t.x-n.x)-l*(t.y-n.y);if(0===e)return!0;if(e<0)continue;r=!r}}else{if(t.y!==n.y)continue;if(o.x<=t.x&&t.x<=n.x||n.x<=t.x&&t.x<=o.x)return!0}}return r}const n=gd.isClockWise,r=this.subPaths;if(0===r.length)return[];let o,l,c;const h=[];if(1===r.length)return l=r[0],c=new Gu,c.curves=l.curves,h.push(c),h;let d=!n(r[0].getPoints());d=t?!d:d;const f=[],m=[];let _,v,x=[],y=0;m[y]=void 0,x[y]=[];for(let i=0,e=r.length;i<e;i++)l=r[i],_=l.getPoints(),o=n(_),o=t?!o:o,o?(!d&&m[y]&&y++,m[y]={s:new Gu,p:_},m[y].s.curves=l.curves,d&&y++,x[y]=[]):x[y].push({h:l,p:_[0]});if(!m[0])return function(t){const e=[];for(let i=0,n=t.length;i<n;i++){const n=t[i],r=new Gu;r.curves=n.curves,e.push(r)}return e}(r);if(m.length>1){let t=!1,n=0;for(let t=0,e=m.length;t<e;t++)f[t]=[];for(let r=0,o=m.length;r<o;r++){const o=x[r];for(let l=0;l<o.length;l++){const c=o[l];let h=!0;for(let o=0;o<m.length;o++)e(c.p,m[o].p)&&(r!==o&&n++,h?(h=!1,f[o].push(c)):t=!0);h&&f[r].push(c)}}n>0&&!1===t&&(x=f)}for(let i=0,t=m.length;i<t;i++){c=m[i].s,h.push(c),v=x[i];for(let t=0,e=v.length;t<e;t++)c.holes.push(v[t].h)}return h}}class Am extends Kn{constructor(object,t=null){super(),this.object=object,this.domElement=t,this.enabled=!0,this.state=-1,this.keys={},this.mouseButtons={LEFT:null,MIDDLE:null,RIGHT:null},this.touches={ONE:null,TWO:null}}connect(){}disconnect(){}dispose(){}update(){}}class Cm extends Fi{constructor(t=1,e=1,n=1,r={}){console.warn('THREE.WebGLMultipleRenderTargets has been deprecated and will be removed in r172. Use THREE.WebGLRenderTarget and set the "count" parameter to enable MRT.'),super(t,e,{...r,count:n}),this.isWebGLMultipleRenderTargets=!0}get texture(){return this.textures}}"undefined"!=typeof __THREE_DEVTOOLS__&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:r}})),"undefined"!=typeof window&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__=r)}}]);